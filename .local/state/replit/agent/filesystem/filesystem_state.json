{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nJay Shree Mahakal Finance Service (JSMF) is a comprehensive loan management platform serving customers, DSA (Direct Sales Agent) partners, and administrators. The application provides loan origination services including personal loans, business loans, home loans, and loan against property, with features for application management, partner onboarding, and administrative oversight.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe application uses a React-based frontend with TypeScript, built using Vite as the build tool. The architecture follows a component-based design with:\n- **UI Framework**: Shadcn/ui components with Radix UI primitives for consistent, accessible interface elements\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **State Management**: React Query (@tanstack/react-query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n## Backend Architecture\nThe backend is built on Express.js with TypeScript, following a RESTful API pattern:\n- **Server Framework**: Express.js with middleware for session management, logging, and error handling\n- **Session Management**: Express-session with PostgreSQL session store for user authentication\n- **API Structure**: Role-based routing with middleware for authentication and authorization (admin, DSA, user roles)\n- **Development Setup**: Hot reload with Vite integration for seamless development experience\n\n## Data Storage Solutions\n- **Database**: PostgreSQL as the primary database with Neon as the serverless provider\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Schema Design**: Relational model with tables for users, loan applications, DSA partners, leads, and contact queries\n- **Data Validation**: Zod schemas for runtime type checking and API validation\n\n## Authentication and Authorization\n- **Session-based Authentication**: Server-side sessions stored in PostgreSQL\n- **Role-based Access Control**: Three distinct user roles (admin, DSA, user) with specific permissions\n- **Middleware Protection**: Route-level authentication and role verification\n- **Security**: Password hashing with bcrypt and secure session configuration\n\n## External Dependencies\n\n### Third-party Services\n- **Neon Database**: Serverless PostgreSQL hosting for production database\n- **Replit Integration**: Development environment with cartographer plugin and runtime error overlay\n\n### UI and Styling Libraries\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Type-safe component variants management\n\n### Development Tools\n- **TypeScript**: Static type checking across frontend and backend\n- **ESBuild**: Fast bundling for production builds\n- **PostCSS**: CSS processing with Autoprefixer\n- **Drizzle Kit**: Database schema management and migrations\n\n### External Integrations\n- **Google Fonts**: Web fonts for typography (DM Sans, Architects Daughter, Fira Code, Geist Mono)\n- **Unsplash**: Stock photography for service illustrations\n- **Replit Services**: Development banner and cartographer for debugging\n\nThe application is designed as a monorepo with shared schema definitions, enabling type safety across client and server boundaries while maintaining clear separation of concerns between different user roles and their respective dashboards.","size_bytes":3679},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        \"accent-red\": {\n          DEFAULT: \"var(--accent-red)\",\n          foreground: \"var(--accent-red-foreground)\",\n        },\n        \"bg-light\": \"var(--bg-light)\",\n        \"text-dark\": \"var(--text-dark)\",\n        \"text-muted\": \"var(--text-muted)\",\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3018},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport session from \"express-session\";\nimport { \n  insertUserSchema, \n  insertLoanApplicationSchema, \n  insertDsaPartnerSchema, \n  insertLeadSchema, \n  insertContactQuerySchema \n} from \"@shared/schema\";\n\n// Session middleware\nfunction setupSession(app: Express) {\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'jsmf-secret-key-2024',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n}\n\n// Auth middleware\nfunction requireAuth(req: any, res: any, next: any) {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n}\n\nfunction requireRole(role: string) {\n  return (req: any, res: any, next: any) => {\n    if (!req.session.userId || req.session.userRole !== role) {\n      return res.status(403).json({ message: \"Forbidden\" });\n    }\n    next();\n  };\n}\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: string;\n    userRole: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  setupSession(app);\n\n  // Auth routes\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      const user = await storage.authenticateUser(username, password);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.userId = user.id;\n      req.session.userRole = user.role;\n      \n      res.json({ \n        user: { \n          id: user.id, \n          username: user.username, \n          role: user.role, \n          fullName: user.fullName,\n          email: user.email \n        } \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy(() => {\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get('/api/auth/user', requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ \n        id: user.id, \n        username: user.username, \n        role: user.role, \n        fullName: user.fullName,\n        email: user.email \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // User registration\n  app.post('/api/users/register', async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(userData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(userData.email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      const user = await storage.createUser(userData);\n      res.status(201).json({ \n        user: { \n          id: user.id, \n          username: user.username, \n          role: user.role, \n          fullName: user.fullName,\n          email: user.email \n        } \n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Loan application routes\n  app.post('/api/loan-applications', requireAuth, async (req, res) => {\n    try {\n      const applicationData = insertLoanApplicationSchema.parse(req.body);\n      const application = await storage.createLoanApplication({\n        ...applicationData,\n        userId: req.session.userId!\n      });\n      \n      // Create a lead for this application\n      const user = await storage.getUser(req.session.userId!);\n      if (user) {\n        await storage.createLead({\n          name: user.fullName,\n          mobileNumber: user.mobileNumber,\n          email: user.email,\n          loanType: applicationData.loanType,\n          amount: applicationData.amount || \"0\",\n          city: user.city || \"Bhopal\",\n          source: \"application\"\n        });\n      }\n      \n      res.status(201).json(application);\n    } catch (error) {\n      console.error(\"Application creation error:\", error);\n      res.status(400).json({ message: \"Failed to create application\" });\n    }\n  });\n\n  app.get('/api/loan-applications', requireAuth, async (req, res) => {\n    try {\n      let applications;\n      if (req.session.userRole === 'admin') {\n        applications = await storage.getLoanApplications();\n      } else if (req.session.userRole === 'dsa') {\n        applications = await storage.getLoanApplicationsByDsa(req.session.userId!);\n      } else {\n        applications = await storage.getLoanApplicationsByUser(req.session.userId!);\n      }\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get applications\" });\n    }\n  });\n\n  app.patch('/api/loan-applications/:id', requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const application = await storage.updateLoanApplication(id, updates);\n      res.json(application);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update application\" });\n    }\n  });\n\n  // DSA partner routes\n  app.post('/api/dsa-partners', async (req, res) => {\n    try {\n      const { userData, partnerData } = req.body;\n      \n      // Create user first\n      const userInput = { ...userData, role: \"dsa\" };\n      const parsedUserData = insertUserSchema.parse(userInput);\n      const user = await storage.createUser(parsedUserData);\n      \n      // Create DSA partner profile\n      const parsedPartnerData = insertDsaPartnerSchema.parse(partnerData);\n      const partner = await storage.createDsaPartner({\n        ...parsedPartnerData,\n        userId: user.id\n      });\n      \n      res.status(201).json({ user, partner });\n    } catch (error) {\n      console.error(\"DSA registration error:\", error);\n      res.status(400).json({ message: \"DSA registration failed\" });\n    }\n  });\n\n  app.get('/api/dsa-partners', requireRole('admin'), async (req, res) => {\n    try {\n      const partners = await storage.getDsaPartners();\n      res.json(partners);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get DSA partners\" });\n    }\n  });\n\n  app.get('/api/dsa-partners/profile', requireRole('dsa'), async (req, res) => {\n    try {\n      const partner = await storage.getDsaPartnerByUserId(req.session.userId!);\n      res.json(partner);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get DSA profile\" });\n    }\n  });\n\n  // Lead management routes\n  app.post('/api/leads', async (req, res) => {\n    try {\n      const leadData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead(leadData);\n      res.status(201).json(lead);\n    } catch (error) {\n      console.error(\"Lead creation error:\", error);\n      res.status(400).json({ message: \"Failed to create lead\" });\n    }\n  });\n\n  app.get('/api/leads', requireAuth, async (req, res) => {\n    try {\n      let leads;\n      if (req.session.userRole === 'admin') {\n        leads = await storage.getLeads();\n      } else if (req.session.userRole === 'dsa') {\n        leads = await storage.getLeadsByDsa(req.session.userId!);\n      } else {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      res.json(leads);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get leads\" });\n    }\n  });\n\n  app.patch('/api/leads/:id/assign', requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { dsaId } = req.body;\n      const lead = await storage.assignLeadToDsa(id, dsaId);\n      res.json(lead);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to assign lead\" });\n    }\n  });\n\n  app.patch('/api/leads/:id', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const lead = await storage.updateLead(id, updates);\n      res.json(lead);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update lead\" });\n    }\n  });\n\n  // Contact queries\n  app.post('/api/contact-queries', async (req, res) => {\n    try {\n      const queryData = insertContactQuerySchema.parse(req.body);\n      const query = await storage.createContactQuery(queryData);\n      res.status(201).json(query);\n    } catch (error) {\n      console.error(\"Contact query error:\", error);\n      res.status(400).json({ message: \"Failed to submit query\" });\n    }\n  });\n\n  app.get('/api/contact-queries', requireRole('admin'), async (req, res) => {\n    try {\n      const queries = await storage.getContactQueries();\n      res.json(queries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get contact queries\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9244},"server/storage.ts":{"content":"import { \n  users, \n  loanApplications, \n  dsaPartners, \n  leads, \n  contactQueries,\n  type User, \n  type InsertUser,\n  type LoanApplication,\n  type InsertLoanApplication,\n  type DsaPartner,\n  type InsertDsaPartner,\n  type Lead,\n  type InsertLead,\n  type ContactQuery,\n  type InsertContactQuery\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<User>): Promise<User>;\n  authenticateUser(username: string, password: string): Promise<User | null>;\n  \n  // Loan application operations\n  createLoanApplication(application: InsertLoanApplication & { userId: string }): Promise<LoanApplication>;\n  getLoanApplications(): Promise<LoanApplication[]>;\n  getLoanApplicationsByUser(userId: string): Promise<LoanApplication[]>;\n  getLoanApplicationsByDsa(dsaId: string): Promise<LoanApplication[]>;\n  updateLoanApplication(id: string, updates: Partial<LoanApplication>): Promise<LoanApplication>;\n  \n  // DSA partner operations\n  createDsaPartner(partner: InsertDsaPartner & { userId: string }): Promise<DsaPartner>;\n  getDsaPartners(): Promise<DsaPartner[]>;\n  getDsaPartnerByUserId(userId: string): Promise<DsaPartner | undefined>;\n  updateDsaPartner(id: string, updates: Partial<DsaPartner>): Promise<DsaPartner>;\n  \n  // Lead operations\n  createLead(lead: InsertLead): Promise<Lead>;\n  getLeads(): Promise<Lead[]>;\n  getLeadsByDsa(dsaId: string): Promise<Lead[]>;\n  assignLeadToDsa(leadId: string, dsaId: string): Promise<Lead>;\n  updateLead(id: string, updates: Partial<Lead>): Promise<Lead>;\n  \n  // Contact query operations\n  createContactQuery(query: InsertContactQuery): Promise<ContactQuery>;\n  getContactQueries(): Promise<ContactQuery[]>;\n  updateContactQuery(id: string, updates: Partial<ContactQuery>): Promise<ContactQuery>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private loanApplications: Map<string, LoanApplication> = new Map();\n  private dsaPartners: Map<string, DsaPartner> = new Map();\n  private leads: Map<string, Lead> = new Map();\n  private contactQueries: Map<string, ContactQuery> = new Map();\n\n  constructor() {\n    this.initializeDefaultUsers();\n  }\n\n  private async initializeDefaultUsers() {\n    // Create admin user\n    const adminId = randomUUID();\n    const hashedPassword = await bcrypt.hash(\"Harsh@9131\", 10);\n    this.users.set(adminId, {\n      id: adminId,\n      username: \"harsh@jsmf.in\",\n      email: \"harsh@jsmf.in\",\n      password: hashedPassword,\n      role: \"admin\",\n      fullName: \"Harsh Kumar\",\n      mobileNumber: \"+91 91626 207918\",\n      city: \"Bhopal\",\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const user: User = {\n      ...insertUser,\n      id,\n      password: hashedPassword,\n      role: insertUser.role || \"user\",\n      city: insertUser.city || null,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async authenticateUser(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  // Loan application operations\n  async createLoanApplication(application: InsertLoanApplication & { userId: string }): Promise<LoanApplication> {\n    const id = randomUUID();\n    const loanApp: LoanApplication = {\n      ...application,\n      id,\n      userId: application.userId,\n      amount: application.amount || null,\n      tenure: application.tenure || null,\n      monthlyIncome: application.monthlyIncome || null,\n      employmentType: application.employmentType || null,\n      purpose: application.purpose || null,\n      interestRate: \"7.5\",\n      status: \"pending\",\n      assignedDsaId: null,\n      documents: null,\n      remarks: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.loanApplications.set(id, loanApp);\n    return loanApp;\n  }\n\n  async getLoanApplications(): Promise<LoanApplication[]> {\n    return Array.from(this.loanApplications.values());\n  }\n\n  async getLoanApplicationsByUser(userId: string): Promise<LoanApplication[]> {\n    return Array.from(this.loanApplications.values()).filter(app => app.userId === userId);\n  }\n\n  async getLoanApplicationsByDsa(dsaId: string): Promise<LoanApplication[]> {\n    return Array.from(this.loanApplications.values()).filter(app => app.assignedDsaId === dsaId);\n  }\n\n  async updateLoanApplication(id: string, updates: Partial<LoanApplication>): Promise<LoanApplication> {\n    const application = this.loanApplications.get(id);\n    if (!application) throw new Error(\"Application not found\");\n    \n    const updatedApp = { ...application, ...updates, updatedAt: new Date() };\n    this.loanApplications.set(id, updatedApp);\n    return updatedApp;\n  }\n\n  // DSA partner operations\n  async createDsaPartner(partner: InsertDsaPartner & { userId: string }): Promise<DsaPartner> {\n    const id = randomUUID();\n    const dsaPartner: DsaPartner = {\n      ...partner,\n      id,\n      userId: partner.userId,\n      experience: partner.experience || null,\n      background: partner.background || null,\n      commissionRate: \"2.0\",\n      totalEarnings: \"0\",\n      totalLeads: 0,\n      successfulLeads: 0,\n      kycStatus: \"pending\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.dsaPartners.set(id, dsaPartner);\n    return dsaPartner;\n  }\n\n  async getDsaPartners(): Promise<DsaPartner[]> {\n    return Array.from(this.dsaPartners.values());\n  }\n\n  async getDsaPartnerByUserId(userId: string): Promise<DsaPartner | undefined> {\n    return Array.from(this.dsaPartners.values()).find(partner => partner.userId === userId);\n  }\n\n  async updateDsaPartner(id: string, updates: Partial<DsaPartner>): Promise<DsaPartner> {\n    const partner = this.dsaPartners.get(id);\n    if (!partner) throw new Error(\"DSA partner not found\");\n    \n    const updatedPartner = { ...partner, ...updates, updatedAt: new Date() };\n    this.dsaPartners.set(id, updatedPartner);\n    return updatedPartner;\n  }\n\n  // Lead operations\n  async createLead(lead: InsertLead): Promise<Lead> {\n    const id = randomUUID();\n    const newLead: Lead = {\n      ...lead,\n      id,\n      email: lead.email || null,\n      amount: lead.amount || null,\n      city: lead.city || null,\n      source: lead.source || \"website\",\n      status: \"new\",\n      assignedDsaId: null,\n      assignedAt: null,\n      convertedAt: null,\n      remarks: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.leads.set(id, newLead);\n    return newLead;\n  }\n\n  async getLeads(): Promise<Lead[]> {\n    return Array.from(this.leads.values());\n  }\n\n  async getLeadsByDsa(dsaId: string): Promise<Lead[]> {\n    return Array.from(this.leads.values()).filter(lead => lead.assignedDsaId === dsaId);\n  }\n\n  async assignLeadToDsa(leadId: string, dsaId: string): Promise<Lead> {\n    const lead = this.leads.get(leadId);\n    if (!lead) throw new Error(\"Lead not found\");\n    \n    const updatedLead = { \n      ...lead, \n      assignedDsaId: dsaId, \n      assignedAt: new Date(),\n      updatedAt: new Date() \n    };\n    this.leads.set(leadId, updatedLead);\n    return updatedLead;\n  }\n\n  async updateLead(id: string, updates: Partial<Lead>): Promise<Lead> {\n    const lead = this.leads.get(id);\n    if (!lead) throw new Error(\"Lead not found\");\n    \n    const updatedLead = { ...lead, ...updates, updatedAt: new Date() };\n    this.leads.set(id, updatedLead);\n    return updatedLead;\n  }\n\n  // Contact query operations\n  async createContactQuery(query: InsertContactQuery): Promise<ContactQuery> {\n    const id = randomUUID();\n    const contactQuery: ContactQuery = {\n      ...query,\n      id,\n      email: query.email || null,\n      loanType: query.loanType || null,\n      status: \"new\",\n      createdAt: new Date(),\n    };\n    this.contactQueries.set(id, contactQuery);\n    return contactQuery;\n  }\n\n  async getContactQueries(): Promise<ContactQuery[]> {\n    return Array.from(this.contactQueries.values());\n  }\n\n  async updateContactQuery(id: string, updates: Partial<ContactQuery>): Promise<ContactQuery> {\n    const query = this.contactQueries.get(id);\n    if (!query) throw new Error(\"Contact query not found\");\n    \n    const updatedQuery = { ...query, ...updates };\n    this.contactQueries.set(id, updatedQuery);\n    return updatedQuery;\n  }\n}\n\n// Database storage implementation\nexport class DbStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const userData = {\n      ...insertUser,\n      password: hashedPassword,\n      role: insertUser.role || \"user\",\n    };\n    const result = await db.insert(users).values(userData).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const result = await db.update(users).set({...updates, updatedAt: new Date()}).where(eq(users.id, id)).returning();\n    if (!result[0]) throw new Error(\"User not found\");\n    return result[0];\n  }\n\n  async authenticateUser(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  // Loan application operations\n  async createLoanApplication(application: InsertLoanApplication & { userId: string }): Promise<LoanApplication> {\n    const result = await db.insert(loanApplications).values(application).returning();\n    return result[0];\n  }\n\n  async getLoanApplications(): Promise<LoanApplication[]> {\n    return await db.select().from(loanApplications);\n  }\n\n  async getLoanApplicationsByUser(userId: string): Promise<LoanApplication[]> {\n    return await db.select().from(loanApplications).where(eq(loanApplications.userId, userId));\n  }\n\n  async getLoanApplicationsByDsa(dsaId: string): Promise<LoanApplication[]> {\n    return await db.select().from(loanApplications).where(eq(loanApplications.assignedDsaId, dsaId));\n  }\n\n  async updateLoanApplication(id: string, updates: Partial<LoanApplication>): Promise<LoanApplication> {\n    const result = await db.update(loanApplications).set({...updates, updatedAt: new Date()}).where(eq(loanApplications.id, id)).returning();\n    if (!result[0]) throw new Error(\"Application not found\");\n    return result[0];\n  }\n\n  // DSA partner operations\n  async createDsaPartner(partner: InsertDsaPartner & { userId: string }): Promise<DsaPartner> {\n    const result = await db.insert(dsaPartners).values(partner).returning();\n    return result[0];\n  }\n\n  async getDsaPartners(): Promise<DsaPartner[]> {\n    return await db.select().from(dsaPartners);\n  }\n\n  async getDsaPartnerByUserId(userId: string): Promise<DsaPartner | undefined> {\n    const result = await db.select().from(dsaPartners).where(eq(dsaPartners.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async updateDsaPartner(id: string, updates: Partial<DsaPartner>): Promise<DsaPartner> {\n    const result = await db.update(dsaPartners).set({...updates, updatedAt: new Date()}).where(eq(dsaPartners.id, id)).returning();\n    if (!result[0]) throw new Error(\"DSA partner not found\");\n    return result[0];\n  }\n\n  // Lead operations\n  async createLead(lead: InsertLead): Promise<Lead> {\n    const result = await db.insert(leads).values(lead).returning();\n    return result[0];\n  }\n\n  async getLeads(): Promise<Lead[]> {\n    return await db.select().from(leads);\n  }\n\n  async getLeadsByDsa(dsaId: string): Promise<Lead[]> {\n    return await db.select().from(leads).where(eq(leads.assignedDsaId, dsaId));\n  }\n\n  async assignLeadToDsa(leadId: string, dsaId: string): Promise<Lead> {\n    const result = await db.update(leads).set({ assignedDsaId: dsaId, assignedAt: new Date(), updatedAt: new Date() }).where(eq(leads.id, leadId)).returning();\n    if (!result[0]) throw new Error(\"Lead not found\");\n    return result[0];\n  }\n\n  async updateLead(id: string, updates: Partial<Lead>): Promise<Lead> {\n    const result = await db.update(leads).set({...updates, updatedAt: new Date()}).where(eq(leads.id, id)).returning();\n    if (!result[0]) throw new Error(\"Lead not found\");\n    return result[0];\n  }\n\n  // Contact query operations\n  async createContactQuery(query: InsertContactQuery): Promise<ContactQuery> {\n    const result = await db.insert(contactQueries).values(query).returning();\n    return result[0];\n  }\n\n  async getContactQueries(): Promise<ContactQuery[]> {\n    return await db.select().from(contactQueries);\n  }\n\n  async updateContactQuery(id: string, updates: Partial<ContactQuery>): Promise<ContactQuery> {\n    const result = await db.update(contactQueries).set(updates).where(eq(contactQueries.id, id)).returning();\n    if (!result[0]) throw new Error(\"Contact query not found\");\n    return result[0];\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":14906},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"user\"), // \"admin\", \"dsa\", \"user\"\n  fullName: text(\"full_name\").notNull(),\n  mobileNumber: text(\"mobile_number\").notNull(),\n  city: text(\"city\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const loanApplications = pgTable(\"loan_applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  loanType: text(\"loan_type\").notNull(), // \"personal\", \"business\", \"home\", \"lap\", \"working-capital\"\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }),\n  tenure: integer(\"tenure\"), // in months\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).default(\"7.5\"),\n  status: text(\"status\").default(\"pending\"), // \"pending\", \"approved\", \"rejected\", \"under-review\"\n  assignedDsaId: varchar(\"assigned_dsa_id\").references(() => users.id),\n  monthlyIncome: decimal(\"monthly_income\", { precision: 10, scale: 2 }),\n  employmentType: text(\"employment_type\"), // \"salaried\", \"self-employed\", \"business\"\n  purpose: text(\"purpose\"),\n  documents: text(\"documents\"), // JSON string of uploaded documents\n  remarks: text(\"remarks\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const dsaPartners = pgTable(\"dsa_partners\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  experience: text(\"experience\"),\n  background: text(\"background\"),\n  commissionRate: decimal(\"commission_rate\", { precision: 5, scale: 2 }).default(\"2.0\"),\n  totalEarnings: decimal(\"total_earnings\", { precision: 12, scale: 2 }).default(\"0\"),\n  totalLeads: integer(\"total_leads\").default(0),\n  successfulLeads: integer(\"successful_leads\").default(0),\n  kycStatus: text(\"kyc_status\").default(\"pending\"), // \"pending\", \"verified\", \"rejected\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  mobileNumber: text(\"mobile_number\").notNull(),\n  email: text(\"email\"),\n  loanType: text(\"loan_type\").notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }),\n  city: text(\"city\"),\n  source: text(\"source\").default(\"website\"), // \"website\", \"referral\", \"advertisement\"\n  status: text(\"status\").default(\"new\"), // \"new\", \"contacted\", \"qualified\", \"converted\", \"closed\"\n  assignedDsaId: varchar(\"assigned_dsa_id\").references(() => users.id),\n  assignedAt: timestamp(\"assigned_at\"),\n  convertedAt: timestamp(\"converted_at\"),\n  remarks: text(\"remarks\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const contactQueries = pgTable(\"contact_queries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  mobileNumber: text(\"mobile_number\").notNull(),\n  email: text(\"email\"),\n  loanType: text(\"loan_type\"),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").default(\"new\"), // \"new\", \"responded\", \"closed\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  role: true,\n  fullName: true,\n  mobileNumber: true,\n  city: true,\n});\n\nexport const insertLoanApplicationSchema = createInsertSchema(loanApplications).pick({\n  loanType: true,\n  amount: true,\n  tenure: true,\n  monthlyIncome: true,\n  employmentType: true,\n  purpose: true,\n});\n\nexport const insertDsaPartnerSchema = createInsertSchema(dsaPartners).pick({\n  experience: true,\n  background: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).pick({\n  name: true,\n  mobileNumber: true,\n  email: true,\n  loanType: true,\n  amount: true,\n  city: true,\n  source: true,\n});\n\nexport const insertContactQuerySchema = createInsertSchema(contactQueries).pick({\n  name: true,\n  mobileNumber: true,\n  email: true,\n  loanType: true,\n  message: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertLoanApplication = z.infer<typeof insertLoanApplicationSchema>;\nexport type LoanApplication = typeof loanApplications.$inferSelect;\nexport type InsertDsaPartner = z.infer<typeof insertDsaPartnerSchema>;\nexport type DsaPartner = typeof dsaPartners.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertContactQuery = z.infer<typeof insertContactQuerySchema>;\nexport type ContactQuery = typeof contactQueries.$inferSelect;\n","size_bytes":5319},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport DsaLogin from \"@/pages/dsa-login\";\nimport DsaDashboard from \"@/pages/dsa-dashboard\";\nimport UserLogin from \"@/pages/user-login\";\nimport UserDashboard from \"@/pages/user-dashboard\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/admin\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route path=\"/dsa\" component={DsaLogin} />\n      <Route path=\"/dsa/dashboard\" component={DsaDashboard} />\n      <Route path=\"/user\" component={UserLogin} />\n      <Route path=\"/user/dashboard\" component={UserDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1335},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(202 95% 37%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(203 88% 53%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --accent-red: hsl(0 84% 49%);\n  --accent-red-foreground: hsl(0 0% 100%);\n  --bg-light: hsl(210 40% 98%);\n  --text-dark: hsl(210 22% 15%);\n  --text-muted: hsl(210 14% 42%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom slider styling */\n.emi-slider {\n  -webkit-appearance: none;\n  appearance: none;\n  height: 8px;\n  border-radius: 4px;\n  background: linear-gradient(to right, hsl(202 95% 37%) 0%, hsl(202 95% 37%) 20%, hsl(201 30% 91%) 20%, hsl(201 30% 91%) 100%);\n  outline: none;\n}\n\n.emi-slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  background: hsl(202 95% 37%);\n  cursor: pointer;\n  border: 3px solid white;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n}\n\n.emi-slider::-moz-range-thumb {\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  background: hsl(202 95% 37%);\n  cursor: pointer;\n  border: 3px solid white;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n}\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Logo animation */\n@keyframes logo-glow {\n  0%, 100% { box-shadow: 0 0 20px hsl(202 95% 37% / 0.3); }\n  50% { box-shadow: 0 0 30px hsl(202 95% 37% / 0.6); }\n}\n\n.logo-container:hover {\n  animation: logo-glow 2s infinite;\n}\n","size_bytes":6230},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/contact-section.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MapPin, Phone, Instagram, Info, Calculator, MessageCircle } from \"lucide-react\";\n\ninterface ContactFormData {\n  name: string;\n  mobile: string;\n  email: string;\n  loanType: string;\n  message: string;\n  consent: boolean;\n}\n\nexport default function ContactSection() {\n  const [formData, setFormData] = useState<ContactFormData>({\n    name: \"\",\n    mobile: \"\",\n    email: \"\",\n    loanType: \"\",\n    message: \"\",\n    consent: false,\n  });\n\n  const { toast } = useToast();\n\n  const submitContact = useMutation({\n    mutationFn: async (data: ContactFormData) => {\n      return apiRequest(\"POST\", \"/api/contact-queries\", {\n        name: data.name,\n        mobileNumber: data.mobile,\n        email: data.email,\n        loanType: data.loanType,\n        message: data.message,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent Successfully\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      setFormData({\n        name: \"\",\n        mobile: \"\",\n        email: \"\",\n        loanType: \"\",\n        message: \"\",\n        consent: false,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to Send Message\",\n        description: \"Please try again or contact us directly.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.consent) {\n      toast({\n        title: \"Consent Required\",\n        description: \"Please authorize us to contact you.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.name || !formData.mobile || !formData.message) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitContact.mutate(formData);\n  };\n\n  const contactInfo = [\n    {\n      icon: MapPin,\n      title: \"Office Location\",\n      value: \"Bhopal, Madhya Pradesh\",\n      color: \"bg-primary\"\n    },\n    {\n      icon: Phone,\n      title: \"Phone Number\", \n      value: \"+91 91626 207918\",\n      subtitle: \"Available 24/7 for queries\",\n      color: \"bg-accent-red\"\n    },\n    {\n      icon: Instagram,\n      title: \"Instagram\",\n      value: \"@jayshreemahakalfinance\",\n      subtitle: \"Follow for updates & tips\",\n      color: \"bg-gradient-to-r from-pink-500 to-purple-600\"\n    }\n  ];\n\n  const businessHours = [\n    { day: \"Monday - Friday\", time: \"9:00 AM - 7:00 PM\" },\n    { day: \"Saturday\", time: \"9:00 AM - 5:00 PM\" },\n    { day: \"Sunday\", time: \"Closed\", isClosed: true }\n  ];\n\n  return (\n    <section id=\"contact\" className=\"py-16 bg-bg-light\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold text-text-dark mb-4\" data-testid=\"contact-title\">\n            Get in Touch\n          </h2>\n          <p className=\"text-xl text-text-muted max-w-3xl mx-auto\" data-testid=\"contact-description\">\n            Ready to secure your financial future? Contact us today for personalized loan solutions and expert guidance.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            <div>\n              <h3 className=\"text-2xl font-bold text-primary mb-6\">Contact Information</h3>\n              <div className=\"space-y-4\" data-testid=\"contact-info-list\">\n                {contactInfo.map((info, index) => {\n                  const IconComponent = info.icon;\n                  return (\n                    <div key={index} className=\"flex items-start space-x-4 p-4 bg-white rounded-xl shadow-sm\" data-testid={`contact-info-${index}`}>\n                      <div className={`w-12 h-12 ${info.color} rounded-full flex items-center justify-center flex-shrink-0`}>\n                        <IconComponent className=\"text-white\" size={20} />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-text-dark\">{info.title}</h4>\n                        <p className=\"text-text-muted\">{info.value}</p>\n                        {info.subtitle && (\n                          <p className=\"text-sm text-green-600\">{info.subtitle}</p>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Business Hours */}\n            <Card className=\"shadow-sm\" data-testid=\"business-hours-card\">\n              <CardContent className=\"p-6\">\n                <h4 className=\"text-xl font-bold text-primary mb-4\">Business Hours</h4>\n                <div className=\"space-y-2 text-sm\">\n                  {businessHours.map((schedule, index) => (\n                    <div key={index} className=\"flex justify-between\" data-testid={`business-hour-${index}`}>\n                      <span className=\"text-text-dark\">{schedule.day}:</span>\n                      <span className={`font-semibold ${schedule.isClosed ? 'text-accent-red' : 'text-text-dark'}`}>\n                        {schedule.time}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\n                  <p className=\"text-sm text-green-800 flex items-center\">\n                    <Info className=\"mr-1 w-4 h-4\" />\n                    Emergency loan queries available 24/7 via phone\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Form */}\n          <Card className=\"shadow-lg\" data-testid=\"contact-form-card\">\n            <CardContent className=\"p-8\">\n              <h3 className=\"text-2xl font-bold text-primary mb-6\">Send us a Message</h3>\n              <form className=\"space-y-4\" onSubmit={handleSubmit} data-testid=\"contact-form\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Your Name *\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-primary\"\n                    data-testid=\"input-contact-name\"\n                    required\n                  />\n                  <Input\n                    type=\"tel\"\n                    placeholder=\"Mobile Number *\"\n                    value={formData.mobile}\n                    onChange={(e) => setFormData(prev => ({ ...prev, mobile: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-primary\"\n                    data-testid=\"input-contact-mobile\"\n                    required\n                  />\n                </div>\n                \n                <Input\n                  type=\"email\"\n                  placeholder=\"Email Address\"\n                  value={formData.email}\n                  onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                  className=\"focus:ring-2 focus:ring-primary\"\n                  data-testid=\"input-contact-email\"\n                />\n                \n                <Select value={formData.loanType} onValueChange={(value) => setFormData(prev => ({ ...prev, loanType: value }))}>\n                  <SelectTrigger className=\"focus:ring-2 focus:ring-primary\" data-testid=\"select-contact-loan-type\">\n                    <SelectValue placeholder=\"Select Loan Type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"personal\">Personal Loan</SelectItem>\n                    <SelectItem value=\"business\">Business Loan</SelectItem>\n                    <SelectItem value=\"home\">Home Loan</SelectItem>\n                    <SelectItem value=\"lap\">Loan Against Property</SelectItem>\n                    <SelectItem value=\"working-capital\">Working Capital Loan</SelectItem>\n                    <SelectItem value=\"dsa\">DSA Partnership</SelectItem>\n                    <SelectItem value=\"general\">General Inquiry</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Textarea\n                  placeholder=\"Your Message or Query *\"\n                  rows={4}\n                  value={formData.message}\n                  onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}\n                  className=\"focus:ring-2 focus:ring-primary resize-none\"\n                  data-testid=\"textarea-contact-message\"\n                  required\n                />\n\n                <div className=\"flex items-start space-x-3\">\n                  <Checkbox\n                    id=\"contact-consent\"\n                    checked={formData.consent}\n                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, consent: checked === true }))}\n                    data-testid=\"checkbox-contact-consent\"\n                  />\n                  <label htmlFor=\"contact-consent\" className=\"text-sm text-text-muted\">\n                    I authorize Jay Shree Mahakal Finance Service to contact me regarding my inquiry.\n                  </label>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  disabled={submitContact.isPending}\n                  className=\"w-full bg-primary hover:bg-blue-700 text-white py-4 font-semibold text-lg\"\n                  data-testid=\"button-send-message\"\n                >\n                  {submitContact.isPending ? \"Sending...\" : \"Send Message\"}\n                </Button>\n              </form>\n\n              <div className=\"mt-6 pt-6 border-t border-gray-200 text-center\">\n                <p className=\"text-sm text-text-muted mb-3\">Quick Actions:</p>\n                <div className=\"flex flex-col sm:flex-row gap-3\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"flex-1 bg-accent-red hover:bg-red-700 text-white py-2 px-4 text-sm font-semibold\"\n                    onClick={() => document.getElementById('calculator')?.scrollIntoView({ behavior: 'smooth' })}\n                    data-testid=\"button-quick-calculate\"\n                  >\n                    <Calculator className=\"mr-1 w-4 h-4\" />\n                    Calculate EMI\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className=\"flex-1 bg-green-600 hover:bg-green-700 text-white py-2 px-4 text-sm font-semibold\"\n                    onClick={() => window.open('https://wa.me/919162620791', '_blank')}\n                    data-testid=\"button-whatsapp\"\n                  >\n                    <MessageCircle className=\"mr-1 w-4 h-4\" />\n                    WhatsApp Us\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":11586},"client/src/components/documents-section.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { CreditCard, Building, FileText, Shield, Clock, UserCheck } from \"lucide-react\";\n\nconst documents = [\n  {\n    icon: CreditCard,\n    title: \"Aadhaar Card\",\n    description: \"Valid Aadhaar card for identity verification and address proof.\",\n    color: \"from-blue-500 to-blue-600\"\n  },\n  {\n    icon: CreditCard,\n    title: \"PAN Card\", \n    description: \"Permanent Account Number for tax identification and verification.\",\n    color: \"from-green-500 to-green-600\"\n  },\n  {\n    icon: FileText,\n    title: \"Salary Slip\",\n    description: \"Latest salary slips or bank statements for income verification.\",\n    color: \"from-yellow-500 to-yellow-600\"\n  },\n  {\n    icon: Building,\n    title: \"Business Proof\",\n    description: \"Business registration or GST certificate (for business loans only).\",\n    color: \"from-purple-500 to-purple-600\"\n  }\n];\n\nexport default function DocumentsSection() {\n  return (\n    <section className=\"py-16 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold text-text-dark mb-4\" data-testid=\"documents-title\">\n            Minimum Documents Required\n          </h2>\n          <p className=\"text-xl text-text-muted max-w-3xl mx-auto\" data-testid=\"documents-description\">\n            We keep documentation simple and minimal to ensure quick loan processing without unnecessary hassles.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\" data-testid=\"documents-grid\">\n          {documents.map((doc, index) => {\n            const IconComponent = doc.icon;\n            return (\n              <div key={index} className=\"text-center group\" data-testid={`document-item-${index}`}>\n                <div className={`w-24 h-24 bg-gradient-to-br ${doc.color} rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300`}>\n                  <IconComponent className=\"text-white text-3xl\" size={32} />\n                </div>\n                <h3 className=\"text-xl font-bold text-text-dark mb-2\" data-testid={`document-title-${index}`}>\n                  {doc.title}\n                </h3>\n                <p className=\"text-text-muted text-sm\" data-testid={`document-description-${index}`}>\n                  {doc.description}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Additional Info */}\n        <Card className=\"mt-12 bg-gradient-to-r from-primary to-secondary text-white p-8 text-center\" data-testid=\"security-info-card\">\n          <h3 className=\"text-2xl font-bold mb-4\">Maximum Security, Minimum Documentation</h3>\n          <p className=\"text-lg mb-6 opacity-90\">\n            Our streamlined process ensures your personal information is secure while keeping documentation requirements minimal for faster approval.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Shield className=\"text-2xl\" />\n              <span className=\"font-semibold\">Bank-level Security</span>\n            </div>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Clock className=\"text-2xl\" />\n              <span className=\"font-semibold\">Quick Processing</span>\n            </div>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <UserCheck className=\"text-2xl\" />\n              <span className=\"font-semibold\">Data Protection</span>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3742},"client/src/components/dsa-partnership.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { IndianRupee, TrendingUp, Users, GraduationCap, Upload } from \"lucide-react\";\n\ninterface DSAFormData {\n  fullName: string;\n  email: string;\n  mobile: string;\n  username: string;\n  password: string;\n  city: string;\n  experience: string;\n  background: string;\n  agreed: boolean;\n}\n\nexport default function DSAPartnership() {\n  const [formData, setFormData] = useState<DSAFormData>({\n    fullName: \"\",\n    email: \"\",\n    mobile: \"\",\n    username: \"\",\n    password: \"\",\n    city: \"\",\n    experience: \"\",\n    background: \"\",\n    agreed: false,\n  });\n\n  const { toast } = useToast();\n\n  const registerDSA = useMutation({\n    mutationFn: async (data: DSAFormData) => {\n      const userData = {\n        username: data.username,\n        email: data.email,\n        password: data.password,\n        fullName: data.fullName,\n        mobileNumber: data.mobile,\n        city: data.city,\n      };\n\n      const partnerData = {\n        experience: data.experience,\n        background: data.background,\n      };\n\n      return apiRequest(\"POST\", \"/api/dsa-partners\", { userData, partnerData });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Registration Successful\",\n        description: \"Welcome to our DSA program! You can now login to your portal.\",\n      });\n      setFormData({\n        fullName: \"\",\n        email: \"\",\n        mobile: \"\",\n        username: \"\",\n        password: \"\",\n        city: \"\",\n        experience: \"\",\n        background: \"\",\n        agreed: false,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Please check your information and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.agreed) {\n      toast({\n        title: \"Agreement Required\",\n        description: \"Please agree to the terms and conditions.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.fullName || !formData.email || !formData.mobile || !formData.username || !formData.password || !formData.city) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    registerDSA.mutate(formData);\n  };\n\n  const benefits = [\n    {\n      icon: IndianRupee,\n      title: \"Attractive Commission Structure\",\n      description: \"Earn competitive commissions on every successful loan disbursement with transparent payout terms.\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"Marketing Support\",\n      description: \"Get comprehensive marketing materials, training, and ongoing support to grow your business.\"\n    },\n    {\n      icon: Users,\n      title: \"Dedicated Support Team\",\n      description: \"Access to dedicated relationship managers and technical support for seamless operations.\"\n    },\n    {\n      icon: GraduationCap,\n      title: \"Training & Certification\",\n      description: \"Regular training programs and certification to keep you updated with latest products and processes.\"\n    }\n  ];\n\n  return (\n    <section id=\"dsa\" className=\"py-16 bg-gradient-to-r from-yellow-400 to-orange-500\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12 text-white\">\n          <h2 className=\"text-4xl font-bold mb-4\" data-testid=\"dsa-title\">\n            Become a DSA Partner\n          </h2>\n          <p className=\"text-xl max-w-3xl mx-auto opacity-90\" data-testid=\"dsa-description\">\n            Join our Direct Sales Agent program and earn attractive commissions by connecting customers with the right loan products.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n          {/* DSA Benefits */}\n          <div className=\"text-white\" data-testid=\"dsa-benefits\">\n            <h3 className=\"text-3xl font-bold mb-8\">Why Partner with Us?</h3>\n            <div className=\"space-y-6\">\n              {benefits.map((benefit, index) => {\n                const IconComponent = benefit.icon;\n                return (\n                  <div key={index} className=\"flex items-start space-x-4\" data-testid={`benefit-item-${index}`}>\n                    <div className=\"w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                      <IconComponent className=\"text-2xl\" size={24} />\n                    </div>\n                    <div>\n                      <h4 className=\"text-xl font-bold mb-2\">{benefit.title}</h4>\n                      <p className=\"opacity-90\">{benefit.description}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* DSA Registration Form */}\n          <Card className=\"shadow-2xl\" data-testid=\"dsa-registration-form\">\n            <CardContent className=\"p-8\">\n              <h3 className=\"text-2xl font-bold text-text-dark mb-6 text-center\">\n                DSA Registration Form\n              </h3>\n              <form className=\"space-y-4\" onSubmit={handleSubmit}>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Full Name *\"\n                    value={formData.fullName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, fullName: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-yellow-500\"\n                    data-testid=\"input-dsa-fullname\"\n                    required\n                  />\n                  <Input\n                    type=\"email\"\n                    placeholder=\"Email Address *\"\n                    value={formData.email}\n                    onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-yellow-500\"\n                    data-testid=\"input-dsa-email\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <Input\n                    type=\"tel\"\n                    placeholder=\"Mobile Number *\"\n                    value={formData.mobile}\n                    onChange={(e) => setFormData(prev => ({ ...prev, mobile: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-yellow-500\"\n                    data-testid=\"input-dsa-mobile\"\n                    required\n                  />\n                  <Select value={formData.experience} onValueChange={(value) => setFormData(prev => ({ ...prev, experience: value }))}>\n                    <SelectTrigger className=\"focus:ring-2 focus:ring-yellow-500\" data-testid=\"select-dsa-experience\">\n                      <SelectValue placeholder=\"Select Experience\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"0-1\">0-1 Years</SelectItem>\n                      <SelectItem value=\"1-3\">1-3 Years</SelectItem>\n                      <SelectItem value=\"3-5\">3-5 Years</SelectItem>\n                      <SelectItem value=\"5+\">5+ Years</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Username *\"\n                    value={formData.username}\n                    onChange={(e) => setFormData(prev => ({ ...prev, username: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-yellow-500\"\n                    data-testid=\"input-dsa-username\"\n                    required\n                  />\n                  <Input\n                    type=\"password\"\n                    placeholder=\"Password *\"\n                    value={formData.password}\n                    onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-yellow-500\"\n                    data-testid=\"input-dsa-password\"\n                    required\n                  />\n                </div>\n\n                <Input\n                  type=\"text\"\n                  placeholder=\"City *\"\n                  value={formData.city}\n                  onChange={(e) => setFormData(prev => ({ ...prev, city: e.target.value }))}\n                  className=\"focus:ring-2 focus:ring-yellow-500\"\n                  data-testid=\"input-dsa-city\"\n                  required\n                />\n                \n                <Textarea\n                  placeholder=\"Brief background and experience\"\n                  rows={3}\n                  value={formData.background}\n                  onChange={(e) => setFormData(prev => ({ ...prev, background: e.target.value }))}\n                  className=\"focus:ring-2 focus:ring-yellow-500 resize-none\"\n                  data-testid=\"textarea-dsa-background\"\n                />\n\n                {/* KYC Upload Section */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold text-text-dark\">Upload KYC Documents:</h4>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-yellow-500 transition-colors cursor-pointer\" data-testid=\"upload-aadhaar\">\n                      <Upload className=\"mx-auto text-2xl text-gray-400 mb-2\" />\n                      <p className=\"text-sm text-text-muted\">Upload Aadhaar Card</p>\n                    </div>\n                    <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-yellow-500 transition-colors cursor-pointer\" data-testid=\"upload-pan\">\n                      <Upload className=\"mx-auto text-2xl text-gray-400 mb-2\" />\n                      <p className=\"text-sm text-text-muted\">Upload PAN Card</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <Checkbox\n                    id=\"dsa-terms\"\n                    checked={formData.agreed}\n                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, agreed: checked === true }))}\n                    data-testid=\"checkbox-dsa-terms\"\n                  />\n                  <label htmlFor=\"dsa-terms\" className=\"text-sm text-text-muted\">\n                    I agree to the terms and conditions and authorize Jay Shree Mahakal Finance Service to contact me.\n                  </label>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  disabled={registerDSA.isPending}\n                  className=\"w-full bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white py-4 font-semibold text-lg shadow-lg\"\n                  data-testid=\"button-register-dsa\"\n                >\n                  {registerDSA.isPending ? \"Registering...\" : \"Register as DSA Partner\"}\n                </Button>\n              </form>\n\n              <div className=\"mt-6 pt-6 border-t border-gray-200 text-center\">\n                <p className=\"text-sm text-text-muted\">Already a DSA Partner?</p>\n                <Button\n                  variant=\"link\"\n                  onClick={() => window.location.href = '/dsa'}\n                  className=\"text-yellow-600 hover:text-yellow-700 font-semibold\"\n                  data-testid=\"link-dsa-login\"\n                >\n                  Login to DSA Portal\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":12438},"client/src/components/emi-calculator.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Calculator } from \"lucide-react\";\n\ninterface EMIResult {\n  monthlyEMI: number;\n  totalPayable: number;\n  totalInterest: number;\n  principalPercentage: number;\n  interestPercentage: number;\n}\n\nexport default function EMICalculator() {\n  const [loanAmount, setLoanAmount] = useState(1000000);\n  const [tenureYears, setTenureYears] = useState(5);\n  const [tenureMonths, setTenureMonths] = useState(0);\n  const [interestRate, setInterestRate] = useState(7.5);\n  const [result, setResult] = useState<EMIResult>({\n    monthlyEMI: 20276,\n    totalPayable: 1216560,\n    totalInterest: 216560,\n    principalPercentage: 82,\n    interestPercentage: 18,\n  });\n\n  const calculateEMI = useCallback(() => {\n    const totalMonths = tenureYears * 12 + tenureMonths;\n    const monthlyRate = interestRate / 12 / 100;\n\n    if (totalMonths > 0 && monthlyRate > 0) {\n      const emi = (loanAmount * monthlyRate * Math.pow(1 + monthlyRate, totalMonths)) / \n                 (Math.pow(1 + monthlyRate, totalMonths) - 1);\n      \n      const totalPayable = emi * totalMonths;\n      const totalInterest = totalPayable - loanAmount;\n      \n      const principalPercentage = Math.round((loanAmount / totalPayable) * 100);\n      const interestPercentage = 100 - principalPercentage;\n\n      setResult({\n        monthlyEMI: Math.round(emi),\n        totalPayable: Math.round(totalPayable),\n        totalInterest: Math.round(totalInterest),\n        principalPercentage,\n        interestPercentage,\n      });\n    }\n  }, [loanAmount, tenureYears, tenureMonths, interestRate]);\n\n  const formatAmount = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatLoanAmount = (amount: number) => {\n    if (amount >= 100000) {\n      return `₹${(amount / 100000).toFixed(0)}L`;\n    }\n    return `₹${(amount / 1000).toFixed(0)}K`;\n  };\n\n  const sliderPercentage = ((loanAmount - 50000) / (5000000 - 50000)) * 100;\n\n  return (\n    <section id=\"calculator\" className=\"py-16 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold text-text-dark mb-4\" data-testid=\"calculator-title\">\n            EMI Calculator\n          </h2>\n          <p className=\"text-xl text-text-muted max-w-3xl mx-auto\" data-testid=\"calculator-description\">\n            Calculate your monthly EMI and plan your loan repayment with our advanced calculator tool.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-start\">\n          {/* Calculator Form */}\n          <Card className=\"bg-bg-light shadow-lg\" data-testid=\"calculator-form\">\n            <CardContent className=\"p-8\">\n              <h3 className=\"text-2xl font-bold text-primary mb-6\">Calculate Your EMI</h3>\n              \n              <form className=\"space-y-6\" data-testid=\"emi-calculator-form\">\n                {/* Loan Amount */}\n                <div>\n                  <Label className=\"block text-sm font-semibold text-text-dark mb-3\">\n                    Loan Amount (₹)\n                  </Label>\n                  <input\n                    type=\"range\"\n                    min=\"50000\"\n                    max=\"5000000\"\n                    step=\"50000\"\n                    value={loanAmount}\n                    onChange={(e) => setLoanAmount(Number(e.target.value))}\n                    className=\"w-full h-2 rounded-lg appearance-none cursor-pointer emi-slider\"\n                    style={{\n                      background: `linear-gradient(to right, hsl(202 95% 37%) 0%, hsl(202 95% 37%) ${sliderPercentage}%, hsl(201 30% 91%) ${sliderPercentage}%, hsl(201 30% 91%) 100%)`\n                    }}\n                    data-testid=\"slider-loan-amount\"\n                  />\n                  <div className=\"flex justify-between text-sm text-text-muted mt-2\">\n                    <span>₹50K</span>\n                    <span className=\"font-semibold text-primary\" data-testid=\"loan-amount-display\">\n                      {formatLoanAmount(loanAmount)}\n                    </span>\n                    <span>₹50L</span>\n                  </div>\n                </div>\n\n                {/* Tenure */}\n                <div>\n                  <Label className=\"block text-sm font-semibold text-text-dark mb-3\">\n                    Loan Tenure\n                  </Label>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Years\"\n                      min=\"1\"\n                      max=\"30\"\n                      value={tenureYears}\n                      onChange={(e) => setTenureYears(Number(e.target.value) || 0)}\n                      className=\"focus:ring-2 focus:ring-primary\"\n                      data-testid=\"input-tenure-years\"\n                    />\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Months\"\n                      min=\"0\"\n                      max=\"11\"\n                      value={tenureMonths}\n                      onChange={(e) => setTenureMonths(Number(e.target.value) || 0)}\n                      className=\"focus:ring-2 focus:ring-primary\"\n                      data-testid=\"input-tenure-months\"\n                    />\n                  </div>\n                </div>\n\n                {/* Interest Rate */}\n                <div>\n                  <Label className=\"block text-sm font-semibold text-text-dark mb-3\">\n                    Interest Rate (% per annum)\n                  </Label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"1\"\n                    max=\"30\"\n                    value={interestRate}\n                    onChange={(e) => setInterestRate(Number(e.target.value) || 0)}\n                    className=\"focus:ring-2 focus:ring-primary\"\n                    data-testid=\"input-interest-rate\"\n                  />\n                  <p className=\"text-sm text-accent-red mt-1 font-medium\">\n                    Our special rate: 7.5%\n                  </p>\n                </div>\n\n                <Button\n                  type=\"button\"\n                  onClick={calculateEMI}\n                  className=\"w-full bg-primary hover:bg-blue-700 text-white py-4 font-semibold text-lg\"\n                  data-testid=\"button-calculate-emi\"\n                >\n                  <Calculator className=\"mr-2\" />\n                  Calculate EMI\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Results Display */}\n          <Card className=\"border-2 border-primary shadow-lg\" data-testid=\"calculator-results\">\n            <CardContent className=\"p-8\">\n              <h3 className=\"text-2xl font-bold text-primary mb-6\">EMI Calculation Results</h3>\n              \n              {/* EMI Result Cards */}\n              <div className=\"space-y-4\">\n                <div className=\"bg-primary text-white rounded-xl p-6 text-center\">\n                  <h4 className=\"text-lg font-semibold mb-2\">Monthly EMI</h4>\n                  <p className=\"text-3xl font-bold\" data-testid=\"monthly-emi-display\">\n                    {formatAmount(result.monthlyEMI)}\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"bg-bg-light rounded-xl p-4 text-center\">\n                    <h4 className=\"text-sm font-semibold text-text-muted mb-1\">Total Payable</h4>\n                    <p className=\"text-xl font-bold text-text-dark\" data-testid=\"total-payable-display\">\n                      {formatAmount(result.totalPayable)}\n                    </p>\n                  </div>\n                  <div className=\"bg-bg-light rounded-xl p-4 text-center\">\n                    <h4 className=\"text-sm font-semibold text-text-muted mb-1\">Total Interest</h4>\n                    <p className=\"text-xl font-bold text-accent-red\" data-testid=\"total-interest-display\">\n                      {formatAmount(result.totalInterest)}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Interest Breakdown Chart */}\n                <div className=\"bg-bg-light rounded-xl p-6\">\n                  <h4 className=\"text-lg font-semibold text-text-dark mb-4 text-center\">\n                    Interest Breakdown\n                  </h4>\n                  <div className=\"flex justify-center\">\n                    <div className=\"relative w-32 h-32\">\n                      <div className=\"w-full h-full rounded-full bg-gradient-to-r from-primary via-secondary to-accent-red opacity-80\"></div>\n                      <div className=\"absolute inset-4 bg-white rounded-full flex items-center justify-center\">\n                        <div className=\"text-center\">\n                          <div className=\"text-xs text-text-muted\">Principal</div>\n                          <div className=\"text-sm font-bold text-primary\" data-testid=\"principal-percentage\">\n                            {result.principalPercentage}%\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between mt-4 text-sm\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-3 h-3 bg-primary rounded mr-2\"></div>\n                      <span>Principal ({result.principalPercentage}%)</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-3 h-3 bg-accent-red rounded mr-2\"></div>\n                      <span>Interest ({result.interestPercentage}%)</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Apply Button */}\n                <Button \n                  className=\"w-full bg-accent-red hover:bg-red-700 text-white py-4 font-semibold text-lg\"\n                  onClick={() => window.location.href = '/user'}\n                  data-testid=\"button-apply-loan\"\n                >\n                  Apply for This Loan\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10670},"client/src/components/footer.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport logoPath from \"@assets/Gemini_Generated_Image_bq4jlqbq4jlqbq4j (1)_1755873870848.png\";\nimport { Facebook, Instagram, Linkedin, Twitter, MapPin, Phone } from \"lucide-react\";\n\nexport default function Footer() {\n  const quickLinks = [\n    { name: \"Home\", href: \"#home\" },\n    { name: \"Our Services\", href: \"#loans\" },\n    { name: \"EMI Calculator\", href: \"#calculator\" },\n    { name: \"DSA Partnership\", href: \"#dsa\" },\n    { name: \"Contact Us\", href: \"#contact\" },\n  ];\n\n  const loanProducts = [\n    { name: \"Personal Loan\", href: \"/user\" },\n    { name: \"Business Loan\", href: \"/user\" },\n    { name: \"Home Loan\", href: \"/user\" },\n    { name: \"Loan Against Property\", href: \"/user\" },\n    { name: \"Working Capital Loan\", href: \"/user\" },\n  ];\n\n  const portalLinks = [\n    { name: \"Admin Login\", href: \"/admin\", color: \"bg-red-600 hover:bg-red-700\" },\n    { name: \"DSA Login\", href: \"/dsa\", color: \"bg-yellow-500 hover:bg-yellow-600 text-black\" },\n    { name: \"User Login\", href: \"/user\", color: \"bg-primary hover:bg-blue-700\" },\n  ];\n\n  const socialLinks = [\n    { icon: Facebook, href: \"#\", label: \"Facebook\" },\n    { icon: Instagram, href: \"#\", label: \"Instagram\" },\n    { icon: Linkedin, href: \"#\", label: \"LinkedIn\" },\n    { icon: Twitter, href: \"#\", label: \"Twitter\" },\n  ];\n\n  const legalLinks = [\n    { name: \"Privacy Policy\", href: \"#\" },\n    { name: \"Terms & Conditions\", href: \"#\" },\n    { name: \"Disclaimer\", href: \"#\" },\n  ];\n\n  const handleLinkClick = (href: string) => {\n    if (href.startsWith('#')) {\n      const element = document.getElementById(href.substring(1));\n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth' });\n      }\n    } else {\n      window.location.href = href;\n    }\n  };\n\n  return (\n    <footer className=\"bg-text-dark text-white py-12\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div data-testid=\"footer-company-info\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-14 h-14 flex items-center justify-center\">\n                <img src={logoPath} alt=\"JSMF Logo\" className=\"w-12 h-12 object-contain\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">Jay Shree Mahakal</h3>\n                <p className=\"text-sm text-gray-400\">Finance Service</p>\n              </div>\n            </div>\n            <p className=\"text-gray-400 text-sm mb-4\">\n              Professional finance services in Bhopal providing fast, secure, and reliable loan solutions with competitive interest rates.\n            </p>\n            <div className=\"flex space-x-4\">\n              {socialLinks.map((social, index) => {\n                const IconComponent = social.icon;\n                return (\n                  <button\n                    key={index}\n                    onClick={() => handleLinkClick(social.href)}\n                    className=\"text-gray-400 hover:text-white transition-colors\"\n                    aria-label={social.label}\n                    data-testid={`social-link-${social.label.toLowerCase()}`}\n                  >\n                    <IconComponent className=\"w-5 h-5\" />\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div data-testid=\"footer-quick-links\">\n            <h4 className=\"font-semibold mb-6\">Quick Links</h4>\n            <ul className=\"space-y-3\">\n              {quickLinks.map((link, index) => (\n                <li key={index}>\n                  <button\n                    onClick={() => handleLinkClick(link.href)}\n                    className=\"text-gray-400 hover:text-white transition-colors text-sm text-left\"\n                    data-testid={`quick-link-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {link.name}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Loan Products */}\n          <div data-testid=\"footer-loan-products\">\n            <h4 className=\"font-semibold mb-6\">Loan Products</h4>\n            <ul className=\"space-y-3\">\n              {loanProducts.map((product, index) => (\n                <li key={index}>\n                  <button\n                    onClick={() => handleLinkClick(product.href)}\n                    className=\"text-gray-400 hover:text-white transition-colors text-sm text-left\"\n                    data-testid={`loan-product-${product.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {product.name}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Contact Info & Portals */}\n          <div data-testid=\"footer-contact-portals\">\n            <h4 className=\"font-semibold mb-6\">Contact Info</h4>\n            <ul className=\"space-y-3 mb-6\">\n              <li className=\"flex items-center space-x-2 text-sm\">\n                <MapPin className=\"text-primary w-4 h-4\" />\n                <span className=\"text-gray-400\">Bhopal, Madhya Pradesh</span>\n              </li>\n              <li className=\"flex items-center space-x-2 text-sm\">\n                <Phone className=\"text-primary w-4 h-4\" />\n                <span className=\"text-gray-400\">+91 91626 207918</span>\n              </li>\n              <li className=\"flex items-center space-x-2 text-sm\">\n                <Instagram className=\"text-primary w-4 h-4\" />\n                <span className=\"text-gray-400\">@jayshreemahakalfinance</span>\n              </li>\n            </ul>\n\n            {/* Portal Links */}\n            <div>\n              <h5 className=\"font-semibold mb-3 text-sm\">Login Portals</h5>\n              <div className=\"space-y-2\" data-testid=\"footer-portal-links\">\n                {portalLinks.map((portal, index) => (\n                  <Button\n                    key={index}\n                    onClick={() => handleLinkClick(portal.href)}\n                    className={`w-full ${portal.color} px-3 py-2 text-center text-sm font-semibold transition-colors`}\n                    data-testid={`portal-link-${portal.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {portal.name}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"mt-12 pt-8 border-t border-gray-700 flex flex-col md:flex-row justify-between items-center\" data-testid=\"footer-bottom\">\n          <p className=\"text-gray-400 text-sm text-center md:text-left\">\n            &copy; 2024 Jay Shree Mahakal Finance Service. All rights reserved.\n          </p>\n          <div className=\"flex space-x-6 mt-4 md:mt-0\" data-testid=\"footer-legal-links\">\n            {legalLinks.map((link, index) => (\n              <button\n                key={index}\n                onClick={() => handleLinkClick(link.href)}\n                className=\"text-gray-400 hover:text-white text-sm transition-colors\"\n                data-testid={`legal-link-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                {link.name}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":7488},"client/src/components/hero-section.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Phone, MapPin, Instagram, CheckCircle } from \"lucide-react\";\nimport logoPath from \"@assets/Gemini_Generated_Image_bq4jlqbq4jlqbq4j (1)_1755873870848.png\";\n\nexport default function HeroSection() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    mobile: \"\",\n    loanType: \"\"\n  });\n  \n  const { toast } = useToast();\n\n  const submitQuickApply = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return apiRequest(\"POST\", \"/api/leads\", {\n        name: data.name,\n        mobileNumber: data.mobile,\n        loanType: data.loanType,\n        amount: \"100000\",\n        city: \"Bhopal\",\n        source: \"quick-apply\"\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Application Submitted\",\n        description: \"We'll contact you soon with the best loan options.\",\n      });\n      setFormData({ name: \"\", mobile: \"\", loanType: \"\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Submission Failed\",\n        description: \"Please try again or call us directly.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name || !formData.mobile || !formData.loanType) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    submitQuickApply.mutate(formData);\n  };\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <section id=\"home\" className=\"relative bg-gradient-to-br from-primary to-secondary text-white py-16\">\n      <div className=\"absolute inset-0 bg-black opacity-40\"></div>\n      <div className=\"absolute inset-0\">\n        <img \n          src=\"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?ixlib=rb-4.0.3&auto=format&fit=crop&w=1926&h=1080\" \n          alt=\"Professional business consultation\" \n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n      \n      <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"text-center lg:text-left\">\n            {/* Company Logo */}\n            <div className=\"flex items-center justify-center lg:justify-start mb-6\">\n              <div className=\"w-20 h-20 mr-4\">\n                <img src={logoPath} alt=\"JSMF Logo\" className=\"w-full h-full object-contain\" />\n              </div>\n              <div className=\"text-left\">\n                <h2 className=\"text-2xl font-bold text-white\">Jay Shree Mahakal</h2>\n                <p className=\"text-lg text-yellow-300\">Finance Service</p>\n              </div>\n            </div>\n            \n            <div className=\"inline-block bg-accent-red px-4 py-2 rounded-full text-white font-semibold mb-6\" data-testid=\"roi-badge\">\n              <span className=\"text-2xl font-bold\">7.5% ROI</span> - Reducing Interest Rate\n            </div>\n            \n            <h1 className=\"text-4xl lg:text-5xl font-bold mb-6\" data-testid=\"hero-title\">\n              Fast & Secure <span className=\"text-yellow-300\">Loan Solutions</span>\n            </h1>\n            \n            <p className=\"text-xl mb-8 opacity-90\" data-testid=\"hero-description\">\n              Professional finance services in Bhopal with same-day approvals and minimum documentation.\n            </p>\n\n            {/* Key Highlights */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8\" data-testid=\"highlights-grid\">\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"text-green-400 text-xl\" />\n                <span className=\"font-medium\">Same-day Personal Loan</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"text-green-400 text-xl\" />\n                <span className=\"font-medium\">Salary eligibility from ₹15k+</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"text-green-400 text-xl\" />\n                <span className=\"font-medium\">Daily Business Funding</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"text-green-400 text-xl\" />\n                <span className=\"font-medium\">Minimum Documents Required</span>\n              </div>\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center lg:justify-start\">\n              <Button \n                className=\"bg-accent-red hover:bg-red-700 px-8 py-4 text-white font-semibold shadow-lg\"\n                onClick={() => scrollToSection('loans')}\n                data-testid=\"button-apply-now\"\n              >\n                Apply Now\n              </Button>\n              <Button \n                variant=\"outline\"\n                className=\"bg-white text-primary hover:bg-gray-100 px-8 py-4 font-semibold shadow-lg\"\n                onClick={() => scrollToSection('calculator')}\n                data-testid=\"button-calculate-emi\"\n              >\n                Calculate EMI\n              </Button>\n              <Button \n                className=\"bg-yellow-500 hover:bg-yellow-600 text-black px-8 py-4 font-semibold shadow-lg\"\n                onClick={() => scrollToSection('dsa')}\n                data-testid=\"button-become-dsa\"\n              >\n                Become DSA Partner\n              </Button>\n            </div>\n          </div>\n\n          {/* Contact Info Card */}\n          <Card className=\"bg-white bg-opacity-95 shadow-2xl text-text-dark\" data-testid=\"contact-card\">\n            <CardContent className=\"p-8\">\n              <h3 className=\"text-2xl font-bold text-primary mb-6 text-center\" data-testid=\"contact-card-title\">Contact Us Today</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <MapPin className=\"text-accent-red text-xl\" />\n                  <span className=\"font-medium\">Bhopal, Madhya Pradesh</span>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <Phone className=\"text-accent-red text-xl\" />\n                  <span className=\"font-medium\">+91 91626 207918</span>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <Instagram className=\"text-accent-red text-xl\" />\n                  <span className=\"font-medium\">@jayshreemahakalfinance</span>\n                </div>\n              </div>\n              \n              <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                <h4 className=\"font-semibold text-primary mb-3\">Quick Apply</h4>\n                <form className=\"space-y-3\" onSubmit={handleSubmit} data-testid=\"quick-apply-form\">\n                  <Input\n                    type=\"text\" \n                    placeholder=\"Full Name\" \n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-primary focus:border-transparent\"\n                    data-testid=\"input-full-name\"\n                  />\n                  <Input\n                    type=\"tel\" \n                    placeholder=\"Mobile Number\" \n                    value={formData.mobile}\n                    onChange={(e) => setFormData(prev => ({ ...prev, mobile: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-primary focus:border-transparent\"\n                    data-testid=\"input-mobile-number\"\n                  />\n                  <Select value={formData.loanType} onValueChange={(value) => setFormData(prev => ({ ...prev, loanType: value }))}>\n                    <SelectTrigger className=\"focus:ring-2 focus:ring-primary focus:border-transparent\" data-testid=\"select-loan-type\">\n                      <SelectValue placeholder=\"Select Loan Type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"personal\">Personal Loan</SelectItem>\n                      <SelectItem value=\"business\">Business Loan</SelectItem>\n                      <SelectItem value=\"home\">Home Loan</SelectItem>\n                      <SelectItem value=\"lap\">Loan Against Property</SelectItem>\n                      <SelectItem value=\"working-capital\">Working Capital Loan</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-primary hover:bg-blue-700 text-white py-3 font-semibold\"\n                    disabled={submitQuickApply.isPending}\n                    data-testid=\"button-get-quote\"\n                  >\n                    {submitQuickApply.isPending ? \"Submitting...\" : \"Get Quick Quote\"}\n                  </Button>\n                </form>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9709},"client/src/components/login-portals.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Shield, Handshake, User, Check } from \"lucide-react\";\n\nconst portals = [\n  {\n    title: \"Admin Portal\",\n    icon: Shield,\n    description: \"Comprehensive dashboard to manage all loan applications, approve/reject loans, and oversee DSA partners.\",\n    features: [\n      \"Manage all applications\",\n      \"Approve/Reject loans\", \n      \"DSA partner management\",\n      \"Analytics & Reports\"\n    ],\n    buttonText: \"Admin Login\",\n    buttonClass: \"bg-red-600 hover:bg-red-700\",\n    iconBg: \"from-red-500 to-red-600\",\n    href: \"/admin\"\n  },\n  {\n    title: \"DSA Portal\",\n    icon: Handshake,\n    description: \"Dedicated dashboard for DSA partners to manage leads, track commissions, and upload documents.\",\n    features: [\n      \"Lead management\",\n      \"Commission tracking\",\n      \"Document upload\", \n      \"Performance analytics\"\n    ],\n    buttonText: \"DSA Login\",\n    buttonClass: \"bg-yellow-500 hover:bg-yellow-600 text-black\",\n    iconBg: \"from-yellow-500 to-yellow-600\",\n    href: \"/dsa\"\n  },\n  {\n    title: \"User Portal\",\n    icon: User,\n    description: \"Customer dashboard to fill loan applications, track application status, and manage documents.\",\n    features: [\n      \"Fill loan applications\",\n      \"Track application status\",\n      \"Document management\",\n      \"Loan history\"\n    ],\n    buttonText: \"User Login\",\n    buttonClass: \"bg-primary hover:bg-blue-700\",\n    iconBg: \"from-primary to-secondary\",\n    href: \"/user\"\n  }\n];\n\nexport default function LoginPortals() {\n  return (\n    <section className=\"py-16 bg-bg-light\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold text-text-dark mb-4\" data-testid=\"portals-title\">\n            Access Your Portal\n          </h2>\n          <p className=\"text-xl text-text-muted max-w-3xl mx-auto\" data-testid=\"portals-description\">\n            Secure login portals for administrators, DSA partners, and customers to manage applications and track progress.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\" data-testid=\"portals-grid\">\n          {portals.map((portal, index) => {\n            const IconComponent = portal.icon;\n            return (\n              <Card \n                key={index}\n                className=\"shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                data-testid={`portal-card-${portal.title.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <CardContent className=\"p-8 text-center\">\n                  <div className={`w-20 h-20 bg-gradient-to-br ${portal.iconBg} rounded-full flex items-center justify-center mx-auto mb-6`}>\n                    <IconComponent className=\"text-white text-3xl\" size={32} />\n                  </div>\n                  \n                  <h3 className=\"text-2xl font-bold text-text-dark mb-4\" data-testid={`portal-title-${index}`}>\n                    {portal.title}\n                  </h3>\n                  \n                  <p className=\"text-text-muted mb-6\" data-testid={`portal-description-${index}`}>\n                    {portal.description}\n                  </p>\n                  \n                  <ul className=\"text-left space-y-2 mb-6 text-sm\" data-testid={`portal-features-${index}`}>\n                    {portal.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-center\">\n                        <Check className=\"text-green-500 mr-2 w-4 h-4\" />\n                        <span>{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  \n                  <Button \n                    className={`w-full py-3 font-semibold transition-colors ${portal.buttonClass}`}\n                    onClick={() => window.location.href = portal.href}\n                    data-testid={`portal-login-button-${index}`}\n                  >\n                    {portal.buttonText}\n                  </Button>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4268},"client/src/components/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Menu, X } from \"lucide-react\";\nimport logoPath from \"@assets/Gemini_Generated_Image_bq4jlqbq4jlqbq4j (1)_1755873870848.png\";\n\nexport default function Navbar() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  return (\n    <header className=\"bg-white shadow-md sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-4\">\n          {/* Logo Section */}\n          <Link href=\"/\" className=\"flex items-center space-x-3 logo-container\">\n            <div className=\"w-16 h-16 flex items-center justify-center\">\n              <img src={logoPath} alt=\"JSMF Logo\" className=\"w-14 h-14 object-contain\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-primary\">Jay Shree Mahakal</h1>\n              <p className=\"text-sm text-text-muted\">Finance Service</p>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex space-x-8\">\n            <a href=\"#home\" className=\"text-text-dark hover:text-primary font-medium transition-colors\" data-testid=\"nav-home\">Home</a>\n            <a href=\"#loans\" className=\"text-text-dark hover:text-primary font-medium transition-colors\" data-testid=\"nav-loans\">Loans</a>\n            <a href=\"#calculator\" className=\"text-text-dark hover:text-primary font-medium transition-colors\" data-testid=\"nav-calculator\">EMI Calculator</a>\n            <a href=\"#dsa\" className=\"text-text-dark hover:text-primary font-medium transition-colors\" data-testid=\"nav-dsa\">DSA Partner</a>\n            <a href=\"#contact\" className=\"text-text-dark hover:text-primary font-medium transition-colors\" data-testid=\"nav-contact\">Contact</a>\n          </nav>\n\n          {/* Mobile Menu Button */}\n          <button \n            className=\"md:hidden text-text-dark hover:text-primary\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n            data-testid=\"mobile-menu-toggle\"\n          >\n            {isMenuOpen ? <X className=\"text-xl\" /> : <Menu className=\"text-xl\" />}\n          </button>\n        </div>\n\n        {/* Mobile Navigation Menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden bg-white border-t border-gray-200\" data-testid=\"mobile-menu\">\n            <div className=\"px-4 py-2 space-y-2\">\n              <a href=\"#home\" className=\"block py-3 text-text-dark hover:text-primary font-medium\" onClick={() => setIsMenuOpen(false)} data-testid=\"mobile-nav-home\">Home</a>\n              <a href=\"#loans\" className=\"block py-3 text-text-dark hover:text-primary font-medium\" onClick={() => setIsMenuOpen(false)} data-testid=\"mobile-nav-loans\">Loans</a>\n              <a href=\"#calculator\" className=\"block py-3 text-text-dark hover:text-primary font-medium\" onClick={() => setIsMenuOpen(false)} data-testid=\"mobile-nav-calculator\">EMI Calculator</a>\n              <a href=\"#dsa\" className=\"block py-3 text-text-dark hover:text-primary font-medium\" onClick={() => setIsMenuOpen(false)} data-testid=\"mobile-nav-dsa\">DSA Partner</a>\n              <a href=\"#contact\" className=\"block py-3 text-text-dark hover:text-primary font-medium\" onClick={() => setIsMenuOpen(false)} data-testid=\"mobile-nav-contact\">Contact</a>\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":3389},"client/src/components/services-grid.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Star } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface ServiceCard {\n  title: string;\n  badge: string;\n  badgeColor: string;\n  description: string;\n  features: string[];\n  image: string;\n  alt: string;\n  isSpecial?: boolean;\n}\n\nconst services: ServiceCard[] = [\n  {\n    title: \"Personal Loan\",\n    badge: \"7.5% ROI\",\n    badgeColor: \"bg-accent-red text-white\",\n    description: \"Quick personal loans for salaried individuals with minimal documentation and same-day approval.\",\n    features: [\"Minimum salary ₹15,000\", \"Cash salary from ₹8,000\", \"Loan up to ₹10 Lakhs\"],\n    image: \"https://images.unsplash.com/photo-1573497019940-1c28c88b4f3e?auto=format&fit=crop&w=400&h=250\",\n    alt: \"Personal loan consultation\"\n  },\n  {\n    title: \"Business Loan\",\n    badge: \"Daily Funding\",\n    badgeColor: \"bg-green-500 text-white\",\n    description: \"Expand your business with flexible loan options and daily funding facility for growing enterprises.\",\n    features: [\"Daily funding available\", \"Flexible repayment terms\", \"Loan up to ₹50 Lakhs\"],\n    image: \"https://images.unsplash.com/photo-1521791136064-7986c2920216?auto=format&fit=crop&w=400&h=250\",\n    alt: \"Business loan handshake deal\"\n  },\n  {\n    title: \"Home Loan\",\n    badge: \"Best Rates\",\n    badgeColor: \"bg-blue-500 text-white\",\n    description: \"Make your dream home a reality with our competitive home loan rates and easy approval process.\",\n    features: [\"Competitive interest rates\", \"Up to 30 years tenure\", \"Loan up to ₹5 Crores\"],\n    image: \"https://images.unsplash.com/photo-1582407947304-fd86f028f716?auto=format&fit=crop&w=400&h=250\",\n    alt: \"Home loan family with documents\"\n  },\n  {\n    title: \"Loan Against Property\",\n    badge: \"High Value\",\n    badgeColor: \"bg-purple-500 text-white\",\n    description: \"Unlock the value of your property with secured loans at attractive interest rates.\",\n    features: [\"Lower interest rates\", \"Higher loan amounts\", \"Flexible usage\"],\n    image: \"https://images.unsplash.com/photo-1497366216548-37526070297c?auto=format&fit=crop&w=400&h=250\",\n    alt: \"Professional office workspace\"\n  },\n  {\n    title: \"Working Capital\",\n    badge: \"Quick Fund\",\n    badgeColor: \"bg-orange-500 text-white\",\n    description: \"Maintain smooth cash flow for your business operations with flexible working capital solutions.\",\n    features: [\"Quick disbursement\", \"Minimal documentation\", \"Revolving credit facility\"],\n    image: \"https://images.unsplash.com/photo-1554224155-8d04cb21cd6c?auto=format&fit=crop&w=400&h=250\",\n    alt: \"Financial calculator smartphone\"\n  },\n  {\n    title: \"DSA Partnership\",\n    badge: \"Earn More\",\n    badgeColor: \"bg-yellow-500 text-black\",\n    description: \"Join our DSA program and earn attractive commissions by referring loan customers.\",\n    features: [\"Attractive commission structure\", \"Marketing support provided\", \"Training & certification\"],\n    image: \"https://images.unsplash.com/photo-1600880292203-757bb62b4baf?auto=format&fit=crop&w=400&h=250\",\n    alt: \"DSA partner business meeting\",\n    isSpecial: true\n  }\n];\n\nexport default function ServicesGrid() {\n  const handleServiceClick = (serviceType: string) => {\n    // Navigate to user portal for loan application\n    if (serviceType !== \"DSA Partnership\") {\n      window.location.href = \"/user\";\n    } else {\n      // Scroll to DSA section\n      const element = document.getElementById('dsa');\n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth' });\n      }\n    }\n  };\n\n  return (\n    <section id=\"loans\" className=\"py-16 bg-bg-light\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold text-text-dark mb-4\" data-testid=\"services-title\">\n            Our Loan Services\n          </h2>\n          <p className=\"text-xl text-text-muted max-w-3xl mx-auto\" data-testid=\"services-description\">\n            Comprehensive financial solutions designed for your personal and business needs with competitive rates and quick approvals.\n          </p>\n        </div>\n\n        {/* Services Grid - 3x3 Layout */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\" data-testid=\"services-grid\">\n          {services.map((service, index) => (\n            <Card \n              key={index}\n              className={`shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 ${service.isSpecial ? 'border-2 border-yellow-400' : ''}`}\n              data-testid={`service-card-${service.title.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <CardContent className=\"p-8\">\n                <div className=\"relative overflow-hidden rounded-xl mb-6\">\n                  <img \n                    src={service.image} \n                    alt={service.alt}\n                    className=\"w-full h-48 object-cover transition-transform duration-300 hover:scale-110\"\n                    data-testid={`service-image-${index}`}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-2xl font-bold text-primary\" data-testid={`service-title-${index}`}>\n                    {service.title}\n                  </h3>\n                  <Badge className={service.badgeColor} data-testid={`service-badge-${index}`}>\n                    {service.badge}\n                  </Badge>\n                </div>\n                \n                <p className=\"text-text-muted mb-6\" data-testid={`service-description-${index}`}>\n                  {service.description}\n                </p>\n                \n                <ul className=\"space-y-2 mb-6\" data-testid={`service-features-${index}`}>\n                  {service.features.map((feature, featureIndex) => (\n                    <li key={featureIndex} className=\"flex items-center space-x-2\">\n                      {service.isSpecial ? (\n                        <Star className=\"text-yellow-500 w-4 h-4\" />\n                      ) : (\n                        <Check className=\"text-green-500 w-4 h-4\" />\n                      )}\n                      <span className=\"text-sm\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                \n                <Button \n                  className={`w-full py-3 font-semibold transition-colors ${\n                    service.isSpecial \n                      ? 'bg-yellow-500 hover:bg-yellow-600 text-black' \n                      : 'bg-primary hover:bg-blue-700 text-white'\n                  }`}\n                  onClick={() => handleServiceClick(service.title)}\n                  data-testid={`service-apply-button-${index}`}\n                >\n                  {service.title === \"DSA Partnership\" ? \"Become DSA Partner\" : `Apply ${service.title}`}\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7155},"client/src/hooks/use-auth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport interface AuthUser {\n  id: string;\n  username: string;\n  role: string;\n  fullName: string;\n  email: string;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<AuthUser>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/auth/user\", {\n        credentials: \"include\",\n      });\n      if (response.status === 401) {\n        return null;\n      }\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch user\");\n      }\n      return response.json();\n    },\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    error,\n    isAuthenticated: !!user,\n    isAdmin: user?.role === \"admin\",\n    isDSA: user?.role === \"dsa\",\n    isUser: user?.role === \"user\",\n  };\n}\n","size_bytes":818},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { LoanApplication, DsaPartner, Lead, ContactQuery } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Users, \n  FileText, \n  TrendingUp, \n  Shield, \n  LogOut,\n  Eye,\n  UserPlus,\n  CheckCircle,\n  XCircle,\n  Clock\n} from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const { user, isLoading, isAuthenticated, isAdmin } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Removed access denied check - allow anyone to access admin dashboard for now\n  useEffect(() => {\n    console.log('Admin Dashboard - Auth State:', { isLoading, isAuthenticated, isAdmin, user });\n  }, [isLoading, isAuthenticated, isAdmin, user]);\n\n  // Fetch data\n  const { data: applications = [] } = useQuery<LoanApplication[]>({\n    queryKey: [\"/api/loan-applications\"],\n    enabled: isAdmin,\n  });\n\n  const { data: dsaPartners = [] } = useQuery<DsaPartner[]>({\n    queryKey: [\"/api/dsa-partners\"],\n    enabled: isAdmin,\n  });\n\n  const { data: leads = [] } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n    enabled: isAdmin,\n  });\n\n  const { data: contactQueries = [] } = useQuery<ContactQuery[]>({\n    queryKey: [\"/api/contact-queries\"],\n    enabled: isAdmin,\n  });\n\n  // Mutations\n  const updateApplicationMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      return apiRequest(\"PATCH\", `/api/loan-applications/${id}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/loan-applications\"] });\n      toast({\n        title: \"Application Updated\",\n        description: \"Application status has been updated successfully.\",\n      });\n    },\n  });\n\n  const assignLeadMutation = useMutation({\n    mutationFn: async ({ leadId, dsaId }: { leadId: string; dsaId: string }) => {\n      return apiRequest(\"PATCH\", `/api/leads/${leadId}/assign`, { dsaId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Lead Assigned\",\n        description: \"Lead has been assigned to DSA partner successfully.\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/auth/logout\", {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been logged out successfully.\",\n      });\n      setLocation(\"/admin\");\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { color: \"bg-yellow-500\", text: \"Pending\" },\n      approved: { color: \"bg-green-500\", text: \"Approved\" },\n      rejected: { color: \"bg-red-500\", text: \"Rejected\" },\n      \"under-review\": { color: \"bg-blue-500\", text: \"Under Review\" },\n    };\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    return <Badge className={`${config.color} text-white`}>{config.text}</Badge>;\n  };\n\n  const stats = [\n    {\n      title: \"Total Applications\",\n      value: applications.length,\n      icon: FileText,\n      color: \"text-blue-600\",\n    },\n    {\n      title: \"DSA Partners\",\n      value: dsaPartners.length,\n      icon: Users,\n      color: \"text-green-600\",\n    },\n    {\n      title: \"Active Leads\",\n      value: leads.filter((lead: any) => lead.status !== \"closed\").length,\n      icon: TrendingUp,\n      color: \"text-purple-600\",\n    },\n    {\n      title: \"Pending Queries\",\n      value: contactQueries.filter((query: any) => query.status === \"new\").length,\n      icon: Clock,\n      color: \"text-orange-600\",\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-bg-light flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-text-muted\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !isAdmin) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-bg-light\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Shield className=\"w-8 h-8 text-red-600\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-text-dark\" data-testid=\"dashboard-title\">\n                  Admin Dashboard\n                </h1>\n                <p className=\"text-sm text-text-muted\">Welcome back, {user?.fullName}</p>\n              </div>\n            </div>\n            <Button\n              onClick={handleLogout}\n              variant=\"outline\"\n              className=\"text-red-600 border-red-600 hover:bg-red-50\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\" data-testid=\"stats-grid\">\n          {stats.map((stat, index) => {\n            const IconComponent = stat.icon;\n            return (\n              <Card key={index} className=\"shadow-sm\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-text-muted\">{stat.title}</p>\n                      <p className=\"text-2xl font-bold text-text-dark\" data-testid={`stat-value-${index}`}>\n                        {stat.value}\n                      </p>\n                    </div>\n                    <IconComponent className={`w-8 h-8 ${stat.color}`} />\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"applications\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"applications\" data-testid=\"tab-applications\">Applications</TabsTrigger>\n            <TabsTrigger value=\"leads\" data-testid=\"tab-leads\">Leads</TabsTrigger>\n            <TabsTrigger value=\"dsa\" data-testid=\"tab-dsa\">DSA Partners</TabsTrigger>\n            <TabsTrigger value=\"queries\" data-testid=\"tab-queries\">Queries</TabsTrigger>\n          </TabsList>\n\n          {/* Loan Applications */}\n          <TabsContent value=\"applications\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Loan Applications</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"applications-list\">\n                  {applications.length === 0 ? (\n                    <p className=\"text-center text-text-muted py-8\">No loan applications found.</p>\n                  ) : (\n                    applications.map((app: any) => (\n                      <div key={app.id} className=\"border rounded-lg p-4 space-y-3\" data-testid={`application-${app.id}`}>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h4 className=\"font-semibold text-text-dark capitalize\">\n                              {app.loanType.replace('-', ' ')} Loan\n                            </h4>\n                            <p className=\"text-sm text-text-muted\">\n                              Amount: ₹{parseInt(app.amount || '0').toLocaleString('en-IN')}\n                            </p>\n                          </div>\n                          {getStatusBadge(app.status)}\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <p className=\"text-sm text-text-muted\">\n                            Applied: {new Date(app.createdAt).toLocaleDateString()}\n                          </p>\n                          <div className=\"flex space-x-2\">\n                            <Select\n                              value={app.status}\n                              onValueChange={(value) => \n                                updateApplicationMutation.mutate({ id: app.id, updates: { status: value } })\n                              }\n                            >\n                              <SelectTrigger className=\"w-40\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"pending\">Pending</SelectItem>\n                                <SelectItem value=\"under-review\">Under Review</SelectItem>\n                                <SelectItem value=\"approved\">Approved</SelectItem>\n                                <SelectItem value=\"rejected\">Rejected</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Leads Management */}\n          <TabsContent value=\"leads\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Lead Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"leads-list\">\n                  {leads.length === 0 ? (\n                    <p className=\"text-center text-text-muted py-8\">No leads found.</p>\n                  ) : (\n                    leads.map((lead: any) => (\n                      <div key={lead.id} className=\"border rounded-lg p-4 space-y-3\" data-testid={`lead-${lead.id}`}>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h4 className=\"font-semibold text-text-dark\">{lead.name}</h4>\n                            <p className=\"text-sm text-text-muted\">\n                              {lead.mobileNumber} • {lead.loanType} • ₹{parseInt(lead.amount || '0').toLocaleString('en-IN')}\n                            </p>\n                          </div>\n                          <Badge variant=\"outline\" className=\"capitalize\">\n                            {lead.status}\n                          </Badge>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <p className=\"text-sm text-text-muted\">\n                            {lead.assignedDsaId ? \"Assigned\" : \"Unassigned\"}\n                          </p>\n                          {!lead.assignedDsaId && (\n                            <Select\n                              onValueChange={(value) => \n                                assignLeadMutation.mutate({ leadId: lead.id, dsaId: value })\n                              }\n                            >\n                              <SelectTrigger className=\"w-48\">\n                                <SelectValue placeholder=\"Assign to DSA\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {dsaPartners.map((dsa: any) => (\n                                  <SelectItem key={dsa.userId} value={dsa.userId}>\n                                    DSA Partner {dsa.userId.slice(0, 8)}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* DSA Partners */}\n          <TabsContent value=\"dsa\">\n            <Card>\n              <CardHeader>\n                <CardTitle>DSA Partners</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"dsa-partners-list\">\n                  {dsaPartners.length === 0 ? (\n                    <p className=\"text-center text-text-muted py-8\">No DSA partners found.</p>\n                  ) : (\n                    dsaPartners.map((partner: any) => (\n                      <div key={partner.id} className=\"border rounded-lg p-4 space-y-3\" data-testid={`dsa-partner-${partner.id}`}>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h4 className=\"font-semibold text-text-dark\">\n                              DSA Partner {partner.userId.slice(0, 8)}\n                            </h4>\n                            <p className=\"text-sm text-text-muted\">\n                              Experience: {partner.experience} • Commission: {partner.commissionRate}%\n                            </p>\n                          </div>\n                          <Badge variant=\"outline\" className=\"capitalize\">\n                            {partner.kycStatus}\n                          </Badge>\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                          <div>\n                            <span className=\"text-text-muted\">Total Leads:</span>\n                            <span className=\"font-semibold ml-1\">{partner.totalLeads}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-text-muted\">Successful:</span>\n                            <span className=\"font-semibold ml-1\">{partner.successfulLeads}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-text-muted\">Earnings:</span>\n                            <span className=\"font-semibold ml-1\">₹{parseInt(partner.totalEarnings).toLocaleString('en-IN')}</span>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Contact Queries */}\n          <TabsContent value=\"queries\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Contact Queries</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"contact-queries-list\">\n                  {contactQueries.length === 0 ? (\n                    <p className=\"text-center text-text-muted py-8\">No contact queries found.</p>\n                  ) : (\n                    contactQueries.map((query: any) => (\n                      <div key={query.id} className=\"border rounded-lg p-4 space-y-3\" data-testid={`query-${query.id}`}>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h4 className=\"font-semibold text-text-dark\">{query.name}</h4>\n                            <p className=\"text-sm text-text-muted\">\n                              {query.mobileNumber} • {query.loanType || 'General Inquiry'}\n                            </p>\n                          </div>\n                          <Badge variant=\"outline\" className=\"capitalize\">\n                            {query.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-text-dark\">{query.message}</p>\n                        <p className=\"text-xs text-text-muted\">\n                          Submitted: {new Date(query.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16928},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface LoginFormData {\n  username: string;\n  password: string;\n}\n\nexport default function AdminLogin() {\n  const [formData, setFormData] = useState<LoginFormData>({\n    username: \"\",\n    password: \"\",\n  });\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      return apiRequest(\"POST\", \"/api/auth/login\", data);\n    },\n    onSuccess: async (response: any) => {\n      // Always redirect to dashboard on successful login, skip role checking for now\n      queryClient.setQueryData([\"/api/auth/user\"], response.user);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Login Successful\", \n        description: `Welcome back, ${response.user.fullName}!`,\n      });\n      // Redirect immediately\n      setLocation(\"/admin/dashboard\");\n    },\n    onError: () => {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid username or password.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.username || !formData.password) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter both username and password.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate(formData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-red-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Back to Home */}\n        <Link href=\"/\" className=\"inline-flex items-center text-red-600 hover:text-red-700 mb-6\">\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Home\n        </Link>\n\n        <Card className=\"shadow-2xl border-red-200\" data-testid=\"admin-login-card\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-red-500 to-red-600 rounded-full flex items-center justify-center mx-auto\">\n              <Shield className=\"text-white text-3xl\" size={32} />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-red-600\" data-testid=\"admin-login-title\">\n              Admin Portal\n            </CardTitle>\n            <p className=\"text-text-muted\">\n              Secure access to administration dashboard\n            </p>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"admin-login-form\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter admin username\"\n                  value={formData.username}\n                  onChange={(e) => setFormData(prev => ({ ...prev, username: e.target.value }))}\n                  className=\"focus:ring-2 focus:ring-red-500\"\n                  data-testid=\"input-admin-username\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter admin password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                  className=\"focus:ring-2 focus:ring-red-500\"\n                  data-testid=\"input-admin-password\"\n                  required\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={loginMutation.isPending}\n                className=\"w-full bg-red-600 hover:bg-red-700 text-white py-3 font-semibold\"\n                data-testid=\"button-admin-login\"\n              >\n                {loginMutation.isPending ? \"Signing In...\" : \"Sign In to Admin Portal\"}\n              </Button>\n            </form>\n\n            <div className=\"text-center pt-4 border-t\">\n              <p className=\"text-sm text-text-muted\">\n                Need access? Contact system administrator\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5059},"client/src/pages/dsa-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { DsaPartner, Lead, LoanApplication } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Handshake, \n  LogOut,\n  TrendingUp,\n  Users,\n  IndianRupee,\n  Target,\n  Phone,\n  Mail,\n  MapPin\n} from \"lucide-react\";\n\nexport default function DsaDashboard() {\n  const { user, isLoading, isAuthenticated, isDSA, isAdmin } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Removed access denied check - allow anyone to access DSA dashboard for now  \n  useEffect(() => {\n    console.log('DSA Dashboard - Auth State:', { isLoading, isAuthenticated, isDSA, isAdmin, user });\n  }, [isLoading, isAuthenticated, isDSA, isAdmin, user]);\n\n  // Fetch data\n  const { data: dsaProfile } = useQuery<DsaPartner>({\n    queryKey: [\"/api/dsa-partners/profile\"],\n    enabled: isDSA,\n  });\n\n  const { data: assignedLeads = [] } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n    enabled: isDSA,\n  });\n\n  const { data: applications = [] } = useQuery<LoanApplication[]>({\n    queryKey: [\"/api/loan-applications\"],\n    enabled: isDSA,\n  });\n\n  // Mutations\n  const updateLeadMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      return apiRequest(\"PATCH\", `/api/leads/${id}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Lead Updated\",\n        description: \"Lead status has been updated successfully.\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/auth/logout\", {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been logged out successfully.\",\n      });\n      setLocation(\"/dsa\");\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      new: { color: \"bg-blue-500\", text: \"New\" },\n      contacted: { color: \"bg-yellow-500\", text: \"Contacted\" },\n      qualified: { color: \"bg-green-500\", text: \"Qualified\" },\n      converted: { color: \"bg-purple-500\", text: \"Converted\" },\n      closed: { color: \"bg-gray-500\", text: \"Closed\" },\n    };\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.new;\n    return <Badge className={`${config.color} text-white`}>{config.text}</Badge>;\n  };\n\n  const stats = [\n    {\n      title: \"Total Leads\",\n      value: dsaProfile?.totalLeads || 0,\n      icon: Users,\n      color: \"text-blue-600\",\n    },\n    {\n      title: \"Successful Conversions\",\n      value: dsaProfile?.successfulLeads || 0,\n      icon: Target,\n      color: \"text-green-600\",\n    },\n    {\n      title: \"Total Earnings\",\n      value: `₹${parseInt(dsaProfile?.totalEarnings || '0').toLocaleString('en-IN')}`,\n      icon: IndianRupee,\n      color: \"text-purple-600\",\n    },\n    {\n      title: \"Commission Rate\",\n      value: `${dsaProfile?.commissionRate || 0}%`,\n      icon: TrendingUp,\n      color: \"text-orange-600\",\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-bg-light flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-yellow-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-text-muted\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !isDSA) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-bg-light\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Handshake className=\"w-8 h-8 text-yellow-600\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-text-dark\" data-testid=\"dsa-dashboard-title\">\n                  DSA Dashboard\n                </h1>\n                <p className=\"text-sm text-text-muted\">Welcome back, {user?.fullName}</p>\n              </div>\n            </div>\n            <Button\n              onClick={handleLogout}\n              variant=\"outline\"\n              className=\"text-yellow-600 border-yellow-600 hover:bg-yellow-50\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\" data-testid=\"dsa-stats-grid\">\n          {stats.map((stat, index) => {\n            const IconComponent = stat.icon;\n            return (\n              <Card key={index} className=\"shadow-sm\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-text-muted\">{stat.title}</p>\n                      <p className=\"text-2xl font-bold text-text-dark\" data-testid={`dsa-stat-value-${index}`}>\n                        {stat.value}\n                      </p>\n                    </div>\n                    <IconComponent className={`w-8 h-8 ${stat.color}`} />\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Profile Card */}\n        {dsaProfile && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Handshake className=\"w-5 h-5\" />\n                <span>DSA Profile</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold text-text-dark mb-2\">Experience</h4>\n                  <p className=\"text-text-muted\">{dsaProfile.experience || 'Not specified'}</p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-text-dark mb-2\">KYC Status</h4>\n                  <Badge variant=\"outline\" className=\"capitalize\">\n                    {dsaProfile.kycStatus}\n                  </Badge>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-text-dark mb-2\">Partner Since</h4>\n                  <p className=\"text-text-muted\">\n                    {dsaProfile.createdAt ? new Date(dsaProfile.createdAt).toLocaleDateString() : 'N/A'}\n                  </p>\n                </div>\n              </div>\n              {dsaProfile.background && (\n                <div className=\"mt-4\">\n                  <h4 className=\"font-semibold text-text-dark mb-2\">Background</h4>\n                  <p className=\"text-text-muted\">{dsaProfile.background}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"leads\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"leads\" data-testid=\"tab-dsa-leads\">My Leads</TabsTrigger>\n            <TabsTrigger value=\"applications\" data-testid=\"tab-dsa-applications\">Applications</TabsTrigger>\n          </TabsList>\n\n          {/* Assigned Leads */}\n          <TabsContent value=\"leads\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Assigned Leads</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"dsa-leads-list\">\n                  {assignedLeads.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-text-muted\">No leads assigned yet.</p>\n                      <p className=\"text-sm text-text-muted mt-2\">\n                        New leads will appear here when assigned by admin.\n                      </p>\n                    </div>\n                  ) : (\n                    assignedLeads.map((lead: any) => (\n                      <div key={lead.id} className=\"border rounded-lg p-4 space-y-3\" data-testid={`dsa-lead-${lead.id}`}>\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"space-y-1\">\n                            <h4 className=\"font-semibold text-text-dark\">{lead.name}</h4>\n                            <div className=\"space-y-1 text-sm text-text-muted\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Phone className=\"w-4 h-4\" />\n                                <span>{lead.mobileNumber}</span>\n                              </div>\n                              {lead.email && (\n                                <div className=\"flex items-center space-x-2\">\n                                  <Mail className=\"w-4 h-4\" />\n                                  <span>{lead.email}</span>\n                                </div>\n                              )}\n                              {lead.city && (\n                                <div className=\"flex items-center space-x-2\">\n                                  <MapPin className=\"w-4 h-4\" />\n                                  <span>{lead.city}</span>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          {getStatusBadge(lead.status)}\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <span className=\"text-text-muted\">Loan Type:</span>\n                            <span className=\"font-semibold ml-1 capitalize\">{lead.loanType}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-text-muted\">Amount:</span>\n                            <span className=\"font-semibold ml-1\">\n                              ₹{parseInt(lead.amount || '0').toLocaleString('en-IN')}\n                            </span>\n                          </div>\n                        </div>\n\n                        <div className=\"flex justify-between items-center pt-2 border-t\">\n                          <p className=\"text-xs text-text-muted\">\n                            Assigned: {new Date(lead.assignedAt).toLocaleDateString()}\n                          </p>\n                          <Select\n                            value={lead.status}\n                            onValueChange={(value) => \n                              updateLeadMutation.mutate({ id: lead.id, updates: { status: value } })\n                            }\n                          >\n                            <SelectTrigger className=\"w-32\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"new\">New</SelectItem>\n                              <SelectItem value=\"contacted\">Contacted</SelectItem>\n                              <SelectItem value=\"qualified\">Qualified</SelectItem>\n                              <SelectItem value=\"converted\">Converted</SelectItem>\n                              <SelectItem value=\"closed\">Closed</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Applications */}\n          <TabsContent value=\"applications\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Loan Applications</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"dsa-applications-list\">\n                  {applications.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <Target className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-text-muted\">No applications from your leads yet.</p>\n                      <p className=\"text-sm text-text-muted mt-2\">\n                        Applications from converted leads will appear here.\n                      </p>\n                    </div>\n                  ) : (\n                    applications.map((app: any) => (\n                      <div key={app.id} className=\"border rounded-lg p-4 space-y-3\" data-testid={`dsa-application-${app.id}`}>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h4 className=\"font-semibold text-text-dark capitalize\">\n                              {app.loanType.replace('-', ' ')} Loan\n                            </h4>\n                            <p className=\"text-sm text-text-muted\">\n                              Amount: ₹{parseInt(app.amount || '0').toLocaleString('en-IN')}\n                            </p>\n                          </div>\n                          <Badge variant=\"outline\" className=\"capitalize\">\n                            {app.status}\n                          </Badge>\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <span className=\"text-text-muted\">Tenure:</span>\n                            <span className=\"font-semibold ml-1\">{app.tenure} months</span>\n                          </div>\n                          <div>\n                            <span className=\"text-text-muted\">Interest Rate:</span>\n                            <span className=\"font-semibold ml-1\">{app.interestRate}%</span>\n                          </div>\n                        </div>\n                        <p className=\"text-xs text-text-muted\">\n                          Applied: {new Date(app.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15316},"client/src/pages/dsa-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Handshake, ArrowLeft, UserPlus } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface LoginFormData {\n  username: string;\n  password: string;\n}\n\nexport default function DsaLogin() {\n  const [formData, setFormData] = useState<LoginFormData>({\n    username: \"\",\n    password: \"\",\n  });\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      return apiRequest(\"POST\", \"/api/auth/login\", data);\n    },\n    onSuccess: async (response: any) => {\n      // Always redirect to dashboard on successful login, skip role checking for now\n      queryClient.setQueryData([\"/api/auth/user\"], response.user);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back, ${response.user.fullName}!`,\n      });\n      // Redirect immediately\n      setLocation(\"/dsa/dashboard\");\n    },\n    onError: () => {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid username or password.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.username || !formData.password) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter both username and password.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate(formData);\n  };\n\n  const scrollToDSASection = () => {\n    setLocation(\"/\");\n    setTimeout(() => {\n      const element = document.getElementById('dsa');\n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth' });\n      }\n    }, 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-yellow-50 to-orange-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Back to Home */}\n        <Link href=\"/\" className=\"inline-flex items-center text-yellow-600 hover:text-yellow-700 mb-6\">\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Home\n        </Link>\n\n        <Card className=\"shadow-2xl border-yellow-200\" data-testid=\"dsa-login-card\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-full flex items-center justify-center mx-auto\">\n              <Handshake className=\"text-white text-3xl\" size={32} />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-yellow-600\" data-testid=\"dsa-login-title\">\n              DSA Portal\n            </CardTitle>\n            <p className=\"text-text-muted\">\n              Direct Sales Agent dashboard access\n            </p>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            <Alert>\n              <UserPlus className=\"h-4 w-4\" />\n              <AlertDescription>\n                New to DSA program? Register below to get started with our partnership program.\n              </AlertDescription>\n            </Alert>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"dsa-login-form\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  value={formData.username}\n                  onChange={(e) => setFormData(prev => ({ ...prev, username: e.target.value }))}\n                  className=\"focus:ring-2 focus:ring-yellow-500\"\n                  data-testid=\"input-dsa-username\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                  className=\"focus:ring-2 focus:ring-yellow-500\"\n                  data-testid=\"input-dsa-password\"\n                  required\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={loginMutation.isPending}\n                className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black py-3 font-semibold\"\n                data-testid=\"button-dsa-login\"\n              >\n                {loginMutation.isPending ? \"Signing In...\" : \"Sign In to DSA Portal\"}\n              </Button>\n            </form>\n\n            <div className=\"text-center pt-4 border-t space-y-3\">\n              <p className=\"text-sm text-text-muted\">\n                Don't have an account?\n              </p>\n              <Button\n                variant=\"outline\"\n                onClick={scrollToDSASection}\n                className=\"w-full border-yellow-500 text-yellow-600 hover:bg-yellow-50\"\n                data-testid=\"button-register-dsa\"\n              >\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                Register as DSA Partner\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5937},"client/src/pages/home.tsx":{"content":"import Navbar from \"@/components/navbar\";\nimport HeroSection from \"@/components/hero-section\";\nimport ServicesGrid from \"@/components/services-grid\";\nimport EMICalculator from \"@/components/emi-calculator\";\nimport LoginPortals from \"@/components/login-portals\";\nimport DocumentsSection from \"@/components/documents-section\";\nimport DSAPartnership from \"@/components/dsa-partnership\";\nimport ContactSection from \"@/components/contact-section\";\nimport Footer from \"@/components/footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar />\n      <HeroSection />\n      <ServicesGrid />\n      <EMICalculator />\n      <LoginPortals />\n      <DocumentsSection />\n      <DSAPartnership />\n      <ContactSection />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":795},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/user-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { LoanApplication } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  User, \n  LogOut,\n  FileText,\n  PlusCircle,\n  Clock,\n  CheckCircle,\n  XCircle,\n  TrendingUp\n} from \"lucide-react\";\n\ninterface LoanApplicationData {\n  loanType: string;\n  amount: string;\n  tenure: string;\n  monthlyIncome: string;\n  employmentType: string;\n  purpose: string;\n}\n\nexport default function UserDashboard() {\n  const { user, isLoading, isAuthenticated, isUser } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showApplicationForm, setShowApplicationForm] = useState(false);\n  const [applicationData, setApplicationData] = useState<LoanApplicationData>({\n    loanType: \"\",\n    amount: \"\",\n    tenure: \"\",\n    monthlyIncome: \"\",\n    employmentType: \"\",\n    purpose: \"\",\n  });\n\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || !isUser)) {\n      toast({\n        title: \"Access Denied\",\n        description: \"User access required.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/user\");\n    }\n  }, [isLoading, isAuthenticated, isUser, setLocation, toast]);\n\n  // Fetch user's applications\n  const { data: applications = [] } = useQuery<LoanApplication[]>({\n    queryKey: [\"/api/loan-applications\"],\n    enabled: isUser,\n  });\n\n  // Mutations\n  const submitApplicationMutation = useMutation({\n    mutationFn: async (data: LoanApplicationData) => {\n      return apiRequest(\"POST\", \"/api/loan-applications\", {\n        loanType: data.loanType,\n        amount: data.amount,\n        tenure: parseInt(data.tenure),\n        monthlyIncome: data.monthlyIncome,\n        employmentType: data.employmentType,\n        purpose: data.purpose,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/loan-applications\"] });\n      toast({\n        title: \"Application Submitted\",\n        description: \"Your loan application has been submitted successfully.\",\n      });\n      setShowApplicationForm(false);\n      setApplicationData({\n        loanType: \"\",\n        amount: \"\",\n        tenure: \"\",\n        monthlyIncome: \"\",\n        employmentType: \"\",\n        purpose: \"\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Submission Failed\",\n        description: \"Failed to submit loan application. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/auth/logout\", {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been logged out successfully.\",\n      });\n      setLocation(\"/user\");\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleSubmitApplication = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!applicationData.loanType || !applicationData.amount || !applicationData.tenure || !applicationData.monthlyIncome || !applicationData.employmentType) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    submitApplicationMutation.mutate(applicationData);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { color: \"bg-yellow-500\", text: \"Pending\", icon: Clock },\n      approved: { color: \"bg-green-500\", text: \"Approved\", icon: CheckCircle },\n      rejected: { color: \"bg-red-500\", text: \"Rejected\", icon: XCircle },\n      \"under-review\": { color: \"bg-blue-500\", text: \"Under Review\", icon: Clock },\n    };\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    const IconComponent = config.icon;\n    return (\n      <Badge className={`${config.color} text-white flex items-center space-x-1`}>\n        <IconComponent className=\"w-3 h-3\" />\n        <span>{config.text}</span>\n      </Badge>\n    );\n  };\n\n  const stats = [\n    {\n      title: \"Total Applications\",\n      value: applications.length,\n      icon: FileText,\n      color: \"text-blue-600\",\n    },\n    {\n      title: \"Approved\",\n      value: applications.filter((app: any) => app.status === \"approved\").length,\n      icon: CheckCircle,\n      color: \"text-green-600\",\n    },\n    {\n      title: \"Pending\",\n      value: applications.filter((app: any) => app.status === \"pending\" || app.status === \"under-review\").length,\n      icon: Clock,\n      color: \"text-yellow-600\",\n    },\n    {\n      title: \"Total Amount\",\n      value: `₹${applications.reduce((sum: number, app: any) => sum + parseInt(app.amount || '0'), 0).toLocaleString('en-IN')}`,\n      icon: TrendingUp,\n      color: \"text-purple-600\",\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-bg-light flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-text-muted\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !isUser) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-bg-light\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <User className=\"w-8 h-8 text-primary\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-text-dark\" data-testid=\"user-dashboard-title\">\n                  User Dashboard\n                </h1>\n                <p className=\"text-sm text-text-muted\">Welcome back, {user?.fullName}</p>\n              </div>\n            </div>\n            <Button\n              onClick={handleLogout}\n              variant=\"outline\"\n              className=\"text-primary border-primary hover:bg-blue-50\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\" data-testid=\"user-stats-grid\">\n          {stats.map((stat, index) => {\n            const IconComponent = stat.icon;\n            return (\n              <Card key={index} className=\"shadow-sm\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-text-muted\">{stat.title}</p>\n                      <p className=\"text-2xl font-bold text-text-dark\" data-testid={`user-stat-value-${index}`}>\n                        {stat.value}\n                      </p>\n                    </div>\n                    <IconComponent className={`w-8 h-8 ${stat.color}`} />\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"applications\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"applications\" data-testid=\"tab-user-applications\">My Applications</TabsTrigger>\n            <TabsTrigger value=\"apply\" data-testid=\"tab-user-apply\">Apply for Loan</TabsTrigger>\n          </TabsList>\n\n          {/* Applications List */}\n          <TabsContent value=\"applications\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Your Loan Applications</CardTitle>\n                <Button\n                  onClick={() => setShowApplicationForm(true)}\n                  className=\"bg-primary hover:bg-blue-700\"\n                  data-testid=\"button-new-application\"\n                >\n                  <PlusCircle className=\"w-4 h-4 mr-2\" />\n                  New Application\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"user-applications-list\">\n                  {applications.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-text-muted\">No loan applications yet.</p>\n                      <p className=\"text-sm text-text-muted mt-2\">\n                        Click \"New Application\" to get started with your loan application.\n                      </p>\n                    </div>\n                  ) : (\n                    applications.map((app: any) => (\n                      <div key={app.id} className=\"border rounded-lg p-4 space-y-3\" data-testid={`user-application-${app.id}`}>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h4 className=\"font-semibold text-text-dark capitalize\">\n                              {app.loanType.replace('-', ' ')} Loan\n                            </h4>\n                            <p className=\"text-sm text-text-muted\">\n                              Amount: ₹{parseInt(app.amount || '0').toLocaleString('en-IN')}\n                            </p>\n                          </div>\n                          {getStatusBadge(app.status)}\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <span className=\"text-text-muted\">Tenure:</span>\n                            <span className=\"font-semibold ml-1\">{app.tenure} months</span>\n                          </div>\n                          <div>\n                            <span className=\"text-text-muted\">Interest Rate:</span>\n                            <span className=\"font-semibold ml-1\">{app.interestRate}%</span>\n                          </div>\n                        </div>\n\n                        {app.purpose && (\n                          <div className=\"text-sm\">\n                            <span className=\"text-text-muted\">Purpose:</span>\n                            <span className=\"ml-1\">{app.purpose}</span>\n                          </div>\n                        )}\n\n                        <div className=\"flex justify-between items-center pt-2 border-t\">\n                          <p className=\"text-xs text-text-muted\">\n                            Applied: {new Date(app.createdAt).toLocaleDateString()}\n                          </p>\n                          {app.remarks && (\n                            <p className=\"text-xs text-accent-red\">{app.remarks}</p>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Loan Application Form */}\n          <TabsContent value=\"apply\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Apply for a New Loan</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmitApplication} className=\"space-y-6\" data-testid=\"loan-application-form\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"loanType\">Loan Type *</Label>\n                      <Select value={applicationData.loanType} onValueChange={(value) => setApplicationData(prev => ({ ...prev, loanType: value }))}>\n                        <SelectTrigger data-testid=\"select-loan-type\">\n                          <SelectValue placeholder=\"Select loan type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"personal\">Personal Loan</SelectItem>\n                          <SelectItem value=\"business\">Business Loan</SelectItem>\n                          <SelectItem value=\"home\">Home Loan</SelectItem>\n                          <SelectItem value=\"lap\">Loan Against Property</SelectItem>\n                          <SelectItem value=\"working-capital\">Working Capital Loan</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"amount\">Loan Amount (₹) *</Label>\n                      <Input\n                        id=\"amount\"\n                        type=\"number\"\n                        placeholder=\"Enter loan amount\"\n                        value={applicationData.amount}\n                        onChange={(e) => setApplicationData(prev => ({ ...prev, amount: e.target.value }))}\n                        className=\"focus:ring-2 focus:ring-primary\"\n                        data-testid=\"input-loan-amount\"\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"tenure\">Tenure (Months) *</Label>\n                      <Input\n                        id=\"tenure\"\n                        type=\"number\"\n                        placeholder=\"Enter tenure in months\"\n                        value={applicationData.tenure}\n                        onChange={(e) => setApplicationData(prev => ({ ...prev, tenure: e.target.value }))}\n                        className=\"focus:ring-2 focus:ring-primary\"\n                        data-testid=\"input-loan-tenure\"\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"monthlyIncome\">Monthly Income (₹) *</Label>\n                      <Input\n                        id=\"monthlyIncome\"\n                        type=\"number\"\n                        placeholder=\"Enter monthly income\"\n                        value={applicationData.monthlyIncome}\n                        onChange={(e) => setApplicationData(prev => ({ ...prev, monthlyIncome: e.target.value }))}\n                        className=\"focus:ring-2 focus:ring-primary\"\n                        data-testid=\"input-monthly-income\"\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"employmentType\">Employment Type *</Label>\n                      <Select value={applicationData.employmentType} onValueChange={(value) => setApplicationData(prev => ({ ...prev, employmentType: value }))}>\n                        <SelectTrigger data-testid=\"select-employment-type\">\n                          <SelectValue placeholder=\"Select employment type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"salaried\">Salaried</SelectItem>\n                          <SelectItem value=\"self-employed\">Self-Employed</SelectItem>\n                          <SelectItem value=\"business\">Business Owner</SelectItem>\n                          <SelectItem value=\"freelancer\">Freelancer</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"purpose\">Purpose of Loan</Label>\n                    <Textarea\n                      id=\"purpose\"\n                      placeholder=\"Please describe the purpose of your loan\"\n                      value={applicationData.purpose}\n                      onChange={(e) => setApplicationData(prev => ({ ...prev, purpose: e.target.value }))}\n                      className=\"focus:ring-2 focus:ring-primary resize-none\"\n                      rows={3}\n                      data-testid=\"textarea-loan-purpose\"\n                    />\n                  </div>\n\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\n                    <h4 className=\"font-semibold text-primary mb-2\">Important Information</h4>\n                    <ul className=\"text-sm text-text-muted space-y-1\">\n                      <li>• Our special interest rate: 7.5% reducing</li>\n                      <li>• Minimum documentation required</li>\n                      <li>• Same-day approval for eligible applicants</li>\n                      <li>• Minimum salary requirement: ₹15,000 (Cash salary: ₹8,000)</li>\n                    </ul>\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={submitApplicationMutation.isPending}\n                    className=\"w-full bg-primary hover:bg-blue-700 text-white py-3 font-semibold text-lg\"\n                    data-testid=\"button-submit-application\"\n                  >\n                    {submitApplicationMutation.isPending ? \"Submitting Application...\" : \"Submit Loan Application\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18233},"client/src/pages/user-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { User, ArrowLeft, UserPlus } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface LoginFormData {\n  username: string;\n  password: string;\n}\n\ninterface RegisterFormData {\n  username: string;\n  password: string;\n  email: string;\n  fullName: string;\n  mobileNumber: string;\n  city: string;\n}\n\nexport default function UserLogin() {\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [loginData, setLoginData] = useState<LoginFormData>({\n    username: \"\",\n    password: \"\",\n  });\n  const [registerData, setRegisterData] = useState<RegisterFormData>({\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    fullName: \"\",\n    mobileNumber: \"\",\n    city: \"\",\n  });\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      return apiRequest(\"POST\", \"/api/auth/login\", data);\n    },\n    onSuccess: (response: any) => {\n      if (response.user?.role === \"user\") {\n        toast({\n          title: \"Login Successful\",\n          description: `Welcome back, ${response.user.fullName}!`,\n        });\n        setLocation(\"/user/dashboard\");\n      } else {\n        toast({\n          title: \"Access Denied\",\n          description: \"User credentials required.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid username or password.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterFormData) => {\n      return apiRequest(\"POST\", \"/api/users/register\", { ...data, role: \"user\" });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Registration Successful\",\n        description: \"Account created successfully! Please login with your credentials.\",\n      });\n      setIsRegistering(false);\n      setRegisterData({\n        username: \"\",\n        password: \"\",\n        email: \"\",\n        fullName: \"\",\n        mobileNumber: \"\",\n        city: \"\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Please check your information and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!loginData.username || !loginData.password) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter both username and password.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate(loginData);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!registerData.username || !registerData.password || !registerData.email || !registerData.fullName || !registerData.mobileNumber) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Back to Home */}\n        <Link href=\"/\" className=\"inline-flex items-center text-blue-600 hover:text-blue-700 mb-6\">\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Home\n        </Link>\n\n        <Card className=\"shadow-2xl border-blue-200\" data-testid=\"user-login-card\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center mx-auto\">\n              <User className=\"text-white text-3xl\" size={32} />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-primary\" data-testid=\"user-portal-title\">\n              {isRegistering ? \"Create Account\" : \"User Portal\"}\n            </CardTitle>\n            <p className=\"text-text-muted\">\n              {isRegistering ? \"Join our platform to apply for loans\" : \"Apply for loans and track your applications\"}\n            </p>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            {!isRegistering && (\n              <Alert>\n                <User className=\"h-4 w-4\" />\n                <AlertDescription>\n                  New to our platform? Create an account to apply for loans and track your applications.\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {isRegistering ? (\n              <form onSubmit={handleRegister} className=\"space-y-4\" data-testid=\"user-register-form\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fullName\">Full Name *</Label>\n                    <Input\n                      id=\"fullName\"\n                      type=\"text\"\n                      value={registerData.fullName}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, fullName: e.target.value }))}\n                      className=\"focus:ring-2 focus:ring-primary\"\n                      data-testid=\"input-register-fullname\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"mobile\">Mobile Number *</Label>\n                    <Input\n                      id=\"mobile\"\n                      type=\"tel\"\n                      value={registerData.mobileNumber}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, mobileNumber: e.target.value }))}\n                      className=\"focus:ring-2 focus:ring-primary\"\n                      data-testid=\"input-register-mobile\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email Address *</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={registerData.email}\n                    onChange={(e) => setRegisterData(prev => ({ ...prev, email: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-primary\"\n                    data-testid=\"input-register-email\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username *</Label>\n                    <Input\n                      id=\"username\"\n                      type=\"text\"\n                      value={registerData.username}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, username: e.target.value }))}\n                      className=\"focus:ring-2 focus:ring-primary\"\n                      data-testid=\"input-register-username\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\">Password *</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      value={registerData.password}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, password: e.target.value }))}\n                      className=\"focus:ring-2 focus:ring-primary\"\n                      data-testid=\"input-register-password\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"city\">City</Label>\n                  <Input\n                    id=\"city\"\n                    type=\"text\"\n                    value={registerData.city}\n                    onChange={(e) => setRegisterData(prev => ({ ...prev, city: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-primary\"\n                    data-testid=\"input-register-city\"\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  disabled={registerMutation.isPending}\n                  className=\"w-full bg-primary hover:bg-blue-700 text-white py-3 font-semibold\"\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={handleLogin} className=\"space-y-4\" data-testid=\"user-login-form\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    placeholder=\"Enter your username\"\n                    value={loginData.username}\n                    onChange={(e) => setLoginData(prev => ({ ...prev, username: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-primary\"\n                    data-testid=\"input-user-username\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    value={loginData.password}\n                    onChange={(e) => setLoginData(prev => ({ ...prev, password: e.target.value }))}\n                    className=\"focus:ring-2 focus:ring-primary\"\n                    data-testid=\"input-user-password\"\n                    required\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  disabled={loginMutation.isPending}\n                  className=\"w-full bg-primary hover:bg-blue-700 text-white py-3 font-semibold\"\n                  data-testid=\"button-user-login\"\n                >\n                  {loginMutation.isPending ? \"Signing In...\" : \"Sign In to User Portal\"}\n                </Button>\n              </form>\n            )}\n\n            <div className=\"text-center pt-4 border-t space-y-3\">\n              <p className=\"text-sm text-text-muted\">\n                {isRegistering ? \"Already have an account?\" : \"Don't have an account?\"}\n              </p>\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsRegistering(!isRegistering)}\n                className=\"w-full border-primary text-primary hover:bg-blue-50\"\n                data-testid={isRegistering ? \"button-switch-login\" : \"button-switch-register\"}\n              >\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                {isRegistering ? \"Sign In Instead\" : \"Create New Account\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11670},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"README.md":{"content":"# JSMF Loan Management System - PHP Version\n\nA complete loan management system converted from TypeScript/Node.js to PHP for Hostinger shared hosting compatibility.\n\n## 🏗️ Project Structure\n\n```\n├── backend/                    # PHP Backend API\n│   ├── auth/                  # Authentication endpoints\n│   ├── users/                 # User management\n│   ├── loan-applications/     # Loan application endpoints\n│   ├── dsa-partners/         # DSA partner management\n│   ├── leads/                # Lead management\n│   ├── contact-queries/      # Contact form handling\n│   ├── config/               # Database configuration\n│   ├── includes/             # Common functions and session handling\n│   └── .htaccess             # URL rewriting rules\n├── public_html/              # Frontend (HTML/CSS/JS)\n│   ├── admin/               # Admin login and dashboard\n│   ├── dsa/                 # DSA partner portal\n│   ├── user/                # User portal\n│   ├── assets/              # CSS, JS, and image files\n│   └── index.html           # Main landing page\n└── database.sql             # MySQL database schema\n```\n\n## 🚀 Deployment Instructions for Hostinger\n\n### Step 1: Upload Files\n\n1. **Backend Files**: Upload the `backend/` directory to your hosting account\n2. **Frontend Files**: Upload the contents of `public_html/` to your `public_html` directory\n3. **Database**: Import `database.sql` into your MySQL database\n\n### Step 2: Database Setup\n\n1. Log into your Hostinger control panel\n2. Go to \"Databases\" → \"MySQL Databases\"\n3. Create a new database named `jsmf_loans`\n4. Import the `database.sql` file\n5. Note down your database credentials\n\n### Step 3: Configure Database Connection\n\nEdit `backend/config/database.php` with your database credentials:\n\n```php\nprivate $host = 'localhost';           // Usually localhost for Hostinger\nprivate $database = 'your_db_name';    // Your database name\nprivate $username = 'your_db_user';    // Your database username\nprivate $password = 'your_db_password'; // Your database password\n```\n\n### Step 4: Set Up URL Rewriting\n\nEnsure your `.htaccess` file in the `backend/` directory is properly configured. Hostinger supports URL rewriting by default.\n\n### Step 5: Update API Base URL\n\nIn the following JavaScript files, update the API base URL if needed:\n- `public_html/assets/js/main.js`\n- `public_html/assets/js/auth.js`\n- `public_html/assets/js/dashboard.js`\n\nChange `const API_BASE_URL = 'backend/api';` to match your hosting structure.\n\n### Step 6: Test the Application\n\n1. Visit your domain to see the homepage\n2. Test user registration and login\n3. Test admin login with your admin credentials\n4. Verify all forms are working properly\n\n## 🔐 Admin Access\n\n- Contact system administrator for admin credentials\n- **Users**: Can register through the user portal\n- **DSA Partners**: Can apply through the homepage form\n\n## 📱 Features\n\n### Frontend (Vanilla HTML/CSS/JS)\n- ✅ Responsive design with Tailwind CSS\n- ✅ Loan application forms\n- ✅ EMI calculator\n- ✅ Contact forms\n- ✅ DSA partnership application\n- ✅ User authentication system\n- ✅ Role-based dashboards\n\n### Backend (PHP with MySQL)\n- ✅ RESTful API endpoints\n- ✅ Session-based authentication\n- ✅ Role-based access control (Admin, DSA, User)\n- ✅ Secure password hashing\n- ✅ Input validation and sanitization\n- ✅ CORS support for API calls\n\n### Database (MySQL)\n- ✅ User management with roles\n- ✅ Loan applications tracking\n- ✅ DSA partner management\n- ✅ Lead management system\n- ✅ Contact queries storage\n\n## 🛠️ Customization\n\n### Adding New Loan Types\n1. Update the enum values in `database.sql`\n2. Add options to the frontend forms\n3. Update validation in PHP files\n\n### Styling Changes\n- Edit `public_html/assets/css/style.css`\n- Tailwind classes can be customized in HTML files\n\n### Adding New Features\n1. Create new PHP endpoints in the `backend/` directory\n2. Add corresponding frontend JavaScript functions\n3. Update the database schema if needed\n\n## 🔧 Troubleshooting\n\n### Common Issues\n\n1. **Database Connection Error**\n   - Check database credentials in `backend/config/database.php`\n   - Ensure database exists and is accessible\n\n2. **API Calls Failing**\n   - Check `.htaccess` file is uploaded\n   - Verify URL rewriting is enabled\n   - Check CORS headers\n\n3. **Session Issues**\n   - Ensure PHP sessions are enabled\n   - Check session directory permissions\n\n4. **Form Submissions Not Working**\n   - Verify JavaScript files are loading\n   - Check browser console for errors\n   - Ensure API endpoints are accessible\n\n### Performance Optimization\n\n1. **Enable Gzip Compression** in your hosting control panel\n2. **Optimize Images** before uploading\n3. **Use CDN** for external libraries if needed\n4. **Enable Browser Caching** through .htaccess\n\n## 📞 Support\n\nFor technical support or customization requests, contact the development team.\n\n## 📄 License\n\nThis project is licensed under the MIT License.\n\n---\n\n**Note**: This is a production-ready application converted from a TypeScript/Node.js stack to PHP for shared hosting compatibility. All security best practices have been implemented including input validation, password hashing, and SQL injection prevention.","size_bytes":5375},"backend/auth/login.php":{"content":"<?php\nrequire_once '../config/database.php';\nrequire_once '../includes/session.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] !== 'POST') {\n    sendErrorResponse('Method not allowed', 405);\n}\n\n$input = getJsonInput();\nif (!$input) {\n    sendErrorResponse('Invalid JSON input');\n}\n\n$errors = validateRequired($input, ['username', 'password']);\nif (!empty($errors)) {\n    sendErrorResponse(implode(', ', $errors));\n}\n\n$username = sanitizeInput($input['username']);\n$password = $input['password'];\n\ntry {\n    $db = new Database();\n    $conn = $db->getConnection();\n    \n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = ? AND is_active = 1\");\n    $stmt->execute([$username]);\n    $user = $stmt->fetch();\n    \n    if (!$user || !password_verify($password, $user['password'])) {\n        sendErrorResponse('Invalid credentials', 401);\n    }\n    \n    setUserSession($user);\n    \n    sendJsonResponse([\n        'user' => [\n            'id' => $user['id'],\n            'username' => $user['username'],\n            'role' => $user['role'],\n            'fullName' => $user['full_name'],\n            'email' => $user['email']\n        ]\n    ]);\n    \n} catch (Exception $e) {\n    error_log(\"Login error: \" . $e->getMessage());\n    sendErrorResponse('Login failed', 500);\n}\n?>","size_bytes":1352},"backend/auth/logout.php":{"content":"<?php\nrequire_once '../includes/session.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] !== 'POST') {\n    sendErrorResponse('Method not allowed', 405);\n}\n\ndestroyUserSession();\nsendJsonResponse(['message' => 'Logged out successfully']);\n?>","size_bytes":314},"backend/auth/user.php":{"content":"<?php\nrequire_once '../config/database.php';\nrequire_once '../includes/session.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] !== 'GET') {\n    sendErrorResponse('Method not allowed', 405);\n}\n\nrequireAuth();\n\ntry {\n    $db = new Database();\n    $conn = $db->getConnection();\n    \n    $stmt = $conn->prepare(\"SELECT id, username, role, full_name, email FROM users WHERE id = ?\");\n    $stmt->execute([$_SESSION['user_id']]);\n    $user = $stmt->fetch();\n    \n    if (!$user) {\n        sendErrorResponse('User not found', 404);\n    }\n    \n    sendJsonResponse([\n        'id' => $user['id'],\n        'username' => $user['username'],\n        'role' => $user['role'],\n        'fullName' => $user['full_name'],\n        'email' => $user['email']\n    ]);\n    \n} catch (Exception $e) {\n    sendErrorResponse('Failed to get user', 500);\n}\n?>","size_bytes":904},"backend/config/database.php":{"content":"<?php\n// Database configuration for MySQL\nclass Database {\n    private $host = 'localhost';\n    private $database = 'jsmf_loans';\n    private $username = 'root';\n    private $password = '';\n    private $charset = 'utf8mb4';\n    private $pdo;\n\n    public function __construct() {\n        $dsn = \"mysql:host={$this->host};dbname={$this->database};charset={$this->charset}\";\n        $options = [\n            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n            PDO::ATTR_EMULATE_PREPARES => false,\n        ];\n\n        try {\n            $this->pdo = new PDO($dsn, $this->username, $this->password, $options);\n        } catch (PDOException $e) {\n            throw new PDOException($e->getMessage(), (int)$e->getCode());\n        }\n    }\n\n    public function getConnection() {\n        return $this->pdo;\n    }\n}\n?>","size_bytes":873},"backend/contact-queries/index.php":{"content":"<?php\nrequire_once '../config/database.php';\nrequire_once '../includes/session.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Create contact query\n    $input = getJsonInput();\n    if (!$input) {\n        sendErrorResponse('Invalid JSON input');\n    }\n    \n    $required = ['name', 'mobileNumber', 'message'];\n    $errors = validateRequired($input, $required);\n    \n    if (!validateMobile($input['mobileNumber'] ?? '')) {\n        $errors[] = 'Invalid mobile number format';\n    }\n    \n    if (isset($input['email']) && !empty($input['email']) && !validateEmail($input['email'])) {\n        $errors[] = 'Invalid email format';\n    }\n    \n    if (!empty($errors)) {\n        sendErrorResponse(implode(', ', $errors));\n    }\n    \n    $data = sanitizeInput($input);\n    \n    try {\n        $db = new Database();\n        $conn = $db->getConnection();\n        \n        $id = generateUuid();\n        \n        $stmt = $conn->prepare(\"\n            INSERT INTO contact_queries (\n                id, name, mobile_number, email, loan_type, message, status, created_at\n            ) VALUES (?, ?, ?, ?, ?, ?, 'new', NOW())\n        \");\n        \n        $stmt->execute([\n            $id,\n            $data['name'],\n            $data['mobileNumber'],\n            $data['email'] ?? null,\n            $data['loanType'] ?? null,\n            $data['message']\n        ]);\n        \n        // Get the created query\n        $stmt = $conn->prepare(\"SELECT * FROM contact_queries WHERE id = ?\");\n        $stmt->execute([$id]);\n        $query = $stmt->fetch();\n        \n        sendJsonResponse($query, 201);\n        \n    } catch (Exception $e) {\n        error_log(\"Contact query error: \" . $e->getMessage());\n        sendErrorResponse('Failed to submit query', 500);\n    }\n    \n} elseif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n    // Get contact queries (admin only)\n    requireRole('admin');\n    \n    try {\n        $db = new Database();\n        $conn = $db->getConnection();\n        \n        $stmt = $conn->prepare(\"SELECT * FROM contact_queries ORDER BY created_at DESC\");\n        $stmt->execute();\n        $queries = $stmt->fetchAll();\n        \n        sendJsonResponse($queries);\n        \n    } catch (Exception $e) {\n        sendErrorResponse('Failed to get contact queries', 500);\n    }\n    \n} else {\n    sendErrorResponse('Method not allowed', 405);\n}\n?>","size_bytes":2430},"backend/dsa-partners/index.php":{"content":"<?php\nrequire_once '../config/database.php';\nrequire_once '../includes/session.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Create DSA partner\n    $input = getJsonInput();\n    if (!$input) {\n        sendErrorResponse('Invalid JSON input');\n    }\n    \n    if (!isset($input['userData']) || !isset($input['partnerData'])) {\n        sendErrorResponse('User data and partner data are required');\n    }\n    \n    $userData = $input['userData'];\n    $partnerData = $input['partnerData'];\n    \n    $required = ['username', 'email', 'password', 'fullName', 'mobileNumber'];\n    $errors = validateRequired($userData, $required);\n    \n    if (!validateEmail($userData['email'] ?? '')) {\n        $errors[] = 'Invalid email format';\n    }\n    \n    if (!empty($errors)) {\n        sendErrorResponse(implode(', ', $errors));\n    }\n    \n    try {\n        $db = new Database();\n        $conn = $db->getConnection();\n        $conn->beginTransaction();\n        \n        // Create user first\n        $userId = generateUuid();\n        $hashedPassword = password_hash($userData['password'], PASSWORD_DEFAULT);\n        \n        $userStmt = $conn->prepare(\"\n            INSERT INTO users (id, username, email, password, role, full_name, mobile_number, city, is_active, created_at, updated_at)\n            VALUES (?, ?, ?, ?, 'dsa', ?, ?, ?, 1, NOW(), NOW())\n        \");\n        \n        $userStmt->execute([\n            $userId,\n            $userData['username'],\n            $userData['email'],\n            $hashedPassword,\n            $userData['fullName'],\n            $userData['mobileNumber'],\n            $userData['city'] ?? null\n        ]);\n        \n        // Create DSA partner profile\n        $partnerId = generateUuid();\n        $partnerStmt = $conn->prepare(\"\n            INSERT INTO dsa_partners (\n                id, user_id, experience, background, commission_rate, total_earnings, \n                total_leads, successful_leads, kyc_status, created_at, updated_at\n            ) VALUES (?, ?, ?, ?, 2.0, 0, 0, 0, 'pending', NOW(), NOW())\n        \");\n        \n        $partnerStmt->execute([\n            $partnerId,\n            $userId,\n            $partnerData['experience'] ?? null,\n            $partnerData['background'] ?? null\n        ]);\n        \n        $conn->commit();\n        \n        sendJsonResponse([\n            'user' => [\n                'id' => $userId,\n                'username' => $userData['username'],\n                'role' => 'dsa',\n                'fullName' => $userData['fullName'],\n                'email' => $userData['email']\n            ],\n            'partner' => [\n                'id' => $partnerId,\n                'userId' => $userId,\n                'experience' => $partnerData['experience'] ?? null,\n                'background' => $partnerData['background'] ?? null\n            ]\n        ], 201);\n        \n    } catch (Exception $e) {\n        $conn->rollback();\n        error_log(\"DSA registration error: \" . $e->getMessage());\n        sendErrorResponse('DSA registration failed', 500);\n    }\n    \n} elseif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n    // Get DSA partners (admin only)\n    requireRole('admin');\n    \n    try {\n        $db = new Database();\n        $conn = $db->getConnection();\n        \n        $stmt = $conn->prepare(\"\n            SELECT dp.*, u.username, u.email, u.full_name, u.mobile_number, u.city\n            FROM dsa_partners dp\n            JOIN users u ON dp.user_id = u.id\n            ORDER BY dp.created_at DESC\n        \");\n        $stmt->execute();\n        $partners = $stmt->fetchAll();\n        \n        sendJsonResponse($partners);\n        \n    } catch (Exception $e) {\n        sendErrorResponse('Failed to get DSA partners', 500);\n    }\n    \n} else {\n    sendErrorResponse('Method not allowed', 405);\n}\n?>","size_bytes":3864},"backend/dsa-partners/profile.php":{"content":"<?php\nrequire_once '../config/database.php';\nrequire_once '../includes/session.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] !== 'GET') {\n    sendErrorResponse('Method not allowed', 405);\n}\n\nrequireRole('dsa');\n\ntry {\n    $db = new Database();\n    $conn = $db->getConnection();\n    \n    $stmt = $conn->prepare(\"\n        SELECT dp.*, u.username, u.email, u.full_name, u.mobile_number, u.city\n        FROM dsa_partners dp\n        JOIN users u ON dp.user_id = u.id\n        WHERE dp.user_id = ?\n    \");\n    $stmt->execute([$_SESSION['user_id']]);\n    $partner = $stmt->fetch();\n    \n    if (!$partner) {\n        sendErrorResponse('DSA profile not found', 404);\n    }\n    \n    sendJsonResponse($partner);\n    \n} catch (Exception $e) {\n    sendErrorResponse('Failed to get DSA profile', 500);\n}\n?>","size_bytes":868},"backend/includes/functions.php":{"content":"<?php\n// Common utility functions\nfunction generateUuid() {\n    return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',\n        mt_rand(0, 0xffff), mt_rand(0, 0xffff),\n        mt_rand(0, 0xffff),\n        mt_rand(0, 0x0fff) | 0x4000,\n        mt_rand(0, 0x3fff) | 0x8000,\n        mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)\n    );\n}\n\nfunction validateRequired($data, $fields) {\n    $errors = [];\n    foreach ($fields as $field) {\n        if (!isset($data[$field]) || empty(trim($data[$field]))) {\n            $errors[] = ucfirst(str_replace('_', ' ', $field)) . ' is required';\n        }\n    }\n    return $errors;\n}\n\nfunction validateEmail($email) {\n    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n}\n\nfunction validateMobile($mobile) {\n    return preg_match('/^[+]?[0-9\\s\\-\\(\\)]{10,15}$/', $mobile);\n}\n\nfunction sanitizeInput($data) {\n    if (is_array($data)) {\n        return array_map('sanitizeInput', $data);\n    }\n    return htmlspecialchars(strip_tags(trim($data)), ENT_QUOTES, 'UTF-8');\n}\n\nfunction sendJsonResponse($data, $statusCode = 200) {\n    http_response_code($statusCode);\n    header('Content-Type: application/json');\n    echo json_encode($data);\n    exit;\n}\n\nfunction sendErrorResponse($message, $statusCode = 400) {\n    sendJsonResponse(['message' => $message], $statusCode);\n}\n\nfunction getJsonInput() {\n    $input = file_get_contents('php://input');\n    return json_decode($input, true);\n}\n?>","size_bytes":1439},"backend/includes/session.php":{"content":"<?php\n// Session management\nif (session_status() == PHP_SESSION_NONE) {\n    session_start();\n}\n\nfunction requireAuth() {\n    if (!isset($_SESSION['user_id'])) {\n        http_response_code(401);\n        echo json_encode(['message' => 'Unauthorized']);\n        exit;\n    }\n}\n\nfunction requireRole($role) {\n    requireAuth();\n    if ($_SESSION['user_role'] !== $role) {\n        http_response_code(403);\n        echo json_encode(['message' => 'Forbidden']);\n        exit;\n    }\n}\n\nfunction getCurrentUser() {\n    if (!isset($_SESSION['user_id'])) {\n        return null;\n    }\n    \n    return [\n        'id' => $_SESSION['user_id'],\n        'role' => $_SESSION['user_role'],\n        'username' => $_SESSION['username'] ?? '',\n        'fullName' => $_SESSION['full_name'] ?? '',\n        'email' => $_SESSION['email'] ?? ''\n    ];\n}\n\nfunction setUserSession($user) {\n    $_SESSION['user_id'] = $user['id'];\n    $_SESSION['user_role'] = $user['role'];\n    $_SESSION['username'] = $user['username'];\n    $_SESSION['full_name'] = $user['full_name'];\n    $_SESSION['email'] = $user['email'];\n}\n\nfunction destroyUserSession() {\n    session_unset();\n    session_destroy();\n}\n?>","size_bytes":1164},"backend/leads/assign.php":{"content":"<?php\nrequire_once '../config/database.php';\nrequire_once '../includes/session.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] !== 'PATCH') {\n    sendErrorResponse('Method not allowed', 405);\n}\n\nrequireRole('admin');\n\n$id = $_GET['id'] ?? '';\nif (empty($id)) {\n    sendErrorResponse('Lead ID is required');\n}\n\n$input = getJsonInput();\nif (!$input || !isset($input['dsaId'])) {\n    sendErrorResponse('DSA ID is required');\n}\n\n$dsaId = $input['dsaId'];\n\ntry {\n    $db = new Database();\n    $conn = $db->getConnection();\n    \n    // Check if lead exists\n    $stmt = $conn->prepare(\"SELECT * FROM leads WHERE id = ?\");\n    $stmt->execute([$id]);\n    $lead = $stmt->fetch();\n    \n    if (!$lead) {\n        sendErrorResponse('Lead not found', 404);\n    }\n    \n    // Check if DSA exists\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE id = ? AND role = 'dsa'\");\n    $stmt->execute([$dsaId]);\n    $dsa = $stmt->fetch();\n    \n    if (!$dsa) {\n        sendErrorResponse('DSA not found', 404);\n    }\n    \n    // Assign lead to DSA\n    $stmt = $conn->prepare(\"\n        UPDATE leads \n        SET assigned_dsa_id = ?, assigned_at = NOW(), updated_at = NOW() \n        WHERE id = ?\n    \");\n    $stmt->execute([$dsaId, $id]);\n    \n    // Get updated lead\n    $stmt = $conn->prepare(\"SELECT * FROM leads WHERE id = ?\");\n    $stmt->execute([$id]);\n    $updatedLead = $stmt->fetch();\n    \n    sendJsonResponse($updatedLead);\n    \n} catch (Exception $e) {\n    error_log(\"Lead assignment error: \" . $e->getMessage());\n    sendErrorResponse('Failed to assign lead', 500);\n}\n?>","size_bytes":1635},"backend/leads/index.php":{"content":"<?php\nrequire_once '../config/database.php';\nrequire_once '../includes/session.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Create lead\n    $input = getJsonInput();\n    if (!$input) {\n        sendErrorResponse('Invalid JSON input');\n    }\n    \n    $required = ['name', 'mobileNumber', 'loanType'];\n    $errors = validateRequired($input, $required);\n    \n    if (!validateMobile($input['mobileNumber'] ?? '')) {\n        $errors[] = 'Invalid mobile number format';\n    }\n    \n    if (!empty($errors)) {\n        sendErrorResponse(implode(', ', $errors));\n    }\n    \n    $data = sanitizeInput($input);\n    \n    try {\n        $db = new Database();\n        $conn = $db->getConnection();\n        \n        $id = generateUuid();\n        \n        $stmt = $conn->prepare(\"\n            INSERT INTO leads (\n                id, name, mobile_number, email, loan_type, amount, city, source, status, created_at, updated_at\n            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, 'new', NOW(), NOW())\n        \");\n        \n        $stmt->execute([\n            $id,\n            $data['name'],\n            $data['mobileNumber'],\n            $data['email'] ?? null,\n            $data['loanType'],\n            $data['amount'] ?? null,\n            $data['city'] ?? null,\n            $data['source'] ?? 'website'\n        ]);\n        \n        // Get the created lead\n        $stmt = $conn->prepare(\"SELECT * FROM leads WHERE id = ?\");\n        $stmt->execute([$id]);\n        $lead = $stmt->fetch();\n        \n        sendJsonResponse($lead, 201);\n        \n    } catch (Exception $e) {\n        error_log(\"Lead creation error: \" . $e->getMessage());\n        sendErrorResponse('Failed to create lead', 500);\n    }\n    \n} elseif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n    // Get leads\n    requireAuth();\n    \n    try {\n        $db = new Database();\n        $conn = $db->getConnection();\n        \n        $sql = \"SELECT * FROM leads\";\n        $params = [];\n        \n        if ($_SESSION['user_role'] === 'admin') {\n            // Admin sees all leads\n            $sql .= \" ORDER BY created_at DESC\";\n        } elseif ($_SESSION['user_role'] === 'dsa') {\n            // DSA sees assigned leads\n            $sql .= \" WHERE assigned_dsa_id = ? ORDER BY created_at DESC\";\n            $params[] = $_SESSION['user_id'];\n        } else {\n            sendErrorResponse('Forbidden', 403);\n        }\n        \n        $stmt = $conn->prepare($sql);\n        $stmt->execute($params);\n        $leads = $stmt->fetchAll();\n        \n        sendJsonResponse($leads);\n        \n    } catch (Exception $e) {\n        sendErrorResponse('Failed to get leads', 500);\n    }\n    \n} else {\n    sendErrorResponse('Method not allowed', 405);\n}\n?>","size_bytes":2775},"backend/leads/update.php":{"content":"<?php\nrequire_once '../config/database.php';\nrequire_once '../includes/session.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] !== 'PATCH') {\n    sendErrorResponse('Method not allowed', 405);\n}\n\nrequireAuth();\n\n$id = $_GET['id'] ?? '';\nif (empty($id)) {\n    sendErrorResponse('Lead ID is required');\n}\n\n$input = getJsonInput();\nif (!$input) {\n    sendErrorResponse('Invalid JSON input');\n}\n\ntry {\n    $db = new Database();\n    $conn = $db->getConnection();\n    \n    // Check if lead exists and user has permission\n    $sql = \"SELECT * FROM leads WHERE id = ?\";\n    $params = [$id];\n    \n    if ($_SESSION['user_role'] === 'dsa') {\n        $sql .= \" AND assigned_dsa_id = ?\";\n        $params[] = $_SESSION['user_id'];\n    }\n    \n    $stmt = $conn->prepare($sql);\n    $stmt->execute($params);\n    $lead = $stmt->fetch();\n    \n    if (!$lead) {\n        sendErrorResponse('Lead not found or access denied', 404);\n    }\n    \n    // Build update query dynamically\n    $updateFields = [];\n    $updateParams = [];\n    \n    $allowedFields = ['status', 'remarks'];\n    if ($_SESSION['user_role'] === 'admin') {\n        $allowedFields[] = 'assigned_dsa_id';\n    }\n    \n    foreach ($allowedFields as $field) {\n        if (isset($input[$field])) {\n            $updateFields[] = $field . \" = ?\";\n            $updateParams[] = $input[$field];\n        }\n    }\n    \n    if (empty($updateFields)) {\n        sendErrorResponse('No valid fields to update');\n    }\n    \n    // Add converted_at if status is being set to converted\n    if (isset($input['status']) && $input['status'] === 'converted') {\n        $updateFields[] = \"converted_at = NOW()\";\n    }\n    \n    $updateFields[] = \"updated_at = NOW()\";\n    $updateParams[] = $id;\n    \n    $sql = \"UPDATE leads SET \" . implode(', ', $updateFields) . \" WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute($updateParams);\n    \n    // Get updated lead\n    $stmt = $conn->prepare(\"SELECT * FROM leads WHERE id = ?\");\n    $stmt->execute([$id]);\n    $updatedLead = $stmt->fetch();\n    \n    sendJsonResponse($updatedLead);\n    \n} catch (Exception $e) {\n    error_log(\"Lead update error: \" . $e->getMessage());\n    sendErrorResponse('Failed to update lead', 500);\n}\n?>","size_bytes":2282},"backend/loan-applications/index.php":{"content":"<?php\nrequire_once '../config/database.php';\nrequire_once '../includes/session.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Create loan application\n    requireAuth();\n    \n    $input = getJsonInput();\n    if (!$input) {\n        sendErrorResponse('Invalid JSON input');\n    }\n    \n    $required = ['loanType'];\n    $errors = validateRequired($input, $required);\n    \n    if (!empty($errors)) {\n        sendErrorResponse(implode(', ', $errors));\n    }\n    \n    $data = sanitizeInput($input);\n    \n    try {\n        $db = new Database();\n        $conn = $db->getConnection();\n        \n        $id = generateUuid();\n        \n        $stmt = $conn->prepare(\"\n            INSERT INTO loan_applications (\n                id, user_id, loan_type, amount, tenure, monthly_income, \n                employment_type, purpose, interest_rate, status, created_at, updated_at\n            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, 7.5, 'pending', NOW(), NOW())\n        \");\n        \n        $stmt->execute([\n            $id,\n            $_SESSION['user_id'],\n            $data['loanType'],\n            $data['amount'] ?? null,\n            $data['tenure'] ?? null,\n            $data['monthlyIncome'] ?? null,\n            $data['employmentType'] ?? null,\n            $data['purpose'] ?? null\n        ]);\n        \n        // Create a lead for this application\n        $userStmt = $conn->prepare(\"SELECT * FROM users WHERE id = ?\");\n        $userStmt->execute([$_SESSION['user_id']]);\n        $user = $userStmt->fetch();\n        \n        if ($user) {\n            $leadId = generateUuid();\n            $leadStmt = $conn->prepare(\"\n                INSERT INTO leads (\n                    id, name, mobile_number, email, loan_type, amount, city, source, status, created_at, updated_at\n                ) VALUES (?, ?, ?, ?, ?, ?, ?, 'application', 'new', NOW(), NOW())\n            \");\n            \n            $leadStmt->execute([\n                $leadId,\n                $user['full_name'],\n                $user['mobile_number'],\n                $user['email'],\n                $data['loanType'],\n                $data['amount'] ?? 0,\n                $user['city'] ?? 'Bhopal'\n            ]);\n        }\n        \n        // Get the created application\n        $stmt = $conn->prepare(\"SELECT * FROM loan_applications WHERE id = ?\");\n        $stmt->execute([$id]);\n        $application = $stmt->fetch();\n        \n        sendJsonResponse($application, 201);\n        \n    } catch (Exception $e) {\n        error_log(\"Application creation error: \" . $e->getMessage());\n        sendErrorResponse('Failed to create application', 500);\n    }\n    \n} elseif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n    // Get loan applications\n    requireAuth();\n    \n    try {\n        $db = new Database();\n        $conn = $db->getConnection();\n        \n        $sql = \"SELECT * FROM loan_applications\";\n        $params = [];\n        \n        if ($_SESSION['user_role'] === 'admin') {\n            // Admin sees all applications\n            $sql .= \" ORDER BY created_at DESC\";\n        } elseif ($_SESSION['user_role'] === 'dsa') {\n            // DSA sees assigned applications\n            $sql .= \" WHERE assigned_dsa_id = ? ORDER BY created_at DESC\";\n            $params[] = $_SESSION['user_id'];\n        } else {\n            // User sees only their applications\n            $sql .= \" WHERE user_id = ? ORDER BY created_at DESC\";\n            $params[] = $_SESSION['user_id'];\n        }\n        \n        $stmt = $conn->prepare($sql);\n        $stmt->execute($params);\n        $applications = $stmt->fetchAll();\n        \n        sendJsonResponse($applications);\n        \n    } catch (Exception $e) {\n        sendErrorResponse('Failed to get applications', 500);\n    }\n    \n} else {\n    sendErrorResponse('Method not allowed', 405);\n}\n?>","size_bytes":3874},"backend/loan-applications/update.php":{"content":"<?php\nrequire_once '../config/database.php';\nrequire_once '../includes/session.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] !== 'PATCH') {\n    sendErrorResponse('Method not allowed', 405);\n}\n\nrequireRole('admin');\n\n$id = $_GET['id'] ?? '';\nif (empty($id)) {\n    sendErrorResponse('Application ID is required');\n}\n\n$input = getJsonInput();\nif (!$input) {\n    sendErrorResponse('Invalid JSON input');\n}\n\ntry {\n    $db = new Database();\n    $conn = $db->getConnection();\n    \n    // Check if application exists\n    $stmt = $conn->prepare(\"SELECT * FROM loan_applications WHERE id = ?\");\n    $stmt->execute([$id]);\n    $application = $stmt->fetch();\n    \n    if (!$application) {\n        sendErrorResponse('Application not found', 404);\n    }\n    \n    // Build update query dynamically\n    $updateFields = [];\n    $params = [];\n    \n    $allowedFields = ['status', 'assigned_dsa_id', 'remarks', 'interest_rate'];\n    \n    foreach ($allowedFields as $field) {\n        if (isset($input[$field])) {\n            $updateFields[] = $field . \" = ?\";\n            $params[] = $input[$field];\n        }\n    }\n    \n    if (empty($updateFields)) {\n        sendErrorResponse('No valid fields to update');\n    }\n    \n    $updateFields[] = \"updated_at = NOW()\";\n    $params[] = $id;\n    \n    $sql = \"UPDATE loan_applications SET \" . implode(', ', $updateFields) . \" WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute($params);\n    \n    // Get updated application\n    $stmt = $conn->prepare(\"SELECT * FROM loan_applications WHERE id = ?\");\n    $stmt->execute([$id]);\n    $updatedApplication = $stmt->fetch();\n    \n    sendJsonResponse($updatedApplication);\n    \n} catch (Exception $e) {\n    error_log(\"Application update error: \" . $e->getMessage());\n    sendErrorResponse('Failed to update application', 500);\n}\n?>","size_bytes":1890},"backend/users/register.php":{"content":"<?php\nrequire_once '../config/database.php';\nrequire_once '../includes/functions.php';\n\nheader('Content-Type: application/json');\n\nif ($_SERVER['REQUEST_METHOD'] !== 'POST') {\n    sendErrorResponse('Method not allowed', 405);\n}\n\n$input = getJsonInput();\nif (!$input) {\n    sendErrorResponse('Invalid JSON input');\n}\n\n$required = ['username', 'email', 'password', 'fullName', 'mobileNumber'];\n$errors = validateRequired($input, $required);\n\nif (!validateEmail($input['email'] ?? '')) {\n    $errors[] = 'Invalid email format';\n}\n\nif (!validateMobile($input['mobileNumber'] ?? '')) {\n    $errors[] = 'Invalid mobile number format';\n}\n\nif (!empty($errors)) {\n    sendErrorResponse(implode(', ', $errors));\n}\n\n$userData = sanitizeInput($input);\n$role = $userData['role'] ?? 'user';\n\ntry {\n    $db = new Database();\n    $conn = $db->getConnection();\n    \n    // Check if username exists\n    $stmt = $conn->prepare(\"SELECT id FROM users WHERE username = ?\");\n    $stmt->execute([$userData['username']]);\n    if ($stmt->fetch()) {\n        sendErrorResponse('Username already exists');\n    }\n    \n    // Check if email exists\n    $stmt = $conn->prepare(\"SELECT id FROM users WHERE email = ?\");\n    $stmt->execute([$userData['email']]);\n    if ($stmt->fetch()) {\n        sendErrorResponse('Email already registered');\n    }\n    \n    // Create user\n    $id = generateUuid();\n    $hashedPassword = password_hash($userData['password'], PASSWORD_DEFAULT);\n    \n    $stmt = $conn->prepare(\"\n        INSERT INTO users (id, username, email, password, role, full_name, mobile_number, city, is_active, created_at, updated_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1, NOW(), NOW())\n    \");\n    \n    $stmt->execute([\n        $id,\n        $userData['username'],\n        $userData['email'],\n        $hashedPassword,\n        $role,\n        $userData['fullName'],\n        $userData['mobileNumber'],\n        $userData['city'] ?? null\n    ]);\n    \n    sendJsonResponse([\n        'user' => [\n            'id' => $id,\n            'username' => $userData['username'],\n            'role' => $role,\n            'fullName' => $userData['fullName'],\n            'email' => $userData['email']\n        ]\n    ], 201);\n    \n} catch (Exception $e) {\n    error_log(\"Registration error: \" . $e->getMessage());\n    sendErrorResponse('Registration failed', 500);\n}\n?>","size_bytes":2326},"public_html/assets/css/style.css":{"content":"/* Custom CSS for JSMF Loan Management System */\n\n:root {\n    --primary-blue: #2563eb;\n    --secondary-blue: #1e40af;\n    --accent-red: #dc2626;\n    --accent-yellow: #eab308;\n    --success-green: #16a34a;\n    --text-dark: #1f2937;\n    --text-muted: #6b7280;\n    --bg-light: #f9fafb;\n}\n\n/* Smooth scrolling */\nhtml {\n    scroll-behavior: smooth;\n}\n\n/* Custom animations */\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.fade-in-up {\n    animation: fadeInUp 0.6s ease-out;\n}\n\n/* Custom hover effects */\n.hover-scale:hover {\n    transform: scale(1.05);\n    transition: transform 0.3s ease;\n}\n\n/* Service cards */\n.service-card {\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.service-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n/* Custom button styles */\n.btn-primary {\n    background-color: var(--primary-blue);\n    color: white;\n    padding: 12px 24px;\n    border-radius: 8px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    border: none;\n    cursor: pointer;\n}\n\n.btn-primary:hover {\n    background-color: var(--secondary-blue);\n    transform: translateY(-2px);\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);\n}\n\n.btn-secondary {\n    background-color: white;\n    color: var(--primary-blue);\n    border: 2px solid var(--primary-blue);\n    padding: 12px 24px;\n    border-radius: 8px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.btn-secondary:hover {\n    background-color: var(--primary-blue);\n    color: white;\n    transform: translateY(-2px);\n}\n\n/* Form styles */\n.form-input {\n    width: 100%;\n    padding: 12px 16px;\n    border: 2px solid #e5e7eb;\n    border-radius: 8px;\n    font-size: 16px;\n    transition: border-color 0.3s ease;\n}\n\n.form-input:focus {\n    outline: none;\n    border-color: var(--primary-blue);\n    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);\n}\n\n/* Mobile responsive adjustments */\n@media (max-width: 768px) {\n    .hero-title {\n        font-size: 2.5rem;\n    }\n    \n    .section-padding {\n        padding: 60px 0;\n    }\n    \n    .card-padding {\n        padding: 24px;\n    }\n}\n\n/* Loading spinner */\n.spinner {\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n}\n\n/* Toast notifications */\n.toast {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);\n    padding: 16px 24px;\n    z-index: 1000;\n    transform: translateX(100%);\n    transition: transform 0.3s ease;\n}\n\n.toast.show {\n    transform: translateX(0);\n}\n\n.toast.success {\n    border-left: 4px solid var(--success-green);\n}\n\n.toast.error {\n    border-left: 4px solid var(--accent-red);\n}\n\n/* Navigation active state */\n.nav-link.active {\n    color: var(--primary-blue);\n    font-weight: 600;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--primary-blue);\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: var(--secondary-blue);\n}\n\n/* Print styles */\n@media print {\n    .no-print {\n        display: none;\n    }\n}\n\n/* Accessibility improvements */\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n}\n\n/* Focus styles for keyboard navigation */\n.focus-outline:focus {\n    outline: 2px solid var(--primary-blue);\n    outline-offset: 2px;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n    .btn-primary {\n        border: 2px solid currentColor;\n    }\n    \n    .form-input {\n        border-width: 2px;\n    }\n}","size_bytes":3961},"public_html/assets/js/auth.js":{"content":"// Authentication functions for JSMF Loan Management System\n\nconst API_BASE_URL = '../backend/api';\n\n// Login function\nasync function login(userType, redirectPath) {\n    const usernameField = userType === 'user' ? 'login-username' : 'username';\n    const passwordField = userType === 'user' ? 'login-password' : 'password';\n    \n    const username = document.getElementById(usernameField).value;\n    const password = document.getElementById(passwordField).value;\n    \n    if (!username || !password) {\n        showError('Please enter both username and password.');\n        return;\n    }\n    \n    try {\n        showLoading();\n        \n        const response = await fetch(`${API_BASE_URL}/auth/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password })\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            // Check if user role matches expected type\n            if (data.user.role !== userType) {\n                showError(`Invalid credentials for ${userType} login.`);\n                return;\n            }\n            \n            // Store user data in localStorage\n            localStorage.setItem('user', JSON.stringify(data.user));\n            localStorage.setItem('isLoggedIn', 'true');\n            \n            showSuccess('Login successful! Redirecting...');\n            \n            // Redirect after a short delay\n            setTimeout(() => {\n                window.location.href = redirectPath;\n            }, 1500);\n        } else {\n            showError(data.message || 'Login failed. Please check your credentials.');\n        }\n    } catch (error) {\n        console.error('Login error:', error);\n        showError('Login failed. Please try again.');\n    } finally {\n        hideLoading();\n    }\n}\n\n// Register function\nasync function register() {\n    const formData = {\n        username: document.getElementById('register-username').value,\n        email: document.getElementById('register-email').value,\n        password: document.getElementById('register-password').value,\n        fullName: document.getElementById('register-fullname').value,\n        mobileNumber: document.getElementById('register-mobile').value,\n        city: document.getElementById('register-city').value || 'Bhopal'\n    };\n    \n    // Validation\n    if (!formData.username || !formData.email || !formData.password || !formData.fullName || !formData.mobileNumber) {\n        showError('Please fill all required fields.');\n        return;\n    }\n    \n    if (!validateEmail(formData.email)) {\n        showError('Please enter a valid email address.');\n        return;\n    }\n    \n    if (!validateMobile(formData.mobileNumber)) {\n        showError('Please enter a valid mobile number.');\n        return;\n    }\n    \n    if (formData.password.length < 6) {\n        showError('Password must be at least 6 characters long.');\n        return;\n    }\n    \n    try {\n        showLoading();\n        \n        const response = await fetch(`${API_BASE_URL}/users/register`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData)\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            showSuccess('Registration successful! You can now login with your credentials.');\n            \n            // Clear form and switch to login tab\n            document.getElementById('user-register-form').reset();\n            showTab('login');\n        } else {\n            showError(data.message || 'Registration failed. Please try again.');\n        }\n    } catch (error) {\n        console.error('Registration error:', error);\n        showError('Registration failed. Please try again.');\n    } finally {\n        hideLoading();\n    }\n}\n\n// Logout function\nasync function logout() {\n    try {\n        const response = await fetch(`${API_BASE_URL}/auth/logout`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n        \n        // Clear local storage regardless of response\n        localStorage.removeItem('user');\n        localStorage.removeItem('isLoggedIn');\n        \n        // Redirect to login page\n        const userRole = getCurrentUser()?.role || 'user';\n        window.location.href = `../${userRole}/login.html`;\n    } catch (error) {\n        console.error('Logout error:', error);\n        \n        // Still clear local storage and redirect\n        localStorage.removeItem('user');\n        localStorage.removeItem('isLoggedIn');\n        window.location.href = '../index.html';\n    }\n}\n\n// Check if user is logged in\nfunction isLoggedIn() {\n    return localStorage.getItem('isLoggedIn') === 'true' && localStorage.getItem('user');\n}\n\n// Get current user data\nfunction getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n}\n\n// Check authentication on protected pages\nfunction requireAuth(expectedRole = null) {\n    if (!isLoggedIn()) {\n        window.location.href = '../user/login.html';\n        return false;\n    }\n    \n    const user = getCurrentUser();\n    if (expectedRole && user.role !== expectedRole) {\n        showError('Access denied. Insufficient permissions.');\n        setTimeout(() => {\n            window.location.href = `../${user.role}/dashboard.html`;\n        }, 2000);\n        return false;\n    }\n    \n    return true;\n}\n\n// Toggle password visibility\nfunction togglePassword(fieldId) {\n    const field = document.getElementById(fieldId);\n    const eye = document.getElementById(fieldId + '-eye');\n    \n    if (field.type === 'password') {\n        field.type = 'text';\n        eye.className = 'fas fa-eye-slash';\n    } else {\n        field.type = 'password';\n        eye.className = 'fas fa-eye';\n    }\n}\n\n// Utility functions\nfunction validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nfunction validateMobile(mobile) {\n    const mobileRegex = /^[+]?[0-9\\s\\-\\(\\)]{10,15}$/;\n    return mobileRegex.test(mobile);\n}\n\n// Modal functions\nfunction showLoading() {\n    const modal = document.getElementById('loading-modal');\n    if (modal) {\n        modal.classList.remove('hidden');\n    } else {\n        // Create loading modal if it doesn't exist\n        createLoadingModal();\n    }\n}\n\nfunction hideLoading() {\n    const modal = document.getElementById('loading-modal');\n    if (modal) {\n        modal.classList.add('hidden');\n    }\n}\n\nfunction showSuccess(message) {\n    const modal = document.getElementById('success-modal');\n    if (modal) {\n        document.getElementById('success-message').textContent = message;\n        modal.classList.remove('hidden');\n    } else {\n        // Create success modal if it doesn't exist\n        createSuccessModal(message);\n    }\n}\n\nfunction showError(message) {\n    const modal = document.getElementById('error-modal');\n    if (modal) {\n        document.getElementById('error-message').textContent = message;\n        modal.classList.remove('hidden');\n    } else {\n        // Create error modal if it doesn't exist\n        createErrorModal(message);\n    }\n}\n\nfunction closeModal(modalId) {\n    document.getElementById(modalId).classList.add('hidden');\n}\n\n// Create modals dynamically\nfunction createLoadingModal() {\n    const modal = document.createElement('div');\n    modal.id = 'loading-modal';\n    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\n    modal.innerHTML = `\n        <div class=\"bg-white rounded-lg p-6 max-w-sm w-full mx-4\">\n            <div class=\"text-center\">\n                <div class=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n                <p class=\"mt-4 text-gray-600\">Processing your request...</p>\n            </div>\n        </div>\n    `;\n    document.body.appendChild(modal);\n}\n\nfunction createSuccessModal(message) {\n    const modal = document.createElement('div');\n    modal.id = 'success-modal';\n    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\n    modal.innerHTML = `\n        <div class=\"bg-white rounded-lg p-6 max-w-sm w-full mx-4\">\n            <div class=\"text-center\">\n                <i class=\"fas fa-check-circle text-green-500 text-4xl mb-4\"></i>\n                <h3 class=\"text-lg font-semibold text-gray-800 mb-2\">Success!</h3>\n                <p class=\"text-gray-600 mb-4\" id=\"success-message\">${message}</p>\n                <button onclick=\"closeModal('success-modal')\" class=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded transition-colors\">\n                    OK\n                </button>\n            </div>\n        </div>\n    `;\n    document.body.appendChild(modal);\n}\n\nfunction createErrorModal(message) {\n    const modal = document.createElement('div');\n    modal.id = 'error-modal';\n    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\n    modal.innerHTML = `\n        <div class=\"bg-white rounded-lg p-6 max-w-sm w-full mx-4\">\n            <div class=\"text-center\">\n                <i class=\"fas fa-exclamation-circle text-red-500 text-4xl mb-4\"></i>\n                <h3 class=\"text-lg font-semibold text-gray-800 mb-2\">Error</h3>\n                <p class=\"text-gray-600 mb-4\" id=\"error-message\">${message}</p>\n                <button onclick=\"closeModal('error-modal')\" class=\"bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded transition-colors\">\n                    OK\n                </button>\n            </div>\n        </div>\n    `;\n    document.body.appendChild(modal);\n}\n\n// Initialize authentication check on page load\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Check if we're on a protected page\n    const currentPath = window.location.pathname;\n    \n    if (currentPath.includes('/dashboard.html')) {\n        // Determine expected role based on path\n        let expectedRole = null;\n        if (currentPath.includes('/admin/')) expectedRole = 'admin';\n        else if (currentPath.includes('/dsa/')) expectedRole = 'dsa';\n        else if (currentPath.includes('/user/')) expectedRole = 'user';\n        \n        requireAuth(expectedRole);\n    }\n});","size_bytes":10409},"public_html/assets/js/dashboard.js":{"content":"// Dashboard functionality for JSMF Loan Management System\n\nconst API_BASE_URL = '../backend/api';\n\n// Initialize admin dashboard\nasync function initializeAdminDashboard() {\n    const user = getCurrentUser();\n    if (user) {\n        document.getElementById('admin-name').textContent = `Welcome, ${user.fullName}`;\n    }\n    \n    // Load statistics\n    await loadDashboardStats();\n}\n\n// Load dashboard statistics\nasync function loadDashboardStats() {\n    try {\n        // This would normally make API calls to get statistics\n        // For now, showing placeholder data\n        document.getElementById('total-applications').textContent = '0';\n        document.getElementById('total-dsa').textContent = '0';\n        document.getElementById('total-leads').textContent = '0';\n        document.getElementById('total-queries').textContent = '0';\n        \n        // You can implement actual API calls here:\n        // const stats = await makeAPIRequest('GET', '/admin/dashboard-stats');\n        \n    } catch (error) {\n        console.error('Error loading dashboard stats:', error);\n    }\n}\n\n// Load loan applications\nasync function loadApplications() {\n    try {\n        showDataContainer('Loan Applications');\n        \n        const response = await makeAPIRequest('GET', '/loan-applications');\n        \n        if (response.ok) {\n            const applications = await response.json();\n            displayApplicationsTable(applications);\n        } else {\n            throw new Error('Failed to load applications');\n        }\n    } catch (error) {\n        console.error('Error loading applications:', error);\n        showDataError('Failed to load applications. Please try again.');\n    }\n}\n\n// Load DSA partners\nasync function loadDSAPartners() {\n    try {\n        showDataContainer('DSA Partners');\n        \n        const response = await makeAPIRequest('GET', '/dsa-partners');\n        \n        if (response.ok) {\n            const partners = await response.json();\n            displayDSAPartnersTable(partners);\n        } else {\n            throw new Error('Failed to load DSA partners');\n        }\n    } catch (error) {\n        console.error('Error loading DSA partners:', error);\n        showDataError('Failed to load DSA partners. Please try again.');\n    }\n}\n\n// Load leads\nasync function loadLeads() {\n    try {\n        showDataContainer('Lead Management');\n        \n        const response = await makeAPIRequest('GET', '/leads');\n        \n        if (response.ok) {\n            const leads = await response.json();\n            displayLeadsTable(leads);\n        } else {\n            throw new Error('Failed to load leads');\n        }\n    } catch (error) {\n        console.error('Error loading leads:', error);\n        showDataError('Failed to load leads. Please try again.');\n    }\n}\n\n// Display applications table\nfunction displayApplicationsTable(applications) {\n    const content = document.getElementById('data-content');\n    \n    if (applications.length === 0) {\n        content.innerHTML = '<p class=\"text-gray-500 text-center py-8\">No loan applications found.</p>';\n        return;\n    }\n    \n    let html = `\n        <table class=\"min-w-full divide-y divide-gray-200\">\n            <thead class=\"bg-gray-50\">\n                <tr>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Applicant</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Loan Type</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Amount</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Date</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n                </tr>\n            </thead>\n            <tbody class=\"bg-white divide-y divide-gray-200\">\n    `;\n    \n    applications.forEach(app => {\n        const statusClass = getStatusClass(app.status);\n        const date = new Date(app.created_at).toLocaleDateString();\n        \n        html += `\n            <tr>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">${app.user_id}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">${app.loan_type}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">₹${formatNumber(app.amount || 0)}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <span class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}\">\n                        ${app.status}\n                    </span>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">${date}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <button onclick=\"updateApplicationStatus('${app.id}', 'approved')\" \n                            class=\"text-green-600 hover:text-green-900 mr-2\">Approve</button>\n                    <button onclick=\"updateApplicationStatus('${app.id}', 'rejected')\" \n                            class=\"text-red-600 hover:text-red-900\">Reject</button>\n                </td>\n            </tr>\n        `;\n    });\n    \n    html += '</tbody></table>';\n    content.innerHTML = html;\n}\n\n// Display DSA partners table\nfunction displayDSAPartnersTable(partners) {\n    const content = document.getElementById('data-content');\n    \n    if (partners.length === 0) {\n        content.innerHTML = '<p class=\"text-gray-500 text-center py-8\">No DSA partners found.</p>';\n        return;\n    }\n    \n    let html = `\n        <table class=\"min-w-full divide-y divide-gray-200\">\n            <thead class=\"bg-gray-50\">\n                <tr>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Mobile</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">KYC Status</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Total Leads</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n                </tr>\n            </thead>\n            <tbody class=\"bg-white divide-y divide-gray-200\">\n    `;\n    \n    partners.forEach(partner => {\n        const kycClass = partner.kyc_status === 'verified' ? 'bg-green-100 text-green-800' : \n                        partner.kyc_status === 'rejected' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800';\n        \n        html += `\n            <tr>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">${partner.full_name || 'N/A'}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">${partner.email || 'N/A'}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">${partner.mobile_number || 'N/A'}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <span class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${kycClass}\">\n                        ${partner.kyc_status}\n                    </span>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">${partner.total_leads || 0}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <button onclick=\"updateKYCStatus('${partner.id}', 'verified')\" \n                            class=\"text-green-600 hover:text-green-900 mr-2\">Verify</button>\n                    <button onclick=\"updateKYCStatus('${partner.id}', 'rejected')\" \n                            class=\"text-red-600 hover:text-red-900\">Reject</button>\n                </td>\n            </tr>\n        `;\n    });\n    \n    html += '</tbody></table>';\n    content.innerHTML = html;\n}\n\n// Display leads table\nfunction displayLeadsTable(leads) {\n    const content = document.getElementById('data-content');\n    \n    if (leads.length === 0) {\n        content.innerHTML = '<p class=\"text-gray-500 text-center py-8\">No leads found.</p>';\n        return;\n    }\n    \n    let html = `\n        <table class=\"min-w-full divide-y divide-gray-200\">\n            <thead class=\"bg-gray-50\">\n                <tr>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Mobile</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Loan Type</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Assigned DSA</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n                </tr>\n            </thead>\n            <tbody class=\"bg-white divide-y divide-gray-200\">\n    `;\n    \n    leads.forEach(lead => {\n        const statusClass = getStatusClass(lead.status);\n        \n        html += `\n            <tr>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">${lead.name}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">${lead.mobile_number}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">${lead.loan_type}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <span class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}\">\n                        ${lead.status}\n                    </span>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    ${lead.assigned_dsa_id ? 'Assigned' : 'Unassigned'}\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <button onclick=\"showAssignLeadModal('${lead.id}')\" \n                            class=\"text-blue-600 hover:text-blue-900\">Assign DSA</button>\n                </td>\n            </tr>\n        `;\n    });\n    \n    html += '</tbody></table>';\n    content.innerHTML = html;\n}\n\n// Update application status\nasync function updateApplicationStatus(applicationId, status) {\n    try {\n        const response = await makeAPIRequest('PATCH', `/loan-applications/${applicationId}`, { status });\n        \n        if (response.ok) {\n            showSuccess(`Application ${status} successfully!`);\n            loadApplications(); // Refresh the list\n        } else {\n            throw new Error(`Failed to ${status} application`);\n        }\n    } catch (error) {\n        console.error('Error updating application status:', error);\n        showError(`Failed to ${status} application. Please try again.`);\n    }\n}\n\n// Update KYC status\nasync function updateKYCStatus(partnerId, status) {\n    try {\n        // This would be a call to update DSA partner KYC status\n        // For now, just show success message\n        showSuccess(`KYC status updated to ${status}!`);\n        loadDSAPartners(); // Refresh the list\n    } catch (error) {\n        console.error('Error updating KYC status:', error);\n        showError('Failed to update KYC status. Please try again.');\n    }\n}\n\n// Show assign lead modal (simplified version)\nfunction showAssignLeadModal(leadId) {\n    const dsaId = prompt('Enter DSA ID to assign this lead:');\n    if (dsaId) {\n        assignLeadToDSA(leadId, dsaId);\n    }\n}\n\n// Assign lead to DSA\nasync function assignLeadToDSA(leadId, dsaId) {\n    try {\n        const response = await makeAPIRequest('PATCH', `/leads/${leadId}/assign`, { dsaId });\n        \n        if (response.ok) {\n            showSuccess('Lead assigned successfully!');\n            loadLeads(); // Refresh the list\n        } else {\n            throw new Error('Failed to assign lead');\n        }\n    } catch (error) {\n        console.error('Error assigning lead:', error);\n        showError('Failed to assign lead. Please try again.');\n    }\n}\n\n// Utility functions\nfunction showDataContainer(title) {\n    document.getElementById('data-title').textContent = title;\n    document.getElementById('data-container').classList.remove('hidden');\n}\n\nfunction hideDataContainer() {\n    document.getElementById('data-container').classList.add('hidden');\n}\n\nfunction showDataError(message) {\n    document.getElementById('data-content').innerHTML = \n        `<p class=\"text-red-500 text-center py-8\">${message}</p>`;\n}\n\nfunction getStatusClass(status) {\n    switch (status) {\n        case 'approved':\n        case 'verified':\n        case 'converted':\n            return 'bg-green-100 text-green-800';\n        case 'rejected':\n        case 'closed':\n            return 'bg-red-100 text-red-800';\n        case 'pending':\n        case 'new':\n        case 'contacted':\n            return 'bg-yellow-100 text-yellow-800';\n        case 'under-review':\n        case 'qualified':\n            return 'bg-blue-100 text-blue-800';\n        default:\n            return 'bg-gray-100 text-gray-800';\n    }\n}\n\nfunction formatNumber(num) {\n    return new Intl.NumberFormat('en-IN').format(num);\n}\n\n// API request function\nasync function makeAPIRequest(method, endpoint, data = null) {\n    const options = {\n        method: method,\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    };\n    \n    if (data && method !== 'GET') {\n        options.body = JSON.stringify(data);\n    }\n    \n    return fetch(`${API_BASE_URL}${endpoint}`, options);\n}\n\n// Modal functions (reuse from auth.js)\nfunction showSuccess(message) {\n    // Simple alert for now - you can enhance this with modals\n    alert('Success: ' + message);\n}\n\nfunction showError(message) {\n    // Simple alert for now - you can enhance this with modals\n    alert('Error: ' + message);\n}","size_bytes":14525},"public_html/assets/js/main.js":{"content":"// Main JavaScript for JSMF Loan Management System\n\n// Configuration\nconst API_BASE_URL = 'backend/api';\n\n// Services data\nconst services = [\n    {\n        title: \"Personal Loan\",\n        badge: \"7.5% ROI\",\n        badgeColor: \"bg-red-600 text-white\",\n        description: \"Quick personal loans for salaried individuals with minimal documentation and same-day approval.\",\n        features: [\"Minimum salary ₹15,000\", \"Cash salary from ₹8,000\", \"Loan up to ₹10 Lakhs\"],\n        image: \"https://images.unsplash.com/photo-1573497019940-1c28c88b4f3e?auto=format&fit=crop&w=400&h=250\",\n        alt: \"Personal loan consultation\"\n    },\n    {\n        title: \"Business Loan\",\n        badge: \"Daily Funding\",\n        badgeColor: \"bg-green-500 text-white\",\n        description: \"Expand your business with flexible loan options and daily funding facility for growing enterprises.\",\n        features: [\"Daily funding available\", \"Flexible repayment terms\", \"Loan up to ₹50 Lakhs\"],\n        image: \"https://images.unsplash.com/photo-1521791136064-7986c2920216?auto=format&fit=crop&w=400&h=250\",\n        alt: \"Business loan handshake deal\"\n    },\n    {\n        title: \"Home Loan\",\n        badge: \"Best Rates\",\n        badgeColor: \"bg-blue-500 text-white\",\n        description: \"Make your dream home a reality with our competitive home loan rates and easy approval process.\",\n        features: [\"Competitive interest rates\", \"Up to 30 years tenure\", \"Loan up to ₹5 Crores\"],\n        image: \"https://images.unsplash.com/photo-1582407947304-fd86f028f716?auto=format&fit=crop&w=400&h=250\",\n        alt: \"Home loan family with documents\"\n    },\n    {\n        title: \"Loan Against Property\",\n        badge: \"High Value\",\n        badgeColor: \"bg-purple-500 text-white\",\n        description: \"Unlock the value of your property with secured loans at attractive interest rates.\",\n        features: [\"Lower interest rates\", \"Higher loan amounts\", \"Flexible usage\"],\n        image: \"https://images.unsplash.com/photo-1497366216548-37526070297c?auto=format&fit=crop&w=400&h=250\",\n        alt: \"Professional office workspace\"\n    },\n    {\n        title: \"Working Capital\",\n        badge: \"Quick Fund\",\n        badgeColor: \"bg-orange-500 text-white\",\n        description: \"Maintain smooth cash flow for your business operations with flexible working capital solutions.\",\n        features: [\"Quick disbursement\", \"Minimal documentation\", \"Revolving credit facility\"],\n        image: \"https://images.unsplash.com/photo-1554224155-8d04cb21cd6c?auto=format&fit=crop&w=400&h=250\",\n        alt: \"Financial calculator smartphone\"\n    },\n    {\n        title: \"DSA Partnership\",\n        badge: \"Earn More\",\n        badgeColor: \"bg-yellow-500 text-black\",\n        description: \"Join our DSA program and earn attractive commissions by referring loan customers.\",\n        features: [\"Attractive commission structure\", \"Marketing support provided\", \"Training & certification\"],\n        image: \"https://images.unsplash.com/photo-1600880292203-757bb62b4baf?auto=format&fit=crop&w=400&h=250\",\n        alt: \"DSA partner business meeting\",\n        isSpecial: true\n    }\n];\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeApp();\n});\n\nfunction initializeApp() {\n    setupNavigation();\n    loadServices();\n    setupForms();\n    calculateEMI(); // Initial calculation\n    setupSmoothScrolling();\n}\n\n// Navigation functionality\nfunction setupNavigation() {\n    const mobileToggle = document.getElementById('mobile-menu-toggle');\n    const mobileMenu = document.getElementById('mobile-menu');\n    const mobileIcon = mobileToggle.querySelector('i');\n\n    mobileToggle.addEventListener('click', function() {\n        mobileMenu.classList.toggle('hidden');\n        \n        if (mobileMenu.classList.contains('hidden')) {\n            mobileIcon.className = 'fas fa-bars text-xl';\n        } else {\n            mobileIcon.className = 'fas fa-times text-xl';\n        }\n    });\n\n    // Close mobile menu when clicking on links\n    const mobileLinks = mobileMenu.querySelectorAll('a');\n    mobileLinks.forEach(link => {\n        link.addEventListener('click', () => {\n            mobileMenu.classList.add('hidden');\n            mobileIcon.className = 'fas fa-bars text-xl';\n        });\n    });\n}\n\n// Load services dynamically\nfunction loadServices() {\n    const servicesGrid = document.getElementById('services-grid');\n    \n    services.forEach((service, index) => {\n        const serviceCard = createServiceCard(service, index);\n        servicesGrid.appendChild(serviceCard);\n    });\n}\n\nfunction createServiceCard(service, index) {\n    const card = document.createElement('div');\n    card.className = `service-card bg-white shadow-lg rounded-lg overflow-hidden ${service.isSpecial ? 'border-2 border-yellow-400' : ''}`;\n    \n    card.innerHTML = `\n        <div class=\"relative overflow-hidden\">\n            <img src=\"${service.image}\" alt=\"${service.alt}\" class=\"w-full h-48 object-cover transition-transform duration-300 hover:scale-110\">\n        </div>\n        \n        <div class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-4\">\n                <h3 class=\"text-xl font-bold text-blue-600\">${service.title}</h3>\n                <span class=\"px-3 py-1 rounded-full text-sm font-semibold ${service.badgeColor}\">${service.badge}</span>\n            </div>\n            \n            <p class=\"text-gray-600 mb-4\">${service.description}</p>\n            \n            <ul class=\"space-y-2 mb-6\">\n                ${service.features.map(feature => `\n                    <li class=\"flex items-center space-x-2\">\n                        <i class=\"${service.isSpecial ? 'fas fa-star text-yellow-500' : 'fas fa-check text-green-500'}\"></i>\n                        <span class=\"text-sm\">${feature}</span>\n                    </li>\n                `).join('')}\n            </ul>\n            \n            <button onclick=\"handleServiceClick('${service.title}')\" \n                    class=\"w-full py-3 font-semibold rounded transition-colors ${\n                        service.isSpecial \n                            ? 'bg-yellow-500 hover:bg-yellow-600 text-black' \n                            : 'bg-blue-600 hover:bg-blue-700 text-white'\n                    }\">\n                ${service.title === \"DSA Partnership\" ? \"Become DSA Partner\" : `Apply ${service.title}`}\n            </button>\n        </div>\n    `;\n    \n    return card;\n}\n\nfunction handleServiceClick(serviceType) {\n    if (serviceType !== \"DSA Partnership\") {\n        window.location.href = \"user/login.html\";\n    } else {\n        scrollToSection('dsa');\n    }\n}\n\n// Smooth scrolling functionality\nfunction setupSmoothScrolling() {\n    const links = document.querySelectorAll('a[href^=\"#\"]');\n    \n    links.forEach(link => {\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            const targetId = this.getAttribute('href').substring(1);\n            scrollToSection(targetId);\n        });\n    });\n}\n\nfunction scrollToSection(sectionId) {\n    const element = document.getElementById(sectionId);\n    if (element) {\n        element.scrollIntoView({ \n            behavior: 'smooth',\n            block: 'start'\n        });\n    }\n}\n\n// EMI Calculator\nfunction calculateEMI() {\n    const loanAmount = parseFloat(document.getElementById('loan-amount').value) || 0;\n    const interestRate = parseFloat(document.getElementById('interest-rate').value) || 0;\n    const tenure = parseFloat(document.getElementById('loan-tenure').value) || 0;\n    \n    if (loanAmount <= 0 || interestRate <= 0 || tenure <= 0) {\n        updateEMIDisplay(0, 0, 0);\n        return;\n    }\n    \n    const monthlyRate = interestRate / 12 / 100;\n    const numberOfPayments = tenure * 12;\n    \n    const emi = loanAmount * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments) / \n                (Math.pow(1 + monthlyRate, numberOfPayments) - 1);\n    \n    const totalAmount = emi * numberOfPayments;\n    const totalInterest = totalAmount - loanAmount;\n    \n    updateEMIDisplay(emi, totalInterest, totalAmount);\n}\n\nfunction updateEMIDisplay(emi, totalInterest, totalAmount) {\n    document.getElementById('monthly-emi').textContent = '₹' + Math.round(emi).toLocaleString('en-IN');\n    document.getElementById('total-interest').textContent = '₹' + Math.round(totalInterest).toLocaleString('en-IN');\n    document.getElementById('total-amount').textContent = '₹' + Math.round(totalAmount).toLocaleString('en-IN');\n}\n\n// Setup all forms\nfunction setupForms() {\n    setupQuickApplyForm();\n    setupContactForm();\n    setupDSAForm();\n    setupEMICalculator();\n}\n\nfunction setupQuickApplyForm() {\n    const form = document.getElementById('quick-apply-form');\n    form.addEventListener('submit', async function(e) {\n        e.preventDefault();\n        \n        const formData = {\n            name: document.getElementById('quick-name').value,\n            mobileNumber: document.getElementById('quick-mobile').value,\n            loanType: document.getElementById('quick-loan-type').value,\n            amount: \"100000\",\n            city: \"Bhopal\",\n            source: \"quick-apply\"\n        };\n        \n        if (!formData.name || !formData.mobileNumber || !formData.loanType) {\n            showError('Please fill all required fields.');\n            return;\n        }\n        \n        try {\n            showLoading();\n            const response = await makeAPIRequest('POST', '/leads', formData);\n            \n            if (response.ok) {\n                showSuccess('Application submitted successfully! We\\'ll contact you soon.');\n                form.reset();\n            } else {\n                throw new Error('Failed to submit application');\n            }\n        } catch (error) {\n            console.error('Quick apply error:', error);\n            showError('Failed to submit application. Please try again or call us directly.');\n        } finally {\n            hideLoading();\n        }\n    });\n}\n\nfunction setupContactForm() {\n    const form = document.getElementById('contact-form');\n    form.addEventListener('submit', async function(e) {\n        e.preventDefault();\n        \n        const formData = {\n            name: document.getElementById('contact-name').value,\n            mobileNumber: document.getElementById('contact-mobile').value,\n            email: document.getElementById('contact-email').value,\n            loanType: document.getElementById('contact-loan-type').value,\n            message: document.getElementById('contact-message').value\n        };\n        \n        const consent = document.getElementById('contact-consent').checked;\n        \n        if (!consent) {\n            showError('Please authorize us to contact you.');\n            return;\n        }\n        \n        if (!formData.name || !formData.mobileNumber || !formData.message) {\n            showError('Please fill all required fields.');\n            return;\n        }\n        \n        try {\n            showLoading();\n            const response = await makeAPIRequest('POST', '/contact-queries', formData);\n            \n            if (response.ok) {\n                showSuccess('Message sent successfully! We\\'ll get back to you within 24 hours.');\n                form.reset();\n            } else {\n                throw new Error('Failed to send message');\n            }\n        } catch (error) {\n            console.error('Contact form error:', error);\n            showError('Failed to send message. Please try again or contact us directly.');\n        } finally {\n            hideLoading();\n        }\n    });\n}\n\nfunction setupDSAForm() {\n    const form = document.getElementById('dsa-application-form');\n    form.addEventListener('submit', async function(e) {\n        e.preventDefault();\n        \n        const userData = {\n            username: document.getElementById('dsa-email').value, // Using email as username\n            email: document.getElementById('dsa-email').value,\n            password: 'temp123', // Temporary password - should be changed on first login\n            fullName: document.getElementById('dsa-name').value,\n            mobileNumber: document.getElementById('dsa-mobile').value,\n            city: document.getElementById('dsa-city').value || 'Bhopal'\n        };\n        \n        const partnerData = {\n            experience: document.getElementById('dsa-experience').value,\n            background: document.getElementById('dsa-background').value\n        };\n        \n        if (!userData.fullName || !userData.email || !userData.mobileNumber) {\n            showError('Please fill all required fields.');\n            return;\n        }\n        \n        try {\n            showLoading();\n            const response = await makeAPIRequest('POST', '/dsa-partners', {\n                userData,\n                partnerData\n            });\n            \n            if (response.ok) {\n                showSuccess('DSA application submitted successfully! We\\'ll review and contact you soon. Default password is \"temp123\".');\n                form.reset();\n            } else {\n                const errorData = await response.json();\n                throw new Error(errorData.message || 'Failed to submit DSA application');\n            }\n        } catch (error) {\n            console.error('DSA application error:', error);\n            showError(error.message || 'Failed to submit DSA application. Please try again.');\n        } finally {\n            hideLoading();\n        }\n    });\n}\n\nfunction setupEMICalculator() {\n    const inputs = ['loan-amount', 'interest-rate', 'loan-tenure'];\n    \n    inputs.forEach(inputId => {\n        const input = document.getElementById(inputId);\n        input.addEventListener('input', calculateEMI);\n    });\n}\n\n// API Functions\nasync function makeAPIRequest(method, endpoint, data = null) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    const options = {\n        method: method,\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    };\n    \n    if (data && method !== 'GET') {\n        options.body = JSON.stringify(data);\n    }\n    \n    return fetch(url, options);\n}\n\n// Modal and notification functions\nfunction showLoading() {\n    document.getElementById('loading-modal').classList.remove('hidden');\n}\n\nfunction hideLoading() {\n    document.getElementById('loading-modal').classList.add('hidden');\n}\n\nfunction showSuccess(message) {\n    document.getElementById('success-message').textContent = message;\n    document.getElementById('success-modal').classList.remove('hidden');\n}\n\nfunction showError(message) {\n    document.getElementById('error-message').textContent = message;\n    document.getElementById('error-modal').classList.remove('hidden');\n}\n\nfunction closeModal(modalId) {\n    document.getElementById(modalId).classList.add('hidden');\n}\n\n// Utility functions\nfunction formatCurrency(amount) {\n    return '₹' + amount.toLocaleString('en-IN');\n}\n\nfunction validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nfunction validateMobile(mobile) {\n    const mobileRegex = /^[+]?[0-9\\s\\-\\(\\)]{10,15}$/;\n    return mobileRegex.test(mobile);\n}\n\n// Initialize scroll effects and animations\nwindow.addEventListener('scroll', function() {\n    const navbar = document.querySelector('header');\n    if (window.scrollY > 100) {\n        navbar.classList.add('shadow-lg');\n    } else {\n        navbar.classList.remove('shadow-lg');\n    }\n});\n\n// Lazy load images\nfunction lazyLoadImages() {\n    const images = document.querySelectorAll('img[data-src]');\n    \n    const imageObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                const img = entry.target;\n                img.src = img.dataset.src;\n                img.classList.remove('lazy');\n                observer.unobserve(img);\n            }\n        });\n    });\n    \n    images.forEach(img => imageObserver.observe(img));\n}\n\n// Initialize lazy loading if supported\nif ('IntersectionObserver' in window) {\n    lazyLoadImages();\n}\n\n// Handle offline/online status\nwindow.addEventListener('online', function() {\n    showSuccess('Connection restored!');\n});\n\nwindow.addEventListener('offline', function() {\n    showError('You are currently offline. Some features may not work.');\n});\n\n// Handle form validation\nfunction validateForm(formData, requiredFields) {\n    const errors = [];\n    \n    requiredFields.forEach(field => {\n        if (!formData[field] || formData[field].toString().trim() === '') {\n            errors.push(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);\n        }\n    });\n    \n    if (formData.email && !validateEmail(formData.email)) {\n        errors.push('Please enter a valid email address');\n    }\n    \n    if (formData.mobileNumber && !validateMobile(formData.mobileNumber)) {\n        errors.push('Please enter a valid mobile number');\n    }\n    \n    return errors;\n}","size_bytes":16979},"hostinger/DEPLOYMENT_INSTRUCTIONS.md":{"content":"# JSMF Loan Management System - Hostinger Deployment Instructions\n\n## Overview\nThis PHP backend is a complete conversion of your Node.js/TypeScript application, optimized for Hostinger shared hosting.\n\n## Folder Structure\n```\npublic_html/\n├── api/                    # API endpoints\n│   ├── auth/              # Authentication endpoints\n│   ├── users/             # User management\n│   ├── loan-applications/ # Loan application APIs\n│   ├── dsa-partners/      # DSA partner APIs\n│   ├── leads/             # Lead management APIs\n│   └── contact-queries/   # Contact form APIs\n├── config/                # Configuration files\n│   └── database.php       # Database connection\n├── includes/              # Helper files\n│   ├── functions.php      # Common functions\n│   └── session.php        # Session management\n├── assets/                # Static files (CSS, JS, images)\n├── index.php              # Main entry point\n├── .htaccess              # Apache configuration\n└── database_setup.sql     # Database schema\n```\n\n## Step 1: Database Setup\n\n1. **Create MySQL Database in Hostinger Panel:**\n   - Login to your Hostinger account\n   - Go to \"Databases\" → \"MySQL Databases\"\n   - Create a new database (e.g., `your_username_jsmf_loans`)\n   - Create a database user and assign it to the database\n   - Note down the database name, username, and password\n\n2. **Import Database Schema:**\n   - Open phpMyAdmin from your Hostinger panel\n   - Select your database\n   - Go to \"Import\" tab\n   - Upload and execute `database_setup.sql`\n\n## Step 2: Configure Database Connection\n\nEdit `config/database.php`:\n```php\nprivate $host = 'localhost';\nprivate $database_name = 'your_database_name';    // Replace with your DB name\nprivate $username = 'your_db_username';           // Replace with your DB username\nprivate $password = 'your_db_password';           // Replace with your DB password\n```\n\n## Step 3: Upload Files to Hostinger\n\n1. **Using File Manager:**\n   - Login to Hostinger control panel\n   - Open \"File Manager\"\n   - Navigate to `public_html` folder\n   - Upload all files from the `hostinger/` directory\n\n2. **Using FTP:**\n   - Use an FTP client (FileZilla, etc.)\n   - Connect to your Hostinger FTP\n   - Upload files to `public_html` directory\n\n## Step 4: Set File Permissions\n\nSet the following permissions:\n- Folders: 755\n- PHP files: 644\n- .htaccess files: 644\n\n## Step 5: Test the Installation\n\n1. **Visit your website:** `https://yourdomain.com`\n2. **Test API endpoints:** `https://yourdomain.com/api/auth/login`\n3. **Default admin login:**\n   - Username: `harsh@jsmf.in`\n   - Password: `Harsh@9131`\n\n## API Endpoints Reference\n\n### Authentication\n- `POST /api/auth/login` - User login\n- `POST /api/auth/logout` - User logout\n- `GET /api/auth/user` - Get current user\n\n### User Management\n- `POST /api/users/register` - Register new user\n\n### Loan Applications\n- `POST /api/loan-applications` - Create application\n- `GET /api/loan-applications` - Get applications\n- `PATCH /api/loan-applications/{id}` - Update application\n\n### DSA Partners\n- `POST /api/dsa-partners` - Register DSA\n- `GET /api/dsa-partners` - Get all DSAs (admin)\n- `GET /api/dsa-partners/profile` - Get DSA profile\n\n### Lead Management\n- `POST /api/leads` - Create lead\n- `GET /api/leads` - Get leads\n- `PATCH /api/leads/{id}/assign` - Assign lead to DSA\n- `PATCH /api/leads/{id}` - Update lead\n\n### Contact Queries\n- `POST /api/contact-queries` - Submit query\n- `GET /api/contact-queries` - Get queries (admin)\n\n## Frontend Integration\n\nUpdate your frontend API calls to point to your Hostinger domain:\n\n```javascript\n// Before (Node.js)\nconst API_BASE = 'http://localhost:5000/api';\n\n// After (PHP on Hostinger)\nconst API_BASE = 'https://yourdomain.com/api';\n```\n\n## Security Features Included\n\n1. **Password Hashing:** Uses PHP's `password_hash()` function\n2. **Session Management:** Secure PHP sessions with httpOnly cookies\n3. **Input Sanitization:** All inputs are sanitized and validated\n4. **SQL Injection Protection:** Uses PDO prepared statements\n5. **CORS Headers:** Properly configured for API access\n6. **File Access Protection:** Sensitive directories are protected\n\n## Performance Optimizations\n\n1. **Database Indexing:** All frequently queried columns are indexed\n2. **Compression:** Gzip compression enabled via .htaccess\n3. **Caching Headers:** Static assets have proper cache headers\n4. **Connection Reuse:** Database connections are reused efficiently\n\n## Troubleshooting\n\n### Common Issues:\n\n1. **Database Connection Error:**\n   - Check database credentials in `config/database.php`\n   - Ensure database user has proper permissions\n\n2. **API Returns 404:**\n   - Check .htaccess file is uploaded\n   - Verify mod_rewrite is enabled (usually enabled on Hostinger)\n\n3. **Session Issues:**\n   - Check PHP session configuration\n   - Ensure cookies are working properly\n\n4. **CORS Errors:**\n   - Update frontend API calls to use HTTPS\n   - Check CORS headers in response\n\n### Log Files:\n- Check Hostinger error logs in control panel\n- PHP errors are logged but not displayed for security\n\n## Backup Strategy\n\n1. **Database Backups:**\n   - Use Hostinger's automatic backup feature\n   - Export database regularly via phpMyAdmin\n\n2. **File Backups:**\n   - Download files via FTP regularly\n   - Use Hostinger's file backup feature\n\n## Security Recommendations\n\n1. **Change Default Admin Password**\n2. **Use HTTPS** (usually free with Hostinger)\n3. **Regular Updates** of PHP version\n4. **Monitor Error Logs** regularly\n5. **Implement Rate Limiting** for API endpoints if needed\n\n## Support\n\nFor issues specific to this conversion:\n1. Check error logs first\n2. Verify database connection\n3. Test API endpoints individually\n4. Compare with Node.js implementation for business logic\n\nYour PHP backend is now ready for production use on Hostinger shared hosting!","size_bytes":5954},"hostinger/frontend_integration_example.js":{"content":"/**\n * Frontend API Integration Example for PHP Backend\n * Update your existing frontend code to use these patterns\n */\n\n// Configuration - Update this to your Hostinger domain\nconst API_BASE_URL = 'https://yourdomain.com/api'; // Replace with your actual domain\n\n// API Helper class\nclass ApiClient {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n\n    async request(endpoint, options = {}) {\n        const url = `${this.baseUrl}${endpoint}`;\n        \n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                ...options.headers\n            },\n            credentials: 'include', // Important: Include cookies for sessions\n            ...options\n        };\n\n        if (options.body && typeof options.body !== 'string') {\n            config.body = JSON.stringify(options.body);\n        }\n\n        try {\n            const response = await fetch(url, config);\n            const data = await response.json();\n            \n            if (!response.ok) {\n                throw new Error(data.message || 'Request failed');\n            }\n            \n            return data;\n        } catch (error) {\n            console.error('API request failed:', error);\n            throw error;\n        }\n    }\n\n    // Authentication methods\n    async login(username, password) {\n        return this.request('/auth/login', {\n            method: 'POST',\n            body: { username, password }\n        });\n    }\n\n    async logout() {\n        return this.request('/auth/logout', { method: 'POST' });\n    }\n\n    async getCurrentUser() {\n        return this.request('/auth/user');\n    }\n\n    // User registration\n    async register(userData) {\n        return this.request('/users/register', {\n            method: 'POST',\n            body: userData\n        });\n    }\n\n    // Loan applications\n    async createLoanApplication(applicationData) {\n        return this.request('/loan-applications', {\n            method: 'POST',\n            body: applicationData\n        });\n    }\n\n    async getLoanApplications() {\n        return this.request('/loan-applications');\n    }\n\n    async updateLoanApplication(id, updates) {\n        return this.request(`/loan-applications/${id}`, {\n            method: 'PATCH',\n            body: updates\n        });\n    }\n\n    // DSA Partners\n    async registerDSA(userData, partnerData) {\n        return this.request('/dsa-partners', {\n            method: 'POST',\n            body: { userData, partnerData }\n        });\n    }\n\n    async getDSAPartners() {\n        return this.request('/dsa-partners');\n    }\n\n    async getDSAProfile() {\n        return this.request('/dsa-partners/profile');\n    }\n\n    // Leads\n    async createLead(leadData) {\n        return this.request('/leads', {\n            method: 'POST',\n            body: leadData\n        });\n    }\n\n    async getLeads() {\n        return this.request('/leads');\n    }\n\n    async assignLead(leadId, dsaId) {\n        return this.request(`/leads/${leadId}/assign`, {\n            method: 'PATCH',\n            body: { dsaId }\n        });\n    }\n\n    async updateLead(leadId, updates) {\n        return this.request(`/leads/${leadId}`, {\n            method: 'PATCH',\n            body: updates\n        });\n    }\n\n    // Contact queries\n    async submitContactQuery(queryData) {\n        return this.request('/contact-queries', {\n            method: 'POST',\n            body: queryData\n        });\n    }\n\n    async getContactQueries() {\n        return this.request('/contact-queries');\n    }\n}\n\n// Create API client instance\nconst apiClient = new ApiClient(API_BASE_URL);\n\n// Example usage in your React components:\n\n// Login component example\nasync function handleLogin(username, password) {\n    try {\n        const response = await apiClient.login(username, password);\n        console.log('Login successful:', response.user);\n        // Update your app state with user data\n        // Navigate to dashboard, etc.\n    } catch (error) {\n        console.error('Login failed:', error.message);\n        // Show error message to user\n    }\n}\n\n// Loan application form example\nasync function handleLoanApplication(formData) {\n    try {\n        const application = await apiClient.createLoanApplication({\n            loanType: formData.loanType,\n            amount: formData.amount,\n            tenure: formData.tenure,\n            monthlyIncome: formData.monthlyIncome,\n            employmentType: formData.employmentType,\n            purpose: formData.purpose\n        });\n        console.log('Application created:', application);\n        // Show success message, redirect, etc.\n    } catch (error) {\n        console.error('Application failed:', error.message);\n        // Show error message\n    }\n}\n\n// Contact form example\nasync function handleContactForm(formData) {\n    try {\n        const query = await apiClient.submitContactQuery({\n            name: formData.name,\n            mobileNumber: formData.mobile,\n            email: formData.email,\n            loanType: formData.loanType,\n            message: formData.message\n        });\n        console.log('Query submitted:', query);\n        // Show success message\n    } catch (error) {\n        console.error('Query failed:', error.message);\n        // Show error message\n    }\n}\n\n// Export for use in your application\nexport { apiClient, ApiClient };\n\n/**\n * Migration Checklist for Frontend:\n * \n * 1. Update API base URL to your Hostinger domain\n * 2. Ensure all API calls include credentials: 'include'\n * 3. Update any hardcoded localhost URLs\n * 4. Test all authentication flows\n * 5. Verify CORS is working properly\n * 6. Update any WebSocket connections (if used)\n * 7. Test file uploads (if implemented)\n * 8. Verify error handling works with PHP responses\n * 9. Update any environment variables\n * 10. Test all user roles and permissions\n */","size_bytes":5831},"hostinger/index.php":{"content":"<?php\n/**\n * Main Entry Point for JSMF Loan Management System\n * This file serves as the front controller for the PHP backend\n */\n\nrequire_once 'includes/functions.php';\nrequire_once 'includes/session.php';\n\n// Get the request URI and method\n$request_uri = $_SERVER['REQUEST_URI'];\n$request_method = $_SERVER['REQUEST_METHOD'];\n\n// Parse the URL to get the path\n$path = parse_url($request_uri, PHP_URL_PATH);\n\n// Remove the base path if present\n$base_path = '/public_html';\nif (strpos($path, $base_path) === 0) {\n    $path = substr($path, strlen($base_path));\n}\n\n// Route the request to appropriate API endpoint\nif (strpos($path, '/api/') === 0) {\n    // API routes\n    $api_path = substr($path, 4); // Remove '/api' prefix\n    \n    switch (true) {\n        // Auth routes\n        case $api_path === '/auth/login':\n            require 'api/auth/login.php';\n            break;\n        case $api_path === '/auth/logout':\n            require 'api/auth/logout.php';\n            break;\n        case $api_path === '/auth/user':\n            require 'api/auth/user.php';\n            break;\n            \n        // User routes\n        case $api_path === '/users/register':\n            require 'api/users/register.php';\n            break;\n            \n        // Loan application routes\n        case $api_path === '/loan-applications':\n            require 'api/loan-applications/index.php';\n            break;\n        case preg_match('/^\\/loan-applications\\/([a-f0-9\\-]+)$/', $api_path):\n            require 'api/loan-applications/update.php';\n            break;\n            \n        // DSA partner routes\n        case $api_path === '/dsa-partners':\n            require 'api/dsa-partners/index.php';\n            break;\n        case $api_path === '/dsa-partners/profile':\n            require 'api/dsa-partners/profile.php';\n            break;\n            \n        // Lead routes\n        case $api_path === '/leads':\n            require 'api/leads/index.php';\n            break;\n        case preg_match('/^\\/leads\\/([a-f0-9\\-]+)\\/assign$/', $api_path):\n            require 'api/leads/assign.php';\n            break;\n        case preg_match('/^\\/leads\\/([a-f0-9\\-]+)$/', $api_path):\n            require 'api/leads/update.php';\n            break;\n            \n        // Contact query routes\n        case $api_path === '/contact-queries':\n            require 'api/contact-queries/index.php';\n            break;\n            \n        default:\n            http_response_code(404);\n            echo json_encode(['message' => 'API endpoint not found']);\n    }\n} else {\n    // Serve static files or redirect to frontend\n    if ($path === '/' || $path === '/index.php') {\n        // Serve the main application\n        ?>\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>JSMF Loan Management System</title>\n            <style>\n                body {\n                    font-family: Arial, sans-serif;\n                    max-width: 800px;\n                    margin: 0 auto;\n                    padding: 20px;\n                    background-color: #f5f5f5;\n                }\n                .container {\n                    background: white;\n                    padding: 30px;\n                    border-radius: 10px;\n                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n                }\n                h1 {\n                    color: #2c3e50;\n                    text-align: center;\n                    margin-bottom: 30px;\n                }\n                .api-info {\n                    background: #ecf0f1;\n                    padding: 20px;\n                    border-radius: 5px;\n                    margin: 20px 0;\n                }\n                .endpoint {\n                    background: #3498db;\n                    color: white;\n                    padding: 10px;\n                    margin: 5px 0;\n                    border-radius: 3px;\n                    font-family: monospace;\n                }\n                .note {\n                    background: #f39c12;\n                    color: white;\n                    padding: 15px;\n                    border-radius: 5px;\n                    margin: 20px 0;\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"container\">\n                <h1>JSMF Loan Management System - PHP Backend</h1>\n                \n                <div class=\"note\">\n                    <strong>Important:</strong> Update the database configuration in <code>config/database.php</code> with your Hostinger database credentials.\n                </div>\n                \n                <div class=\"api-info\">\n                    <h3>Available API Endpoints:</h3>\n                    \n                    <h4>Authentication:</h4>\n                    <div class=\"endpoint\">POST /api/auth/login</div>\n                    <div class=\"endpoint\">POST /api/auth/logout</div>\n                    <div class=\"endpoint\">GET /api/auth/user</div>\n                    \n                    <h4>User Management:</h4>\n                    <div class=\"endpoint\">POST /api/users/register</div>\n                    \n                    <h4>Loan Applications:</h4>\n                    <div class=\"endpoint\">POST /api/loan-applications</div>\n                    <div class=\"endpoint\">GET /api/loan-applications</div>\n                    <div class=\"endpoint\">PATCH /api/loan-applications/{id}</div>\n                    \n                    <h4>DSA Partners:</h4>\n                    <div class=\"endpoint\">POST /api/dsa-partners</div>\n                    <div class=\"endpoint\">GET /api/dsa-partners</div>\n                    <div class=\"endpoint\">GET /api/dsa-partners/profile</div>\n                    \n                    <h4>Lead Management:</h4>\n                    <div class=\"endpoint\">POST /api/leads</div>\n                    <div class=\"endpoint\">GET /api/leads</div>\n                    <div class=\"endpoint\">PATCH /api/leads/{id}/assign</div>\n                    <div class=\"endpoint\">PATCH /api/leads/{id}</div>\n                    \n                    <h4>Contact Queries:</h4>\n                    <div class=\"endpoint\">POST /api/contact-queries</div>\n                    <div class=\"endpoint\">GET /api/contact-queries</div>\n                </div>\n                \n                <p><strong>Status:</strong> PHP Backend is ready for deployment on Hostinger shared hosting.</p>\n            </div>\n        </body>\n        </html>\n        <?php\n    } else {\n        http_response_code(404);\n        echo '<h1>404 Not Found</h1>';\n    }\n}\n?>","size_bytes":6649},"hostinger/config/database.php":{"content":"<?php\n/**\n * Database Configuration for JSMF Loan Management System\n * Configure these settings according to your Hostinger database details\n */\n\nclass Database {\n    private $host = 'localhost';\n    private $database_name = 'jsmf_loans';\n    private $username = 'your_db_username'; // Replace with your Hostinger DB username\n    private $password = 'your_db_password'; // Replace with your Hostinger DB password\n    private $charset = 'utf8mb4';\n    private $connection = null;\n    \n    public function getConnection() {\n        if ($this->connection === null) {\n            try {\n                $dsn = \"mysql:host={$this->host};dbname={$this->database_name};charset={$this->charset}\";\n                $options = [\n                    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n                    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n                    PDO::ATTR_EMULATE_PREPARES => false,\n                ];\n                \n                $this->connection = new PDO($dsn, $this->username, $this->password, $options);\n            } catch (PDOException $e) {\n                error_log(\"Database connection failed: \" . $e->getMessage());\n                throw new Exception(\"Database connection failed\");\n            }\n        }\n        \n        return $this->connection;\n    }\n    \n    public function closeConnection() {\n        $this->connection = null;\n    }\n}\n\n// Helper function to get database connection\nfunction getDB() {\n    $database = new Database();\n    return $database->getConnection();\n}\n?>","size_bytes":1526},"hostinger/includes/functions.php":{"content":"<?php\n/**\n * Common Functions for JSMF Loan Management System\n */\n\n/**\n * Generate UUID v4\n */\nfunction generateUUID() {\n    return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',\n        mt_rand(0, 0xffff), mt_rand(0, 0xffff),\n        mt_rand(0, 0xffff),\n        mt_rand(0, 0x0fff) | 0x4000,\n        mt_rand(0, 0x3fff) | 0x8000,\n        mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)\n    );\n}\n\n/**\n * Hash password using PHP's password_hash\n */\nfunction hashPassword($password) {\n    return password_hash($password, PASSWORD_DEFAULT);\n}\n\n/**\n * Verify password against hash\n */\nfunction verifyPassword($password, $hash) {\n    return password_verify($password, $hash);\n}\n\n/**\n * Validate email format\n */\nfunction isValidEmail($email) {\n    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n}\n\n/**\n * Validate mobile number (Indian format)\n */\nfunction isValidMobile($mobile) {\n    return preg_match('/^(\\+91[\\-\\s]?)?[0]?(91)?[789]\\d{9}$/', $mobile);\n}\n\n/**\n * Sanitize input data\n */\nfunction sanitizeInput($data) {\n    if (is_array($data)) {\n        return array_map('sanitizeInput', $data);\n    }\n    return htmlspecialchars(strip_tags(trim($data)), ENT_QUOTES, 'UTF-8');\n}\n\n/**\n * Send JSON response\n */\nfunction sendJsonResponse($data, $status_code = 200) {\n    http_response_code($status_code);\n    header('Content-Type: application/json');\n    echo json_encode($data);\n    exit;\n}\n\n/**\n * Send error response\n */\nfunction sendError($message, $status_code = 400) {\n    sendJsonResponse(['message' => $message], $status_code);\n}\n\n/**\n * Get JSON input data\n */\nfunction getJsonInput() {\n    $json = file_get_contents('php://input');\n    $data = json_decode($json, true);\n    \n    if (json_last_error() !== JSON_ERROR_NONE) {\n        sendError('Invalid JSON data', 400);\n    }\n    \n    return $data ?? [];\n}\n\n/**\n * Validate required fields\n */\nfunction validateRequiredFields($data, $required_fields) {\n    $missing_fields = [];\n    \n    foreach ($required_fields as $field) {\n        if (!isset($data[$field]) || empty(trim($data[$field]))) {\n            $missing_fields[] = $field;\n        }\n    }\n    \n    if (!empty($missing_fields)) {\n        sendError('Missing required fields: ' . implode(', ', $missing_fields), 400);\n    }\n}\n\n/**\n * Handle CORS for API requests\n */\nfunction handleCORS() {\n    // Allow from any origin\n    if (isset($_SERVER['HTTP_ORIGIN'])) {\n        header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");\n        header('Access-Control-Allow-Credentials: true');\n        header('Access-Control-Max-Age: 86400');\n    }\n\n    // Access-Control headers are received during OPTIONS requests\n    if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {\n        if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD'])) {\n            header(\"Access-Control-Allow-Methods: GET, POST, PATCH, DELETE, OPTIONS\");\n        }\n\n        if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS'])) {\n            header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\");\n        }\n\n        exit(0);\n    }\n}\n\n/**\n * Get current timestamp in MySQL format\n */\nfunction getCurrentTimestamp() {\n    return date('Y-m-d H:i:s');\n}\n\n/**\n * Log error message\n */\nfunction logError($message, $context = []) {\n    $log_message = date('[Y-m-d H:i:s] ') . $message;\n    if (!empty($context)) {\n        $log_message .= ' Context: ' . json_encode($context);\n    }\n    error_log($log_message);\n}\n?>","size_bytes":3454},"hostinger/includes/session.php":{"content":"<?php\n/**\n * Session Management for JSMF Loan Management System\n */\n\n// Start session with secure settings\nif (session_status() === PHP_SESSION_NONE) {\n    ini_set('session.cookie_httponly', 1);\n    ini_set('session.use_strict_mode', 1);\n    ini_set('session.cookie_secure', isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on');\n    \n    session_start();\n}\n\n/**\n * Check if user is authenticated\n */\nfunction isAuthenticated() {\n    return isset($_SESSION['user_id']) && !empty($_SESSION['user_id']);\n}\n\n/**\n * Check if user has required role\n */\nfunction hasRole($required_role) {\n    return isAuthenticated() && isset($_SESSION['user_role']) && $_SESSION['user_role'] === $required_role;\n}\n\n/**\n * Require authentication for API endpoints\n */\nfunction requireAuth() {\n    if (!isAuthenticated()) {\n        http_response_code(401);\n        echo json_encode(['message' => 'Unauthorized']);\n        exit;\n    }\n}\n\n/**\n * Require specific role for API endpoints\n */\nfunction requireRole($required_role) {\n    if (!hasRole($required_role)) {\n        http_response_code(403);\n        echo json_encode(['message' => 'Forbidden']);\n        exit;\n    }\n}\n\n/**\n * Get current user ID from session\n */\nfunction getCurrentUserId() {\n    return $_SESSION['user_id'] ?? null;\n}\n\n/**\n * Get current user role from session\n */\nfunction getCurrentUserRole() {\n    return $_SESSION['user_role'] ?? null;\n}\n\n/**\n * Set user session after login\n */\nfunction setUserSession($user) {\n    $_SESSION['user_id'] = $user['id'];\n    $_SESSION['user_role'] = $user['role'];\n    $_SESSION['username'] = $user['username'];\n}\n\n/**\n * Clear user session on logout\n */\nfunction clearUserSession() {\n    session_unset();\n    session_destroy();\n}\n?>","size_bytes":1719},"hostinger/api/auth/login.php":{"content":"<?php\n/**\n * User Login API Endpoint\n */\n\nrequire_once '../../config/database.php';\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\n\nif ($_SERVER['REQUEST_METHOD'] !== 'POST') {\n    sendError('Method not allowed', 405);\n}\n\ntry {\n    $input = getJsonInput();\n    validateRequiredFields($input, ['username', 'password']);\n    \n    $username = sanitizeInput($input['username']);\n    $password = $input['password'];\n    \n    $db = getDB();\n    \n    // Get user by username or email\n    $stmt = $db->prepare(\"\n        SELECT id, username, email, password, role, full_name, mobile_number, city, is_active \n        FROM users \n        WHERE (username = ? OR email = ?) AND is_active = 1\n    \");\n    $stmt->execute([$username, $username]);\n    $user = $stmt->fetch();\n    \n    if (!$user || !verifyPassword($password, $user['password'])) {\n        sendError('Invalid credentials', 401);\n    }\n    \n    // Set session\n    setUserSession($user);\n    \n    // Return user data (without password)\n    unset($user['password']);\n    $user['fullName'] = $user['full_name'];\n    $user['mobileNumber'] = $user['mobile_number'];\n    $user['isActive'] = (bool)$user['is_active'];\n    \n    sendJsonResponse(['user' => $user]);\n    \n} catch (Exception $e) {\n    logError('Login error: ' . $e->getMessage());\n    sendError('Login failed', 500);\n}\n?>","size_bytes":1381},"hostinger/api/auth/logout.php":{"content":"<?php\n/**\n * User Logout API Endpoint\n */\n\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\n\nif ($_SERVER['REQUEST_METHOD'] !== 'POST') {\n    sendError('Method not allowed', 405);\n}\n\ntry {\n    clearUserSession();\n    sendJsonResponse(['message' => 'Logged out successfully']);\n    \n} catch (Exception $e) {\n    logError('Logout error: ' . $e->getMessage());\n    sendError('Logout failed', 500);\n}\n?>","size_bytes":453},"hostinger/api/auth/user.php":{"content":"<?php\n/**\n * Get Current User API Endpoint\n */\n\nrequire_once '../../config/database.php';\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\n\nif ($_SERVER['REQUEST_METHOD'] !== 'GET') {\n    sendError('Method not allowed', 405);\n}\n\nrequireAuth();\n\ntry {\n    $userId = getCurrentUserId();\n    $db = getDB();\n    \n    $stmt = $db->prepare(\"\n        SELECT id, username, email, role, full_name, mobile_number, city, is_active \n        FROM users \n        WHERE id = ? AND is_active = 1\n    \");\n    $stmt->execute([$userId]);\n    $user = $stmt->fetch();\n    \n    if (!$user) {\n        sendError('User not found', 404);\n    }\n    \n    // Format response\n    $user['fullName'] = $user['full_name'];\n    $user['mobileNumber'] = $user['mobile_number'];\n    $user['isActive'] = (bool)$user['is_active'];\n    unset($user['full_name'], $user['mobile_number'], $user['is_active']);\n    \n    sendJsonResponse($user);\n    \n} catch (Exception $e) {\n    logError('Get user error: ' . $e->getMessage());\n    sendError('Failed to get user', 500);\n}\n?>","size_bytes":1084},"hostinger/api/contact-queries/index.php":{"content":"<?php\n/**\n * Contact Queries API Endpoint\n */\n\nrequire_once '../../config/database.php';\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\n\n$method = $_SERVER['REQUEST_METHOD'];\n\ntry {\n    $db = getDB();\n    \n    if ($method === 'POST') {\n        // Create contact query (public endpoint)\n        $input = getJsonInput();\n        validateRequiredFields($input, ['name', 'mobileNumber', 'message']);\n        \n        $queryData = [\n            'name' => sanitizeInput($input['name']),\n            'mobileNumber' => sanitizeInput($input['mobileNumber']),\n            'email' => sanitizeInput($input['email'] ?? null),\n            'loanType' => sanitizeInput($input['loanType'] ?? null),\n            'message' => sanitizeInput($input['message'])\n        ];\n        \n        $queryId = generateUUID();\n        $currentTime = getCurrentTimestamp();\n        \n        $stmt = $db->prepare(\"\n            INSERT INTO contact_queries (id, name, mobile_number, email, loan_type, message, status, created_at)\n            VALUES (?, ?, ?, ?, ?, ?, 'new', ?)\n        \");\n        \n        $stmt->execute([\n            $queryId,\n            $queryData['name'],\n            $queryData['mobileNumber'],\n            $queryData['email'],\n            $queryData['loanType'],\n            $queryData['message'],\n            $currentTime\n        ]);\n        \n        // Get created query\n        $stmt = $db->prepare(\"SELECT * FROM contact_queries WHERE id = ?\");\n        $stmt->execute([$queryId]);\n        $query = $stmt->fetch();\n        \n        sendJsonResponse($query, 201);\n        \n    } elseif ($method === 'GET') {\n        requireRole('admin');\n        \n        // Get all contact queries\n        $stmt = $db->prepare(\"\n            SELECT * FROM contact_queries\n            ORDER BY created_at DESC\n        \");\n        $stmt->execute();\n        $queries = $stmt->fetchAll();\n        \n        sendJsonResponse($queries);\n        \n    } else {\n        sendError('Method not allowed', 405);\n    }\n    \n} catch (Exception $e) {\n    logError('Contact queries error: ' . $e->getMessage());\n    sendError('Operation failed', 500);\n}\n?>","size_bytes":2167},"hostinger/api/dsa-partners/index.php":{"content":"<?php\n/**\n * DSA Partners API Endpoint\n */\n\nrequire_once '../../config/database.php';\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\n\n$method = $_SERVER['REQUEST_METHOD'];\n\ntry {\n    $db = getDB();\n    \n    if ($method === 'POST') {\n        // Create DSA partner registration\n        $input = getJsonInput();\n        validateRequiredFields($input, ['userData', 'partnerData']);\n        \n        $userData = $input['userData'];\n        $partnerData = $input['partnerData'];\n        \n        validateRequiredFields($userData, ['username', 'email', 'password', 'fullName', 'mobileNumber']);\n        \n        // Sanitize user data\n        $userData = [\n            'username' => sanitizeInput($userData['username']),\n            'email' => sanitizeInput($userData['email']),\n            'password' => $userData['password'],\n            'fullName' => sanitizeInput($userData['fullName']),\n            'mobileNumber' => sanitizeInput($userData['mobileNumber']),\n            'city' => sanitizeInput($userData['city'] ?? null),\n            'role' => 'dsa'\n        ];\n        \n        $partnerData = [\n            'experience' => sanitizeInput($partnerData['experience'] ?? null),\n            'background' => sanitizeInput($partnerData['background'] ?? null)\n        ];\n        \n        $db->beginTransaction();\n        \n        try {\n            // Check if username/email exists\n            $stmt = $db->prepare(\"SELECT id FROM users WHERE username = ? OR email = ?\");\n            $stmt->execute([$userData['username'], $userData['email']]);\n            if ($stmt->fetch()) {\n                sendError('Username or email already exists', 400);\n            }\n            \n            // Create user\n            $userId = generateUUID();\n            $hashedPassword = hashPassword($userData['password']);\n            $currentTime = getCurrentTimestamp();\n            \n            $userStmt = $db->prepare(\"\n                INSERT INTO users (id, username, email, password, role, full_name, mobile_number, city, is_active, created_at, updated_at)\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1, ?, ?)\n            \");\n            \n            $userStmt->execute([\n                $userId,\n                $userData['username'],\n                $userData['email'],\n                $hashedPassword,\n                $userData['role'],\n                $userData['fullName'],\n                $userData['mobileNumber'],\n                $userData['city'],\n                $currentTime,\n                $currentTime\n            ]);\n            \n            // Create DSA partner profile\n            $partnerId = generateUUID();\n            $partnerStmt = $db->prepare(\"\n                INSERT INTO dsa_partners (id, user_id, experience, background, commission_rate, total_earnings, total_leads, successful_leads, kyc_status, created_at, updated_at)\n                VALUES (?, ?, ?, ?, 2.00, 0, 0, 0, 'pending', ?, ?)\n            \");\n            \n            $partnerStmt->execute([\n                $partnerId,\n                $userId,\n                $partnerData['experience'],\n                $partnerData['background'],\n                $currentTime,\n                $currentTime\n            ]);\n            \n            $db->commit();\n            \n            // Return created data\n            $user = [\n                'id' => $userId,\n                'username' => $userData['username'],\n                'email' => $userData['email'],\n                'role' => $userData['role'],\n                'fullName' => $userData['fullName'],\n                'mobileNumber' => $userData['mobileNumber'],\n                'city' => $userData['city']\n            ];\n            \n            $partner = [\n                'id' => $partnerId,\n                'userId' => $userId,\n                'experience' => $partnerData['experience'],\n                'background' => $partnerData['background'],\n                'commissionRate' => '2.00',\n                'totalEarnings' => '0',\n                'totalLeads' => 0,\n                'successfulLeads' => 0,\n                'kycStatus' => 'pending'\n            ];\n            \n            sendJsonResponse(['user' => $user, 'partner' => $partner], 201);\n            \n        } catch (Exception $e) {\n            $db->rollback();\n            throw $e;\n        }\n        \n    } elseif ($method === 'GET') {\n        requireRole('admin');\n        \n        // Get all DSA partners\n        $stmt = $db->prepare(\"\n            SELECT dp.*, u.username, u.email, u.full_name, u.mobile_number, u.city, u.is_active\n            FROM dsa_partners dp\n            JOIN users u ON dp.user_id = u.id\n            ORDER BY dp.created_at DESC\n        \");\n        $stmt->execute();\n        $partners = $stmt->fetchAll();\n        \n        // Format response\n        $formattedPartners = array_map(function($partner) {\n            return [\n                'id' => $partner['id'],\n                'userId' => $partner['user_id'],\n                'username' => $partner['username'],\n                'email' => $partner['email'],\n                'fullName' => $partner['full_name'],\n                'mobileNumber' => $partner['mobile_number'],\n                'city' => $partner['city'],\n                'isActive' => (bool)$partner['is_active'],\n                'experience' => $partner['experience'],\n                'background' => $partner['background'],\n                'commissionRate' => $partner['commission_rate'],\n                'totalEarnings' => $partner['total_earnings'],\n                'totalLeads' => $partner['total_leads'],\n                'successfulLeads' => $partner['successful_leads'],\n                'kycStatus' => $partner['kyc_status'],\n                'createdAt' => $partner['created_at'],\n                'updatedAt' => $partner['updated_at']\n            ];\n        }, $partners);\n        \n        sendJsonResponse($formattedPartners);\n        \n    } else {\n        sendError('Method not allowed', 405);\n    }\n    \n} catch (Exception $e) {\n    logError('DSA partners error: ' . $e->getMessage());\n    sendError('Operation failed', 500);\n}\n?>","size_bytes":6127},"hostinger/api/dsa-partners/profile.php":{"content":"<?php\n/**\n * DSA Partner Profile API Endpoint\n */\n\nrequire_once '../../config/database.php';\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\nrequireRole('dsa');\n\nif ($_SERVER['REQUEST_METHOD'] !== 'GET') {\n    sendError('Method not allowed', 405);\n}\n\ntry {\n    $userId = getCurrentUserId();\n    $db = getDB();\n    \n    $stmt = $db->prepare(\"\n        SELECT dp.*, u.username, u.email, u.full_name, u.mobile_number, u.city\n        FROM dsa_partners dp\n        JOIN users u ON dp.user_id = u.id\n        WHERE dp.user_id = ?\n    \");\n    $stmt->execute([$userId]);\n    $partner = $stmt->fetch();\n    \n    if (!$partner) {\n        sendError('DSA profile not found', 404);\n    }\n    \n    // Format response\n    $formattedPartner = [\n        'id' => $partner['id'],\n        'userId' => $partner['user_id'],\n        'username' => $partner['username'],\n        'email' => $partner['email'],\n        'fullName' => $partner['full_name'],\n        'mobileNumber' => $partner['mobile_number'],\n        'city' => $partner['city'],\n        'experience' => $partner['experience'],\n        'background' => $partner['background'],\n        'commissionRate' => $partner['commission_rate'],\n        'totalEarnings' => $partner['total_earnings'],\n        'totalLeads' => $partner['total_leads'],\n        'successfulLeads' => $partner['successful_leads'],\n        'kycStatus' => $partner['kyc_status'],\n        'createdAt' => $partner['created_at'],\n        'updatedAt' => $partner['updated_at']\n    ];\n    \n    sendJsonResponse($formattedPartner);\n    \n} catch (Exception $e) {\n    logError('Get DSA profile error: ' . $e->getMessage());\n    sendError('Failed to get DSA profile', 500);\n}\n?>","size_bytes":1722},"hostinger/api/leads/assign.php":{"content":"<?php\n/**\n * Assign Lead to DSA API Endpoint\n */\n\nrequire_once '../../config/database.php';\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\nrequireRole('admin');\n\nif ($_SERVER['REQUEST_METHOD'] !== 'PATCH') {\n    sendError('Method not allowed', 405);\n}\n\ntry {\n    // Get lead ID from URL path\n    $path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n    $pathParts = explode('/', $path);\n    $leadId = $pathParts[count($pathParts) - 2]; // Get ID before 'assign'\n    \n    if (empty($leadId)) {\n        sendError('Lead ID is required', 400);\n    }\n    \n    $input = getJsonInput();\n    validateRequiredFields($input, ['dsaId']);\n    \n    $dsaId = sanitizeInput($input['dsaId']);\n    $currentTime = getCurrentTimestamp();\n    \n    $db = getDB();\n    \n    // Verify DSA exists and has dsa role\n    $stmt = $db->prepare(\"SELECT id FROM users WHERE id = ? AND role = 'dsa' AND is_active = 1\");\n    $stmt->execute([$dsaId]);\n    if (!$stmt->fetch()) {\n        sendError('Invalid DSA ID', 400);\n    }\n    \n    // Update lead\n    $stmt = $db->prepare(\"\n        UPDATE leads \n        SET assigned_dsa_id = ?, assigned_at = ?, updated_at = ?\n        WHERE id = ?\n    \");\n    \n    $stmt->execute([$dsaId, $currentTime, $currentTime, $leadId]);\n    \n    if ($stmt->rowCount() === 0) {\n        sendError('Lead not found or no changes made', 404);\n    }\n    \n    // Get updated lead\n    $stmt = $db->prepare(\"SELECT * FROM leads WHERE id = ?\");\n    $stmt->execute([$leadId]);\n    $lead = $stmt->fetch();\n    \n    sendJsonResponse($lead);\n    \n} catch (Exception $e) {\n    logError('Assign lead error: ' . $e->getMessage());\n    sendError('Failed to assign lead', 500);\n}\n?>","size_bytes":1719},"hostinger/api/leads/index.php":{"content":"<?php\n/**\n * Leads API Endpoint\n */\n\nrequire_once '../../config/database.php';\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\n\n$method = $_SERVER['REQUEST_METHOD'];\n\ntry {\n    $db = getDB();\n    \n    if ($method === 'POST') {\n        // Create lead (public endpoint)\n        $input = getJsonInput();\n        validateRequiredFields($input, ['name', 'mobileNumber', 'loanType']);\n        \n        $leadData = [\n            'name' => sanitizeInput($input['name']),\n            'mobileNumber' => sanitizeInput($input['mobileNumber']),\n            'email' => sanitizeInput($input['email'] ?? null),\n            'loanType' => sanitizeInput($input['loanType']),\n            'amount' => isset($input['amount']) ? floatval($input['amount']) : null,\n            'city' => sanitizeInput($input['city'] ?? null),\n            'source' => sanitizeInput($input['source'] ?? 'website')\n        ];\n        \n        $leadId = generateUUID();\n        $currentTime = getCurrentTimestamp();\n        \n        $stmt = $db->prepare(\"\n            INSERT INTO leads (id, name, mobile_number, email, loan_type, amount, city, source, status, created_at, updated_at)\n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, 'new', ?, ?)\n        \");\n        \n        $stmt->execute([\n            $leadId,\n            $leadData['name'],\n            $leadData['mobileNumber'],\n            $leadData['email'],\n            $leadData['loanType'],\n            $leadData['amount'],\n            $leadData['city'],\n            $leadData['source'],\n            $currentTime,\n            $currentTime\n        ]);\n        \n        // Get created lead\n        $stmt = $db->prepare(\"SELECT * FROM leads WHERE id = ?\");\n        $stmt->execute([$leadId]);\n        $lead = $stmt->fetch();\n        \n        sendJsonResponse($lead, 201);\n        \n    } elseif ($method === 'GET') {\n        requireAuth();\n        \n        $userRole = getCurrentUserRole();\n        $userId = getCurrentUserId();\n        \n        if ($userRole === 'admin') {\n            $stmt = $db->prepare(\"\n                SELECT l.*, u.full_name as assigned_dsa_name\n                FROM leads l\n                LEFT JOIN users u ON l.assigned_dsa_id = u.id\n                ORDER BY l.created_at DESC\n            \");\n            $stmt->execute();\n        } elseif ($userRole === 'dsa') {\n            $stmt = $db->prepare(\"\n                SELECT * FROM leads \n                WHERE assigned_dsa_id = ?\n                ORDER BY created_at DESC\n            \");\n            $stmt->execute([$userId]);\n        } else {\n            sendError('Forbidden', 403);\n        }\n        \n        $leads = $stmt->fetchAll();\n        sendJsonResponse($leads);\n        \n    } else {\n        sendError('Method not allowed', 405);\n    }\n    \n} catch (Exception $e) {\n    logError('Leads error: ' . $e->getMessage());\n    sendError('Operation failed', 500);\n}\n?>","size_bytes":2906},"hostinger/api/leads/update.php":{"content":"<?php\n/**\n * Update Lead API Endpoint\n */\n\nrequire_once '../../config/database.php';\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\nrequireAuth();\n\nif ($_SERVER['REQUEST_METHOD'] !== 'PATCH') {\n    sendError('Method not allowed', 405);\n}\n\ntry {\n    // Get lead ID from URL path\n    $path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n    $pathParts = explode('/', $path);\n    $leadId = end($pathParts);\n    \n    if (empty($leadId)) {\n        sendError('Lead ID is required', 400);\n    }\n    \n    $input = getJsonInput();\n    $allowedFields = ['status', 'remarks', 'convertedAt'];\n    $updates = [];\n    $params = [];\n    \n    foreach ($allowedFields as $field) {\n        if (isset($input[$field])) {\n            $dbField = '';\n            switch ($field) {\n                case 'convertedAt':\n                    $dbField = 'converted_at';\n                    break;\n                default:\n                    $dbField = $field;\n            }\n            $updates[] = \"$dbField = ?\";\n            $params[] = sanitizeInput($input[$field]);\n        }\n    }\n    \n    if (empty($updates)) {\n        sendError('No valid fields to update', 400);\n    }\n    \n    $updates[] = \"updated_at = ?\";\n    $params[] = getCurrentTimestamp();\n    $params[] = $leadId;\n    \n    $db = getDB();\n    \n    $stmt = $db->prepare(\"\n        UPDATE leads \n        SET \" . implode(', ', $updates) . \"\n        WHERE id = ?\n    \");\n    \n    $stmt->execute($params);\n    \n    if ($stmt->rowCount() === 0) {\n        sendError('Lead not found or no changes made', 404);\n    }\n    \n    // Get updated lead\n    $stmt = $db->prepare(\"SELECT * FROM leads WHERE id = ?\");\n    $stmt->execute([$leadId]);\n    $lead = $stmt->fetch();\n    \n    sendJsonResponse($lead);\n    \n} catch (Exception $e) {\n    logError('Update lead error: ' . $e->getMessage());\n    sendError('Failed to update lead', 500);\n}\n?>","size_bytes":1925},"hostinger/api/loan-applications/index.php":{"content":"<?php\n/**\n * Loan Applications API Endpoint\n */\n\nrequire_once '../../config/database.php';\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\nrequireAuth();\n\n$method = $_SERVER['REQUEST_METHOD'];\n\ntry {\n    $db = getDB();\n    \n    if ($method === 'POST') {\n        // Create loan application\n        $input = getJsonInput();\n        validateRequiredFields($input, ['loanType']);\n        \n        $applicationData = [\n            'loanType' => sanitizeInput($input['loanType']),\n            'amount' => isset($input['amount']) ? floatval($input['amount']) : null,\n            'tenure' => isset($input['tenure']) ? intval($input['tenure']) : null,\n            'monthlyIncome' => isset($input['monthlyIncome']) ? floatval($input['monthlyIncome']) : null,\n            'employmentType' => sanitizeInput($input['employmentType'] ?? null),\n            'purpose' => sanitizeInput($input['purpose'] ?? null)\n        ];\n        \n        $db->beginTransaction();\n        \n        try {\n            $applicationId = generateUUID();\n            $userId = getCurrentUserId();\n            $currentTime = getCurrentTimestamp();\n            \n            $stmt = $db->prepare(\"\n                INSERT INTO loan_applications \n                (id, user_id, loan_type, amount, tenure, monthly_income, employment_type, purpose, status, created_at, updated_at)\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?, 'pending', ?, ?)\n            \");\n            \n            $stmt->execute([\n                $applicationId,\n                $userId,\n                $applicationData['loanType'],\n                $applicationData['amount'],\n                $applicationData['tenure'],\n                $applicationData['monthlyIncome'],\n                $applicationData['employmentType'],\n                $applicationData['purpose'],\n                $currentTime,\n                $currentTime\n            ]);\n            \n            // Create a lead for this application\n            $userStmt = $db->prepare(\"SELECT full_name, mobile_number, email, city FROM users WHERE id = ?\");\n            $userStmt->execute([$userId]);\n            $user = $userStmt->fetch();\n            \n            if ($user) {\n                $leadId = generateUUID();\n                $leadStmt = $db->prepare(\"\n                    INSERT INTO leads \n                    (id, name, mobile_number, email, loan_type, amount, city, source, status, created_at, updated_at)\n                    VALUES (?, ?, ?, ?, ?, ?, ?, 'application', 'new', ?, ?)\n                \");\n                \n                $leadStmt->execute([\n                    $leadId,\n                    $user['full_name'],\n                    $user['mobile_number'],\n                    $user['email'],\n                    $applicationData['loanType'],\n                    $applicationData['amount'] ?? 0,\n                    $user['city'] ?? 'Bhopal',\n                    $currentTime,\n                    $currentTime\n                ]);\n            }\n            \n            $db->commit();\n            \n            // Get the created application\n            $stmt = $db->prepare(\"SELECT * FROM loan_applications WHERE id = ?\");\n            $stmt->execute([$applicationId]);\n            $application = $stmt->fetch();\n            \n            sendJsonResponse($application, 201);\n            \n        } catch (Exception $e) {\n            $db->rollback();\n            throw $e;\n        }\n        \n    } elseif ($method === 'GET') {\n        // Get loan applications\n        $userRole = getCurrentUserRole();\n        $userId = getCurrentUserId();\n        \n        if ($userRole === 'admin') {\n            $stmt = $db->prepare(\"\n                SELECT la.*, u.full_name as user_name, u.email as user_email\n                FROM loan_applications la\n                LEFT JOIN users u ON la.user_id = u.id\n                ORDER BY la.created_at DESC\n            \");\n            $stmt->execute();\n        } elseif ($userRole === 'dsa') {\n            $stmt = $db->prepare(\"\n                SELECT la.*, u.full_name as user_name, u.email as user_email\n                FROM loan_applications la\n                LEFT JOIN users u ON la.user_id = u.id\n                WHERE la.assigned_dsa_id = ?\n                ORDER BY la.created_at DESC\n            \");\n            $stmt->execute([$userId]);\n        } else {\n            $stmt = $db->prepare(\"\n                SELECT * FROM loan_applications \n                WHERE user_id = ? \n                ORDER BY created_at DESC\n            \");\n            $stmt->execute([$userId]);\n        }\n        \n        $applications = $stmt->fetchAll();\n        sendJsonResponse($applications);\n        \n    } else {\n        sendError('Method not allowed', 405);\n    }\n    \n} catch (Exception $e) {\n    logError('Loan applications error: ' . $e->getMessage());\n    sendError('Operation failed', 500);\n}\n?>","size_bytes":4891},"hostinger/api/loan-applications/update.php":{"content":"<?php\n/**\n * Update Loan Application API Endpoint\n */\n\nrequire_once '../../config/database.php';\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\nrequireRole('admin');\n\nif ($_SERVER['REQUEST_METHOD'] !== 'PATCH') {\n    sendError('Method not allowed', 405);\n}\n\ntry {\n    // Get application ID from URL path\n    $path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n    $pathParts = explode('/', $path);\n    $applicationId = end($pathParts);\n    \n    if (empty($applicationId)) {\n        sendError('Application ID is required', 400);\n    }\n    \n    $input = getJsonInput();\n    $allowedFields = ['status', 'assignedDsaId', 'remarks', 'interestRate'];\n    $updates = [];\n    $params = [];\n    \n    foreach ($allowedFields as $field) {\n        if (isset($input[$field])) {\n            $dbField = '';\n            switch ($field) {\n                case 'assignedDsaId':\n                    $dbField = 'assigned_dsa_id';\n                    break;\n                case 'interestRate':\n                    $dbField = 'interest_rate';\n                    break;\n                default:\n                    $dbField = $field;\n            }\n            $updates[] = \"$dbField = ?\";\n            $params[] = sanitizeInput($input[$field]);\n        }\n    }\n    \n    if (empty($updates)) {\n        sendError('No valid fields to update', 400);\n    }\n    \n    $updates[] = \"updated_at = ?\";\n    $params[] = getCurrentTimestamp();\n    $params[] = $applicationId;\n    \n    $db = getDB();\n    \n    $stmt = $db->prepare(\"\n        UPDATE loan_applications \n        SET \" . implode(', ', $updates) . \"\n        WHERE id = ?\n    \");\n    \n    $stmt->execute($params);\n    \n    if ($stmt->rowCount() === 0) {\n        sendError('Application not found or no changes made', 404);\n    }\n    \n    // Get updated application\n    $stmt = $db->prepare(\"SELECT * FROM loan_applications WHERE id = ?\");\n    $stmt->execute([$applicationId]);\n    $application = $stmt->fetch();\n    \n    sendJsonResponse($application);\n    \n} catch (Exception $e) {\n    logError('Update loan application error: ' . $e->getMessage());\n    sendError('Failed to update application', 500);\n}\n?>","size_bytes":2192},"hostinger/api/users/register.php":{"content":"<?php\n/**\n * User Registration API Endpoint\n */\n\nrequire_once '../../config/database.php';\nrequire_once '../../includes/functions.php';\nrequire_once '../../includes/session.php';\n\nhandleCORS();\n\nif ($_SERVER['REQUEST_METHOD'] !== 'POST') {\n    sendError('Method not allowed', 405);\n}\n\ntry {\n    $input = getJsonInput();\n    validateRequiredFields($input, ['username', 'email', 'password', 'fullName', 'mobileNumber']);\n    \n    $userData = [\n        'username' => sanitizeInput($input['username']),\n        'email' => sanitizeInput($input['email']),\n        'password' => $input['password'],\n        'role' => sanitizeInput($input['role'] ?? 'user'),\n        'fullName' => sanitizeInput($input['fullName']),\n        'mobileNumber' => sanitizeInput($input['mobileNumber']),\n        'city' => sanitizeInput($input['city'] ?? null)\n    ];\n    \n    // Validate email format\n    if (!isValidEmail($userData['email'])) {\n        sendError('Invalid email format', 400);\n    }\n    \n    // Validate mobile number\n    if (!isValidMobile($userData['mobileNumber'])) {\n        sendError('Invalid mobile number format', 400);\n    }\n    \n    $db = getDB();\n    $db->beginTransaction();\n    \n    try {\n        // Check if username exists\n        $stmt = $db->prepare(\"SELECT id FROM users WHERE username = ?\");\n        $stmt->execute([$userData['username']]);\n        if ($stmt->fetch()) {\n            sendError('Username already exists', 400);\n        }\n        \n        // Check if email exists\n        $stmt = $db->prepare(\"SELECT id FROM users WHERE email = ?\");\n        $stmt->execute([$userData['email']]);\n        if ($stmt->fetch()) {\n            sendError('Email already registered', 400);\n        }\n        \n        // Create user\n        $userId = generateUUID();\n        $hashedPassword = hashPassword($userData['password']);\n        $currentTime = getCurrentTimestamp();\n        \n        $stmt = $db->prepare(\"\n            INSERT INTO users (id, username, email, password, role, full_name, mobile_number, city, is_active, created_at, updated_at)\n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1, ?, ?)\n        \");\n        \n        $stmt->execute([\n            $userId,\n            $userData['username'],\n            $userData['email'],\n            $hashedPassword,\n            $userData['role'],\n            $userData['fullName'],\n            $userData['mobileNumber'],\n            $userData['city'],\n            $currentTime,\n            $currentTime\n        ]);\n        \n        $db->commit();\n        \n        // Return user data (without password)\n        $user = [\n            'id' => $userId,\n            'username' => $userData['username'],\n            'email' => $userData['email'],\n            'role' => $userData['role'],\n            'fullName' => $userData['fullName'],\n            'mobileNumber' => $userData['mobileNumber'],\n            'city' => $userData['city']\n        ];\n        \n        sendJsonResponse(['user' => $user], 201);\n        \n    } catch (Exception $e) {\n        $db->rollback();\n        throw $e;\n    }\n    \n} catch (Exception $e) {\n    logError('Registration error: ' . $e->getMessage());\n    sendError('Registration failed', 400);\n}\n?>","size_bytes":3164}},"version":1}